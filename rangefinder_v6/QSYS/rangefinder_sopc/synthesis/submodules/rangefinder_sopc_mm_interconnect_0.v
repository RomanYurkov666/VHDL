// rangefinder_sopc_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.0 200 at 2017.05.29.21:21:42

`timescale 1 ps / 1 ps
module rangefinder_sopc_mm_interconnect_0 (
		input  wire        clk_clk_clk,                                   //                              clk_clk.clk
		input  wire        cpu_reset_n_reset_bridge_in_reset_reset,       //    cpu_reset_n_reset_bridge_in_reset.reset
		input  wire        ram_cpu_reset1_reset_bridge_in_reset_reset,    // ram_cpu_reset1_reset_bridge_in_reset.reset
		input  wire [15:0] cpu_data_master_address,                       //                      cpu_data_master.address
		output wire        cpu_data_master_waitrequest,                   //                                     .waitrequest
		input  wire [3:0]  cpu_data_master_byteenable,                    //                                     .byteenable
		input  wire        cpu_data_master_read,                          //                                     .read
		output wire [31:0] cpu_data_master_readdata,                      //                                     .readdata
		output wire        cpu_data_master_readdatavalid,                 //                                     .readdatavalid
		input  wire        cpu_data_master_write,                         //                                     .write
		input  wire [31:0] cpu_data_master_writedata,                     //                                     .writedata
		input  wire        cpu_data_master_debugaccess,                   //                                     .debugaccess
		input  wire [15:0] cpu_instruction_master_address,                //               cpu_instruction_master.address
		output wire        cpu_instruction_master_waitrequest,            //                                     .waitrequest
		input  wire        cpu_instruction_master_read,                   //                                     .read
		output wire [31:0] cpu_instruction_master_readdata,               //                                     .readdata
		output wire        cpu_instruction_master_readdatavalid,          //                                     .readdatavalid
		output wire [2:0]  amp_gain_s1_address,                           //                          amp_gain_s1.address
		output wire        amp_gain_s1_write,                             //                                     .write
		input  wire [31:0] amp_gain_s1_readdata,                          //                                     .readdata
		output wire [31:0] amp_gain_s1_writedata,                         //                                     .writedata
		output wire        amp_gain_s1_chipselect,                        //                                     .chipselect
		output wire [1:0]  apd_overcurrent_s1_address,                    //                   apd_overcurrent_s1.address
		input  wire [31:0] apd_overcurrent_s1_readdata,                   //                                     .readdata
		output wire [8:0]  cpu_jtag_debug_module_address,                 //                cpu_jtag_debug_module.address
		output wire        cpu_jtag_debug_module_write,                   //                                     .write
		output wire        cpu_jtag_debug_module_read,                    //                                     .read
		input  wire [31:0] cpu_jtag_debug_module_readdata,                //                                     .readdata
		output wire [31:0] cpu_jtag_debug_module_writedata,               //                                     .writedata
		output wire [3:0]  cpu_jtag_debug_module_byteenable,              //                                     .byteenable
		input  wire        cpu_jtag_debug_module_waitrequest,             //                                     .waitrequest
		output wire        cpu_jtag_debug_module_debugaccess,             //                                     .debugaccess
		output wire [2:0]  i2c_port_s1_address,                           //                          i2c_port_s1.address
		output wire        i2c_port_s1_write,                             //                                     .write
		input  wire [31:0] i2c_port_s1_readdata,                          //                                     .readdata
		output wire [31:0] i2c_port_s1_writedata,                         //                                     .writedata
		output wire        i2c_port_s1_chipselect,                        //                                     .chipselect
		output wire [2:0]  laser_charge_avalon_slave_0_address,           //          laser_charge_avalon_slave_0.address
		output wire        laser_charge_avalon_slave_0_write,             //                                     .write
		output wire        laser_charge_avalon_slave_0_read,              //                                     .read
		input  wire [31:0] laser_charge_avalon_slave_0_readdata,          //                                     .readdata
		output wire [31:0] laser_charge_avalon_slave_0_writedata,         //                                     .writedata
		output wire        laser_charge_avalon_slave_0_chipselect,        //                                     .chipselect
		output wire [2:0]  laser_driver_avalon_slave_0_address,           //          laser_driver_avalon_slave_0.address
		output wire        laser_driver_avalon_slave_0_write,             //                                     .write
		output wire        laser_driver_avalon_slave_0_read,              //                                     .read
		input  wire [31:0] laser_driver_avalon_slave_0_readdata,          //                                     .readdata
		output wire [31:0] laser_driver_avalon_slave_0_writedata,         //                                     .writedata
		output wire        laser_driver_avalon_slave_0_chipselect,        //                                     .chipselect
		output wire [2:0]  leds_port_s1_address,                          //                         leds_port_s1.address
		output wire        leds_port_s1_write,                            //                                     .write
		input  wire [31:0] leds_port_s1_readdata,                         //                                     .readdata
		output wire [31:0] leds_port_s1_writedata,                        //                                     .writedata
		output wire        leds_port_s1_chipselect,                       //                                     .chipselect
		output wire [2:0]  pc_uart_s1_address,                            //                           pc_uart_s1.address
		output wire        pc_uart_s1_write,                              //                                     .write
		output wire        pc_uart_s1_read,                               //                                     .read
		input  wire [15:0] pc_uart_s1_readdata,                           //                                     .readdata
		output wire [15:0] pc_uart_s1_writedata,                          //                                     .writedata
		output wire        pc_uart_s1_begintransfer,                      //                                     .begintransfer
		output wire        pc_uart_s1_chipselect,                         //                                     .chipselect
		output wire [2:0]  pulse_generator_avalon_slave_address,          //         pulse_generator_avalon_slave.address
		output wire        pulse_generator_avalon_slave_write,            //                                     .write
		output wire        pulse_generator_avalon_slave_read,             //                                     .read
		input  wire [31:0] pulse_generator_avalon_slave_readdata,         //                                     .readdata
		output wire [31:0] pulse_generator_avalon_slave_writedata,        //                                     .writedata
		output wire        pulse_generator_avalon_slave_chipselect,       //                                     .chipselect
		output wire [12:0] ram_cpu_s1_address,                            //                           ram_cpu_s1.address
		output wire        ram_cpu_s1_write,                              //                                     .write
		input  wire [31:0] ram_cpu_s1_readdata,                           //                                     .readdata
		output wire [31:0] ram_cpu_s1_writedata,                          //                                     .writedata
		output wire [3:0]  ram_cpu_s1_byteenable,                         //                                     .byteenable
		output wire        ram_cpu_s1_chipselect,                         //                                     .chipselect
		output wire        ram_cpu_s1_clken,                              //                                     .clken
		output wire [12:0] ram_cpu_s2_address,                            //                           ram_cpu_s2.address
		output wire        ram_cpu_s2_write,                              //                                     .write
		input  wire [31:0] ram_cpu_s2_readdata,                           //                                     .readdata
		output wire [31:0] ram_cpu_s2_writedata,                          //                                     .writedata
		output wire [3:0]  ram_cpu_s2_byteenable,                         //                                     .byteenable
		output wire        ram_cpu_s2_chipselect,                         //                                     .chipselect
		output wire        ram_cpu_s2_clken,                              //                                     .clken
		output wire [2:0]  rs485_de_s1_address,                           //                          rs485_de_s1.address
		output wire        rs485_de_s1_write,                             //                                     .write
		input  wire [31:0] rs485_de_s1_readdata,                          //                                     .readdata
		output wire [31:0] rs485_de_s1_writedata,                         //                                     .writedata
		output wire        rs485_de_s1_chipselect,                        //                                     .chipselect
		output wire [3:0]  sample_recorder_avalon_slave_address,          //         sample_recorder_avalon_slave.address
		output wire        sample_recorder_avalon_slave_write,            //                                     .write
		output wire        sample_recorder_avalon_slave_read,             //                                     .read
		input  wire [31:0] sample_recorder_avalon_slave_readdata,         //                                     .readdata
		output wire [31:0] sample_recorder_avalon_slave_writedata,        //                                     .writedata
		output wire        sample_recorder_avalon_slave_chipselect,       //                                     .chipselect
		output wire [5:0]  sample_recorder_avalon_slave_1_address,        //       sample_recorder_avalon_slave_1.address
		output wire        sample_recorder_avalon_slave_1_read,           //                                     .read
		input  wire [31:0] sample_recorder_avalon_slave_1_readdata,       //                                     .readdata
		output wire        sample_recorder_avalon_slave_1_chipselect,     //                                     .chipselect
		output wire [2:0]  service_timer_s1_address,                      //                     service_timer_s1.address
		output wire        service_timer_s1_write,                        //                                     .write
		input  wire [15:0] service_timer_s1_readdata,                     //                                     .readdata
		output wire [15:0] service_timer_s1_writedata,                    //                                     .writedata
		output wire        service_timer_s1_chipselect,                   //                                     .chipselect
		output wire [1:0]  spi_apd_avalon_slave_address,                  //                 spi_apd_avalon_slave.address
		output wire        spi_apd_avalon_slave_write,                    //                                     .write
		output wire        spi_apd_avalon_slave_read,                     //                                     .read
		input  wire [31:0] spi_apd_avalon_slave_readdata,                 //                                     .readdata
		output wire [31:0] spi_apd_avalon_slave_writedata,                //                                     .writedata
		output wire        spi_apd_avalon_slave_chipselect,               //                                     .chipselect
		output wire [1:0]  spi_tdc_avalon_slave_address,                  //                 spi_tdc_avalon_slave.address
		output wire        spi_tdc_avalon_slave_write,                    //                                     .write
		output wire        spi_tdc_avalon_slave_read,                     //                                     .read
		input  wire [31:0] spi_tdc_avalon_slave_readdata,                 //                                     .readdata
		output wire [31:0] spi_tdc_avalon_slave_writedata,                //                                     .writedata
		output wire        spi_tdc_avalon_slave_chipselect,               //                                     .chipselect
		output wire [1:0]  spi_vga_avalon_slave_address,                  //                 spi_vga_avalon_slave.address
		output wire        spi_vga_avalon_slave_write,                    //                                     .write
		output wire        spi_vga_avalon_slave_read,                     //                                     .read
		input  wire [31:0] spi_vga_avalon_slave_readdata,                 //                                     .readdata
		output wire [31:0] spi_vga_avalon_slave_writedata,                //                                     .writedata
		output wire        spi_vga_avalon_slave_chipselect,               //                                     .chipselect
		output wire [1:0]  stepper_atten_avalon_slave_0_address,          //         stepper_atten_avalon_slave_0.address
		output wire        stepper_atten_avalon_slave_0_write,            //                                     .write
		output wire        stepper_atten_avalon_slave_0_read,             //                                     .read
		input  wire [31:0] stepper_atten_avalon_slave_0_readdata,         //                                     .readdata
		output wire [31:0] stepper_atten_avalon_slave_0_writedata,        //                                     .writedata
		output wire        stepper_atten_avalon_slave_0_chipselect,       //                                     .chipselect
		output wire [1:0]  stepper_iris_avalon_slave_0_address,           //          stepper_iris_avalon_slave_0.address
		output wire        stepper_iris_avalon_slave_0_write,             //                                     .write
		output wire        stepper_iris_avalon_slave_0_read,              //                                     .read
		input  wire [31:0] stepper_iris_avalon_slave_0_readdata,          //                                     .readdata
		output wire [31:0] stepper_iris_avalon_slave_0_writedata,         //                                     .writedata
		output wire        stepper_iris_avalon_slave_0_chipselect,        //                                     .chipselect
		output wire [0:0]  sys_id_control_slave_address,                  //                 sys_id_control_slave.address
		input  wire [31:0] sys_id_control_slave_readdata,                 //                                     .readdata
		output wire [2:0]  sys_timer_s1_address,                          //                         sys_timer_s1.address
		output wire        sys_timer_s1_write,                            //                                     .write
		input  wire [15:0] sys_timer_s1_readdata,                         //                                     .readdata
		output wire [15:0] sys_timer_s1_writedata,                        //                                     .writedata
		output wire        sys_timer_s1_chipselect,                       //                                     .chipselect
		output wire [2:0]  system_mode_s1_address,                        //                       system_mode_s1.address
		output wire        system_mode_s1_write,                          //                                     .write
		input  wire [31:0] system_mode_s1_readdata,                       //                                     .readdata
		output wire [31:0] system_mode_s1_writedata,                      //                                     .writedata
		output wire        system_mode_s1_chipselect,                     //                                     .chipselect
		output wire [2:0]  tdc_enable_s1_address,                         //                        tdc_enable_s1.address
		output wire        tdc_enable_s1_write,                           //                                     .write
		input  wire [31:0] tdc_enable_s1_readdata,                        //                                     .readdata
		output wire [31:0] tdc_enable_s1_writedata,                       //                                     .writedata
		output wire        tdc_enable_s1_chipselect,                      //                                     .chipselect
		output wire [2:0]  tdc_start_pulse_gen_avalon_slave_0_address,    //   tdc_start_pulse_gen_avalon_slave_0.address
		output wire        tdc_start_pulse_gen_avalon_slave_0_write,      //                                     .write
		output wire        tdc_start_pulse_gen_avalon_slave_0_read,       //                                     .read
		input  wire [31:0] tdc_start_pulse_gen_avalon_slave_0_readdata,   //                                     .readdata
		output wire [31:0] tdc_start_pulse_gen_avalon_slave_0_writedata,  //                                     .writedata
		output wire        tdc_start_pulse_gen_avalon_slave_0_chipselect  //                                     .chipselect
	);

	wire         cpu_instruction_master_translator_avalon_universal_master_0_waitrequest;   // cpu_instruction_master_agent:av_waitrequest -> cpu_instruction_master_translator:uav_waitrequest
	wire   [2:0] cpu_instruction_master_translator_avalon_universal_master_0_burstcount;    // cpu_instruction_master_translator:uav_burstcount -> cpu_instruction_master_agent:av_burstcount
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_writedata;     // cpu_instruction_master_translator:uav_writedata -> cpu_instruction_master_agent:av_writedata
	wire  [15:0] cpu_instruction_master_translator_avalon_universal_master_0_address;       // cpu_instruction_master_translator:uav_address -> cpu_instruction_master_agent:av_address
	wire         cpu_instruction_master_translator_avalon_universal_master_0_lock;          // cpu_instruction_master_translator:uav_lock -> cpu_instruction_master_agent:av_lock
	wire         cpu_instruction_master_translator_avalon_universal_master_0_write;         // cpu_instruction_master_translator:uav_write -> cpu_instruction_master_agent:av_write
	wire         cpu_instruction_master_translator_avalon_universal_master_0_read;          // cpu_instruction_master_translator:uav_read -> cpu_instruction_master_agent:av_read
	wire  [31:0] cpu_instruction_master_translator_avalon_universal_master_0_readdata;      // cpu_instruction_master_agent:av_readdata -> cpu_instruction_master_translator:uav_readdata
	wire         cpu_instruction_master_translator_avalon_universal_master_0_debugaccess;   // cpu_instruction_master_translator:uav_debugaccess -> cpu_instruction_master_agent:av_debugaccess
	wire   [3:0] cpu_instruction_master_translator_avalon_universal_master_0_byteenable;    // cpu_instruction_master_translator:uav_byteenable -> cpu_instruction_master_agent:av_byteenable
	wire         cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid; // cpu_instruction_master_agent:av_readdatavalid -> cpu_instruction_master_translator:uav_readdatavalid
	wire         cpu_data_master_translator_avalon_universal_master_0_waitrequest;          // cpu_data_master_agent:av_waitrequest -> cpu_data_master_translator:uav_waitrequest
	wire   [2:0] cpu_data_master_translator_avalon_universal_master_0_burstcount;           // cpu_data_master_translator:uav_burstcount -> cpu_data_master_agent:av_burstcount
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_writedata;            // cpu_data_master_translator:uav_writedata -> cpu_data_master_agent:av_writedata
	wire  [15:0] cpu_data_master_translator_avalon_universal_master_0_address;              // cpu_data_master_translator:uav_address -> cpu_data_master_agent:av_address
	wire         cpu_data_master_translator_avalon_universal_master_0_lock;                 // cpu_data_master_translator:uav_lock -> cpu_data_master_agent:av_lock
	wire         cpu_data_master_translator_avalon_universal_master_0_write;                // cpu_data_master_translator:uav_write -> cpu_data_master_agent:av_write
	wire         cpu_data_master_translator_avalon_universal_master_0_read;                 // cpu_data_master_translator:uav_read -> cpu_data_master_agent:av_read
	wire  [31:0] cpu_data_master_translator_avalon_universal_master_0_readdata;             // cpu_data_master_agent:av_readdata -> cpu_data_master_translator:uav_readdata
	wire         cpu_data_master_translator_avalon_universal_master_0_debugaccess;          // cpu_data_master_translator:uav_debugaccess -> cpu_data_master_agent:av_debugaccess
	wire   [3:0] cpu_data_master_translator_avalon_universal_master_0_byteenable;           // cpu_data_master_translator:uav_byteenable -> cpu_data_master_agent:av_byteenable
	wire         cpu_data_master_translator_avalon_universal_master_0_readdatavalid;        // cpu_data_master_agent:av_readdatavalid -> cpu_data_master_translator:uav_readdatavalid
	wire         cpu_jtag_debug_module_agent_m0_waitrequest;                                // cpu_jtag_debug_module_translator:uav_waitrequest -> cpu_jtag_debug_module_agent:m0_waitrequest
	wire   [2:0] cpu_jtag_debug_module_agent_m0_burstcount;                                 // cpu_jtag_debug_module_agent:m0_burstcount -> cpu_jtag_debug_module_translator:uav_burstcount
	wire  [31:0] cpu_jtag_debug_module_agent_m0_writedata;                                  // cpu_jtag_debug_module_agent:m0_writedata -> cpu_jtag_debug_module_translator:uav_writedata
	wire  [15:0] cpu_jtag_debug_module_agent_m0_address;                                    // cpu_jtag_debug_module_agent:m0_address -> cpu_jtag_debug_module_translator:uav_address
	wire         cpu_jtag_debug_module_agent_m0_write;                                      // cpu_jtag_debug_module_agent:m0_write -> cpu_jtag_debug_module_translator:uav_write
	wire         cpu_jtag_debug_module_agent_m0_lock;                                       // cpu_jtag_debug_module_agent:m0_lock -> cpu_jtag_debug_module_translator:uav_lock
	wire         cpu_jtag_debug_module_agent_m0_read;                                       // cpu_jtag_debug_module_agent:m0_read -> cpu_jtag_debug_module_translator:uav_read
	wire  [31:0] cpu_jtag_debug_module_agent_m0_readdata;                                   // cpu_jtag_debug_module_translator:uav_readdata -> cpu_jtag_debug_module_agent:m0_readdata
	wire         cpu_jtag_debug_module_agent_m0_readdatavalid;                              // cpu_jtag_debug_module_translator:uav_readdatavalid -> cpu_jtag_debug_module_agent:m0_readdatavalid
	wire         cpu_jtag_debug_module_agent_m0_debugaccess;                                // cpu_jtag_debug_module_agent:m0_debugaccess -> cpu_jtag_debug_module_translator:uav_debugaccess
	wire   [3:0] cpu_jtag_debug_module_agent_m0_byteenable;                                 // cpu_jtag_debug_module_agent:m0_byteenable -> cpu_jtag_debug_module_translator:uav_byteenable
	wire         cpu_jtag_debug_module_agent_rf_source_endofpacket;                         // cpu_jtag_debug_module_agent:rf_source_endofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire         cpu_jtag_debug_module_agent_rf_source_valid;                               // cpu_jtag_debug_module_agent:rf_source_valid -> cpu_jtag_debug_module_agent_rsp_fifo:in_valid
	wire         cpu_jtag_debug_module_agent_rf_source_startofpacket;                       // cpu_jtag_debug_module_agent:rf_source_startofpacket -> cpu_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire  [96:0] cpu_jtag_debug_module_agent_rf_source_data;                                // cpu_jtag_debug_module_agent:rf_source_data -> cpu_jtag_debug_module_agent_rsp_fifo:in_data
	wire         cpu_jtag_debug_module_agent_rf_source_ready;                               // cpu_jtag_debug_module_agent_rsp_fifo:in_ready -> cpu_jtag_debug_module_agent:rf_source_ready
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // cpu_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> cpu_jtag_debug_module_agent:rf_sink_endofpacket
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_valid;                            // cpu_jtag_debug_module_agent_rsp_fifo:out_valid -> cpu_jtag_debug_module_agent:rf_sink_valid
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // cpu_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> cpu_jtag_debug_module_agent:rf_sink_startofpacket
	wire  [96:0] cpu_jtag_debug_module_agent_rsp_fifo_out_data;                             // cpu_jtag_debug_module_agent_rsp_fifo:out_data -> cpu_jtag_debug_module_agent:rf_sink_data
	wire         cpu_jtag_debug_module_agent_rsp_fifo_out_ready;                            // cpu_jtag_debug_module_agent:rf_sink_ready -> cpu_jtag_debug_module_agent_rsp_fifo:out_ready
	wire         cpu_jtag_debug_module_agent_rdata_fifo_src_valid;                          // cpu_jtag_debug_module_agent:rdata_fifo_src_valid -> cpu_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire  [33:0] cpu_jtag_debug_module_agent_rdata_fifo_src_data;                           // cpu_jtag_debug_module_agent:rdata_fifo_src_data -> cpu_jtag_debug_module_agent:rdata_fifo_sink_data
	wire         cpu_jtag_debug_module_agent_rdata_fifo_src_ready;                          // cpu_jtag_debug_module_agent:rdata_fifo_sink_ready -> cpu_jtag_debug_module_agent:rdata_fifo_src_ready
	wire         cmd_mux_src_endofpacket;                                                   // cmd_mux:src_endofpacket -> cpu_jtag_debug_module_agent:cp_endofpacket
	wire         cmd_mux_src_valid;                                                         // cmd_mux:src_valid -> cpu_jtag_debug_module_agent:cp_valid
	wire         cmd_mux_src_startofpacket;                                                 // cmd_mux:src_startofpacket -> cpu_jtag_debug_module_agent:cp_startofpacket
	wire  [95:0] cmd_mux_src_data;                                                          // cmd_mux:src_data -> cpu_jtag_debug_module_agent:cp_data
	wire  [24:0] cmd_mux_src_channel;                                                       // cmd_mux:src_channel -> cpu_jtag_debug_module_agent:cp_channel
	wire         cmd_mux_src_ready;                                                         // cpu_jtag_debug_module_agent:cp_ready -> cmd_mux:src_ready
	wire         ram_cpu_s1_agent_m0_waitrequest;                                           // ram_cpu_s1_translator:uav_waitrequest -> ram_cpu_s1_agent:m0_waitrequest
	wire   [2:0] ram_cpu_s1_agent_m0_burstcount;                                            // ram_cpu_s1_agent:m0_burstcount -> ram_cpu_s1_translator:uav_burstcount
	wire  [31:0] ram_cpu_s1_agent_m0_writedata;                                             // ram_cpu_s1_agent:m0_writedata -> ram_cpu_s1_translator:uav_writedata
	wire  [15:0] ram_cpu_s1_agent_m0_address;                                               // ram_cpu_s1_agent:m0_address -> ram_cpu_s1_translator:uav_address
	wire         ram_cpu_s1_agent_m0_write;                                                 // ram_cpu_s1_agent:m0_write -> ram_cpu_s1_translator:uav_write
	wire         ram_cpu_s1_agent_m0_lock;                                                  // ram_cpu_s1_agent:m0_lock -> ram_cpu_s1_translator:uav_lock
	wire         ram_cpu_s1_agent_m0_read;                                                  // ram_cpu_s1_agent:m0_read -> ram_cpu_s1_translator:uav_read
	wire  [31:0] ram_cpu_s1_agent_m0_readdata;                                              // ram_cpu_s1_translator:uav_readdata -> ram_cpu_s1_agent:m0_readdata
	wire         ram_cpu_s1_agent_m0_readdatavalid;                                         // ram_cpu_s1_translator:uav_readdatavalid -> ram_cpu_s1_agent:m0_readdatavalid
	wire         ram_cpu_s1_agent_m0_debugaccess;                                           // ram_cpu_s1_agent:m0_debugaccess -> ram_cpu_s1_translator:uav_debugaccess
	wire   [3:0] ram_cpu_s1_agent_m0_byteenable;                                            // ram_cpu_s1_agent:m0_byteenable -> ram_cpu_s1_translator:uav_byteenable
	wire         ram_cpu_s1_agent_rf_source_endofpacket;                                    // ram_cpu_s1_agent:rf_source_endofpacket -> ram_cpu_s1_agent_rsp_fifo:in_endofpacket
	wire         ram_cpu_s1_agent_rf_source_valid;                                          // ram_cpu_s1_agent:rf_source_valid -> ram_cpu_s1_agent_rsp_fifo:in_valid
	wire         ram_cpu_s1_agent_rf_source_startofpacket;                                  // ram_cpu_s1_agent:rf_source_startofpacket -> ram_cpu_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] ram_cpu_s1_agent_rf_source_data;                                           // ram_cpu_s1_agent:rf_source_data -> ram_cpu_s1_agent_rsp_fifo:in_data
	wire         ram_cpu_s1_agent_rf_source_ready;                                          // ram_cpu_s1_agent_rsp_fifo:in_ready -> ram_cpu_s1_agent:rf_source_ready
	wire         ram_cpu_s1_agent_rsp_fifo_out_endofpacket;                                 // ram_cpu_s1_agent_rsp_fifo:out_endofpacket -> ram_cpu_s1_agent:rf_sink_endofpacket
	wire         ram_cpu_s1_agent_rsp_fifo_out_valid;                                       // ram_cpu_s1_agent_rsp_fifo:out_valid -> ram_cpu_s1_agent:rf_sink_valid
	wire         ram_cpu_s1_agent_rsp_fifo_out_startofpacket;                               // ram_cpu_s1_agent_rsp_fifo:out_startofpacket -> ram_cpu_s1_agent:rf_sink_startofpacket
	wire  [96:0] ram_cpu_s1_agent_rsp_fifo_out_data;                                        // ram_cpu_s1_agent_rsp_fifo:out_data -> ram_cpu_s1_agent:rf_sink_data
	wire         ram_cpu_s1_agent_rsp_fifo_out_ready;                                       // ram_cpu_s1_agent:rf_sink_ready -> ram_cpu_s1_agent_rsp_fifo:out_ready
	wire         ram_cpu_s1_agent_rdata_fifo_src_valid;                                     // ram_cpu_s1_agent:rdata_fifo_src_valid -> ram_cpu_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] ram_cpu_s1_agent_rdata_fifo_src_data;                                      // ram_cpu_s1_agent:rdata_fifo_src_data -> ram_cpu_s1_agent:rdata_fifo_sink_data
	wire         ram_cpu_s1_agent_rdata_fifo_src_ready;                                     // ram_cpu_s1_agent:rdata_fifo_sink_ready -> ram_cpu_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_001_src_endofpacket;                                               // cmd_mux_001:src_endofpacket -> ram_cpu_s1_agent:cp_endofpacket
	wire         cmd_mux_001_src_valid;                                                     // cmd_mux_001:src_valid -> ram_cpu_s1_agent:cp_valid
	wire         cmd_mux_001_src_startofpacket;                                             // cmd_mux_001:src_startofpacket -> ram_cpu_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_001_src_data;                                                      // cmd_mux_001:src_data -> ram_cpu_s1_agent:cp_data
	wire  [24:0] cmd_mux_001_src_channel;                                                   // cmd_mux_001:src_channel -> ram_cpu_s1_agent:cp_channel
	wire         cmd_mux_001_src_ready;                                                     // ram_cpu_s1_agent:cp_ready -> cmd_mux_001:src_ready
	wire         ram_cpu_s2_agent_m0_waitrequest;                                           // ram_cpu_s2_translator:uav_waitrequest -> ram_cpu_s2_agent:m0_waitrequest
	wire   [2:0] ram_cpu_s2_agent_m0_burstcount;                                            // ram_cpu_s2_agent:m0_burstcount -> ram_cpu_s2_translator:uav_burstcount
	wire  [31:0] ram_cpu_s2_agent_m0_writedata;                                             // ram_cpu_s2_agent:m0_writedata -> ram_cpu_s2_translator:uav_writedata
	wire  [15:0] ram_cpu_s2_agent_m0_address;                                               // ram_cpu_s2_agent:m0_address -> ram_cpu_s2_translator:uav_address
	wire         ram_cpu_s2_agent_m0_write;                                                 // ram_cpu_s2_agent:m0_write -> ram_cpu_s2_translator:uav_write
	wire         ram_cpu_s2_agent_m0_lock;                                                  // ram_cpu_s2_agent:m0_lock -> ram_cpu_s2_translator:uav_lock
	wire         ram_cpu_s2_agent_m0_read;                                                  // ram_cpu_s2_agent:m0_read -> ram_cpu_s2_translator:uav_read
	wire  [31:0] ram_cpu_s2_agent_m0_readdata;                                              // ram_cpu_s2_translator:uav_readdata -> ram_cpu_s2_agent:m0_readdata
	wire         ram_cpu_s2_agent_m0_readdatavalid;                                         // ram_cpu_s2_translator:uav_readdatavalid -> ram_cpu_s2_agent:m0_readdatavalid
	wire         ram_cpu_s2_agent_m0_debugaccess;                                           // ram_cpu_s2_agent:m0_debugaccess -> ram_cpu_s2_translator:uav_debugaccess
	wire   [3:0] ram_cpu_s2_agent_m0_byteenable;                                            // ram_cpu_s2_agent:m0_byteenable -> ram_cpu_s2_translator:uav_byteenable
	wire         ram_cpu_s2_agent_rf_source_endofpacket;                                    // ram_cpu_s2_agent:rf_source_endofpacket -> ram_cpu_s2_agent_rsp_fifo:in_endofpacket
	wire         ram_cpu_s2_agent_rf_source_valid;                                          // ram_cpu_s2_agent:rf_source_valid -> ram_cpu_s2_agent_rsp_fifo:in_valid
	wire         ram_cpu_s2_agent_rf_source_startofpacket;                                  // ram_cpu_s2_agent:rf_source_startofpacket -> ram_cpu_s2_agent_rsp_fifo:in_startofpacket
	wire  [96:0] ram_cpu_s2_agent_rf_source_data;                                           // ram_cpu_s2_agent:rf_source_data -> ram_cpu_s2_agent_rsp_fifo:in_data
	wire         ram_cpu_s2_agent_rf_source_ready;                                          // ram_cpu_s2_agent_rsp_fifo:in_ready -> ram_cpu_s2_agent:rf_source_ready
	wire         ram_cpu_s2_agent_rsp_fifo_out_endofpacket;                                 // ram_cpu_s2_agent_rsp_fifo:out_endofpacket -> ram_cpu_s2_agent:rf_sink_endofpacket
	wire         ram_cpu_s2_agent_rsp_fifo_out_valid;                                       // ram_cpu_s2_agent_rsp_fifo:out_valid -> ram_cpu_s2_agent:rf_sink_valid
	wire         ram_cpu_s2_agent_rsp_fifo_out_startofpacket;                               // ram_cpu_s2_agent_rsp_fifo:out_startofpacket -> ram_cpu_s2_agent:rf_sink_startofpacket
	wire  [96:0] ram_cpu_s2_agent_rsp_fifo_out_data;                                        // ram_cpu_s2_agent_rsp_fifo:out_data -> ram_cpu_s2_agent:rf_sink_data
	wire         ram_cpu_s2_agent_rsp_fifo_out_ready;                                       // ram_cpu_s2_agent:rf_sink_ready -> ram_cpu_s2_agent_rsp_fifo:out_ready
	wire         ram_cpu_s2_agent_rdata_fifo_src_valid;                                     // ram_cpu_s2_agent:rdata_fifo_src_valid -> ram_cpu_s2_agent:rdata_fifo_sink_valid
	wire  [33:0] ram_cpu_s2_agent_rdata_fifo_src_data;                                      // ram_cpu_s2_agent:rdata_fifo_src_data -> ram_cpu_s2_agent:rdata_fifo_sink_data
	wire         ram_cpu_s2_agent_rdata_fifo_src_ready;                                     // ram_cpu_s2_agent:rdata_fifo_sink_ready -> ram_cpu_s2_agent:rdata_fifo_src_ready
	wire         cmd_mux_002_src_endofpacket;                                               // cmd_mux_002:src_endofpacket -> ram_cpu_s2_agent:cp_endofpacket
	wire         cmd_mux_002_src_valid;                                                     // cmd_mux_002:src_valid -> ram_cpu_s2_agent:cp_valid
	wire         cmd_mux_002_src_startofpacket;                                             // cmd_mux_002:src_startofpacket -> ram_cpu_s2_agent:cp_startofpacket
	wire  [95:0] cmd_mux_002_src_data;                                                      // cmd_mux_002:src_data -> ram_cpu_s2_agent:cp_data
	wire  [24:0] cmd_mux_002_src_channel;                                                   // cmd_mux_002:src_channel -> ram_cpu_s2_agent:cp_channel
	wire         cmd_mux_002_src_ready;                                                     // ram_cpu_s2_agent:cp_ready -> cmd_mux_002:src_ready
	wire         sys_id_control_slave_agent_m0_waitrequest;                                 // sys_id_control_slave_translator:uav_waitrequest -> sys_id_control_slave_agent:m0_waitrequest
	wire   [2:0] sys_id_control_slave_agent_m0_burstcount;                                  // sys_id_control_slave_agent:m0_burstcount -> sys_id_control_slave_translator:uav_burstcount
	wire  [31:0] sys_id_control_slave_agent_m0_writedata;                                   // sys_id_control_slave_agent:m0_writedata -> sys_id_control_slave_translator:uav_writedata
	wire  [15:0] sys_id_control_slave_agent_m0_address;                                     // sys_id_control_slave_agent:m0_address -> sys_id_control_slave_translator:uav_address
	wire         sys_id_control_slave_agent_m0_write;                                       // sys_id_control_slave_agent:m0_write -> sys_id_control_slave_translator:uav_write
	wire         sys_id_control_slave_agent_m0_lock;                                        // sys_id_control_slave_agent:m0_lock -> sys_id_control_slave_translator:uav_lock
	wire         sys_id_control_slave_agent_m0_read;                                        // sys_id_control_slave_agent:m0_read -> sys_id_control_slave_translator:uav_read
	wire  [31:0] sys_id_control_slave_agent_m0_readdata;                                    // sys_id_control_slave_translator:uav_readdata -> sys_id_control_slave_agent:m0_readdata
	wire         sys_id_control_slave_agent_m0_readdatavalid;                               // sys_id_control_slave_translator:uav_readdatavalid -> sys_id_control_slave_agent:m0_readdatavalid
	wire         sys_id_control_slave_agent_m0_debugaccess;                                 // sys_id_control_slave_agent:m0_debugaccess -> sys_id_control_slave_translator:uav_debugaccess
	wire   [3:0] sys_id_control_slave_agent_m0_byteenable;                                  // sys_id_control_slave_agent:m0_byteenable -> sys_id_control_slave_translator:uav_byteenable
	wire         sys_id_control_slave_agent_rf_source_endofpacket;                          // sys_id_control_slave_agent:rf_source_endofpacket -> sys_id_control_slave_agent_rsp_fifo:in_endofpacket
	wire         sys_id_control_slave_agent_rf_source_valid;                                // sys_id_control_slave_agent:rf_source_valid -> sys_id_control_slave_agent_rsp_fifo:in_valid
	wire         sys_id_control_slave_agent_rf_source_startofpacket;                        // sys_id_control_slave_agent:rf_source_startofpacket -> sys_id_control_slave_agent_rsp_fifo:in_startofpacket
	wire  [96:0] sys_id_control_slave_agent_rf_source_data;                                 // sys_id_control_slave_agent:rf_source_data -> sys_id_control_slave_agent_rsp_fifo:in_data
	wire         sys_id_control_slave_agent_rf_source_ready;                                // sys_id_control_slave_agent_rsp_fifo:in_ready -> sys_id_control_slave_agent:rf_source_ready
	wire         sys_id_control_slave_agent_rsp_fifo_out_endofpacket;                       // sys_id_control_slave_agent_rsp_fifo:out_endofpacket -> sys_id_control_slave_agent:rf_sink_endofpacket
	wire         sys_id_control_slave_agent_rsp_fifo_out_valid;                             // sys_id_control_slave_agent_rsp_fifo:out_valid -> sys_id_control_slave_agent:rf_sink_valid
	wire         sys_id_control_slave_agent_rsp_fifo_out_startofpacket;                     // sys_id_control_slave_agent_rsp_fifo:out_startofpacket -> sys_id_control_slave_agent:rf_sink_startofpacket
	wire  [96:0] sys_id_control_slave_agent_rsp_fifo_out_data;                              // sys_id_control_slave_agent_rsp_fifo:out_data -> sys_id_control_slave_agent:rf_sink_data
	wire         sys_id_control_slave_agent_rsp_fifo_out_ready;                             // sys_id_control_slave_agent:rf_sink_ready -> sys_id_control_slave_agent_rsp_fifo:out_ready
	wire         sys_id_control_slave_agent_rdata_fifo_src_valid;                           // sys_id_control_slave_agent:rdata_fifo_src_valid -> sys_id_control_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] sys_id_control_slave_agent_rdata_fifo_src_data;                            // sys_id_control_slave_agent:rdata_fifo_src_data -> sys_id_control_slave_agent:rdata_fifo_sink_data
	wire         sys_id_control_slave_agent_rdata_fifo_src_ready;                           // sys_id_control_slave_agent:rdata_fifo_sink_ready -> sys_id_control_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_003_src_endofpacket;                                               // cmd_mux_003:src_endofpacket -> sys_id_control_slave_agent:cp_endofpacket
	wire         cmd_mux_003_src_valid;                                                     // cmd_mux_003:src_valid -> sys_id_control_slave_agent:cp_valid
	wire         cmd_mux_003_src_startofpacket;                                             // cmd_mux_003:src_startofpacket -> sys_id_control_slave_agent:cp_startofpacket
	wire  [95:0] cmd_mux_003_src_data;                                                      // cmd_mux_003:src_data -> sys_id_control_slave_agent:cp_data
	wire  [24:0] cmd_mux_003_src_channel;                                                   // cmd_mux_003:src_channel -> sys_id_control_slave_agent:cp_channel
	wire         cmd_mux_003_src_ready;                                                     // sys_id_control_slave_agent:cp_ready -> cmd_mux_003:src_ready
	wire         sys_timer_s1_agent_m0_waitrequest;                                         // sys_timer_s1_translator:uav_waitrequest -> sys_timer_s1_agent:m0_waitrequest
	wire   [2:0] sys_timer_s1_agent_m0_burstcount;                                          // sys_timer_s1_agent:m0_burstcount -> sys_timer_s1_translator:uav_burstcount
	wire  [31:0] sys_timer_s1_agent_m0_writedata;                                           // sys_timer_s1_agent:m0_writedata -> sys_timer_s1_translator:uav_writedata
	wire  [15:0] sys_timer_s1_agent_m0_address;                                             // sys_timer_s1_agent:m0_address -> sys_timer_s1_translator:uav_address
	wire         sys_timer_s1_agent_m0_write;                                               // sys_timer_s1_agent:m0_write -> sys_timer_s1_translator:uav_write
	wire         sys_timer_s1_agent_m0_lock;                                                // sys_timer_s1_agent:m0_lock -> sys_timer_s1_translator:uav_lock
	wire         sys_timer_s1_agent_m0_read;                                                // sys_timer_s1_agent:m0_read -> sys_timer_s1_translator:uav_read
	wire  [31:0] sys_timer_s1_agent_m0_readdata;                                            // sys_timer_s1_translator:uav_readdata -> sys_timer_s1_agent:m0_readdata
	wire         sys_timer_s1_agent_m0_readdatavalid;                                       // sys_timer_s1_translator:uav_readdatavalid -> sys_timer_s1_agent:m0_readdatavalid
	wire         sys_timer_s1_agent_m0_debugaccess;                                         // sys_timer_s1_agent:m0_debugaccess -> sys_timer_s1_translator:uav_debugaccess
	wire   [3:0] sys_timer_s1_agent_m0_byteenable;                                          // sys_timer_s1_agent:m0_byteenable -> sys_timer_s1_translator:uav_byteenable
	wire         sys_timer_s1_agent_rf_source_endofpacket;                                  // sys_timer_s1_agent:rf_source_endofpacket -> sys_timer_s1_agent_rsp_fifo:in_endofpacket
	wire         sys_timer_s1_agent_rf_source_valid;                                        // sys_timer_s1_agent:rf_source_valid -> sys_timer_s1_agent_rsp_fifo:in_valid
	wire         sys_timer_s1_agent_rf_source_startofpacket;                                // sys_timer_s1_agent:rf_source_startofpacket -> sys_timer_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] sys_timer_s1_agent_rf_source_data;                                         // sys_timer_s1_agent:rf_source_data -> sys_timer_s1_agent_rsp_fifo:in_data
	wire         sys_timer_s1_agent_rf_source_ready;                                        // sys_timer_s1_agent_rsp_fifo:in_ready -> sys_timer_s1_agent:rf_source_ready
	wire         sys_timer_s1_agent_rsp_fifo_out_endofpacket;                               // sys_timer_s1_agent_rsp_fifo:out_endofpacket -> sys_timer_s1_agent:rf_sink_endofpacket
	wire         sys_timer_s1_agent_rsp_fifo_out_valid;                                     // sys_timer_s1_agent_rsp_fifo:out_valid -> sys_timer_s1_agent:rf_sink_valid
	wire         sys_timer_s1_agent_rsp_fifo_out_startofpacket;                             // sys_timer_s1_agent_rsp_fifo:out_startofpacket -> sys_timer_s1_agent:rf_sink_startofpacket
	wire  [96:0] sys_timer_s1_agent_rsp_fifo_out_data;                                      // sys_timer_s1_agent_rsp_fifo:out_data -> sys_timer_s1_agent:rf_sink_data
	wire         sys_timer_s1_agent_rsp_fifo_out_ready;                                     // sys_timer_s1_agent:rf_sink_ready -> sys_timer_s1_agent_rsp_fifo:out_ready
	wire         sys_timer_s1_agent_rdata_fifo_src_valid;                                   // sys_timer_s1_agent:rdata_fifo_src_valid -> sys_timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] sys_timer_s1_agent_rdata_fifo_src_data;                                    // sys_timer_s1_agent:rdata_fifo_src_data -> sys_timer_s1_agent:rdata_fifo_sink_data
	wire         sys_timer_s1_agent_rdata_fifo_src_ready;                                   // sys_timer_s1_agent:rdata_fifo_sink_ready -> sys_timer_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_004_src_endofpacket;                                               // cmd_mux_004:src_endofpacket -> sys_timer_s1_agent:cp_endofpacket
	wire         cmd_mux_004_src_valid;                                                     // cmd_mux_004:src_valid -> sys_timer_s1_agent:cp_valid
	wire         cmd_mux_004_src_startofpacket;                                             // cmd_mux_004:src_startofpacket -> sys_timer_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_004_src_data;                                                      // cmd_mux_004:src_data -> sys_timer_s1_agent:cp_data
	wire  [24:0] cmd_mux_004_src_channel;                                                   // cmd_mux_004:src_channel -> sys_timer_s1_agent:cp_channel
	wire         cmd_mux_004_src_ready;                                                     // sys_timer_s1_agent:cp_ready -> cmd_mux_004:src_ready
	wire         pc_uart_s1_agent_m0_waitrequest;                                           // pc_uart_s1_translator:uav_waitrequest -> pc_uart_s1_agent:m0_waitrequest
	wire   [2:0] pc_uart_s1_agent_m0_burstcount;                                            // pc_uart_s1_agent:m0_burstcount -> pc_uart_s1_translator:uav_burstcount
	wire  [31:0] pc_uart_s1_agent_m0_writedata;                                             // pc_uart_s1_agent:m0_writedata -> pc_uart_s1_translator:uav_writedata
	wire  [15:0] pc_uart_s1_agent_m0_address;                                               // pc_uart_s1_agent:m0_address -> pc_uart_s1_translator:uav_address
	wire         pc_uart_s1_agent_m0_write;                                                 // pc_uart_s1_agent:m0_write -> pc_uart_s1_translator:uav_write
	wire         pc_uart_s1_agent_m0_lock;                                                  // pc_uart_s1_agent:m0_lock -> pc_uart_s1_translator:uav_lock
	wire         pc_uart_s1_agent_m0_read;                                                  // pc_uart_s1_agent:m0_read -> pc_uart_s1_translator:uav_read
	wire  [31:0] pc_uart_s1_agent_m0_readdata;                                              // pc_uart_s1_translator:uav_readdata -> pc_uart_s1_agent:m0_readdata
	wire         pc_uart_s1_agent_m0_readdatavalid;                                         // pc_uart_s1_translator:uav_readdatavalid -> pc_uart_s1_agent:m0_readdatavalid
	wire         pc_uart_s1_agent_m0_debugaccess;                                           // pc_uart_s1_agent:m0_debugaccess -> pc_uart_s1_translator:uav_debugaccess
	wire   [3:0] pc_uart_s1_agent_m0_byteenable;                                            // pc_uart_s1_agent:m0_byteenable -> pc_uart_s1_translator:uav_byteenable
	wire         pc_uart_s1_agent_rf_source_endofpacket;                                    // pc_uart_s1_agent:rf_source_endofpacket -> pc_uart_s1_agent_rsp_fifo:in_endofpacket
	wire         pc_uart_s1_agent_rf_source_valid;                                          // pc_uart_s1_agent:rf_source_valid -> pc_uart_s1_agent_rsp_fifo:in_valid
	wire         pc_uart_s1_agent_rf_source_startofpacket;                                  // pc_uart_s1_agent:rf_source_startofpacket -> pc_uart_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] pc_uart_s1_agent_rf_source_data;                                           // pc_uart_s1_agent:rf_source_data -> pc_uart_s1_agent_rsp_fifo:in_data
	wire         pc_uart_s1_agent_rf_source_ready;                                          // pc_uart_s1_agent_rsp_fifo:in_ready -> pc_uart_s1_agent:rf_source_ready
	wire         pc_uart_s1_agent_rsp_fifo_out_endofpacket;                                 // pc_uart_s1_agent_rsp_fifo:out_endofpacket -> pc_uart_s1_agent:rf_sink_endofpacket
	wire         pc_uart_s1_agent_rsp_fifo_out_valid;                                       // pc_uart_s1_agent_rsp_fifo:out_valid -> pc_uart_s1_agent:rf_sink_valid
	wire         pc_uart_s1_agent_rsp_fifo_out_startofpacket;                               // pc_uart_s1_agent_rsp_fifo:out_startofpacket -> pc_uart_s1_agent:rf_sink_startofpacket
	wire  [96:0] pc_uart_s1_agent_rsp_fifo_out_data;                                        // pc_uart_s1_agent_rsp_fifo:out_data -> pc_uart_s1_agent:rf_sink_data
	wire         pc_uart_s1_agent_rsp_fifo_out_ready;                                       // pc_uart_s1_agent:rf_sink_ready -> pc_uart_s1_agent_rsp_fifo:out_ready
	wire         pc_uart_s1_agent_rdata_fifo_src_valid;                                     // pc_uart_s1_agent:rdata_fifo_src_valid -> pc_uart_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] pc_uart_s1_agent_rdata_fifo_src_data;                                      // pc_uart_s1_agent:rdata_fifo_src_data -> pc_uart_s1_agent:rdata_fifo_sink_data
	wire         pc_uart_s1_agent_rdata_fifo_src_ready;                                     // pc_uart_s1_agent:rdata_fifo_sink_ready -> pc_uart_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_005_src_endofpacket;                                               // cmd_mux_005:src_endofpacket -> pc_uart_s1_agent:cp_endofpacket
	wire         cmd_mux_005_src_valid;                                                     // cmd_mux_005:src_valid -> pc_uart_s1_agent:cp_valid
	wire         cmd_mux_005_src_startofpacket;                                             // cmd_mux_005:src_startofpacket -> pc_uart_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_005_src_data;                                                      // cmd_mux_005:src_data -> pc_uart_s1_agent:cp_data
	wire  [24:0] cmd_mux_005_src_channel;                                                   // cmd_mux_005:src_channel -> pc_uart_s1_agent:cp_channel
	wire         cmd_mux_005_src_ready;                                                     // pc_uart_s1_agent:cp_ready -> cmd_mux_005:src_ready
	wire         leds_port_s1_agent_m0_waitrequest;                                         // leds_port_s1_translator:uav_waitrequest -> leds_port_s1_agent:m0_waitrequest
	wire   [2:0] leds_port_s1_agent_m0_burstcount;                                          // leds_port_s1_agent:m0_burstcount -> leds_port_s1_translator:uav_burstcount
	wire  [31:0] leds_port_s1_agent_m0_writedata;                                           // leds_port_s1_agent:m0_writedata -> leds_port_s1_translator:uav_writedata
	wire  [15:0] leds_port_s1_agent_m0_address;                                             // leds_port_s1_agent:m0_address -> leds_port_s1_translator:uav_address
	wire         leds_port_s1_agent_m0_write;                                               // leds_port_s1_agent:m0_write -> leds_port_s1_translator:uav_write
	wire         leds_port_s1_agent_m0_lock;                                                // leds_port_s1_agent:m0_lock -> leds_port_s1_translator:uav_lock
	wire         leds_port_s1_agent_m0_read;                                                // leds_port_s1_agent:m0_read -> leds_port_s1_translator:uav_read
	wire  [31:0] leds_port_s1_agent_m0_readdata;                                            // leds_port_s1_translator:uav_readdata -> leds_port_s1_agent:m0_readdata
	wire         leds_port_s1_agent_m0_readdatavalid;                                       // leds_port_s1_translator:uav_readdatavalid -> leds_port_s1_agent:m0_readdatavalid
	wire         leds_port_s1_agent_m0_debugaccess;                                         // leds_port_s1_agent:m0_debugaccess -> leds_port_s1_translator:uav_debugaccess
	wire   [3:0] leds_port_s1_agent_m0_byteenable;                                          // leds_port_s1_agent:m0_byteenable -> leds_port_s1_translator:uav_byteenable
	wire         leds_port_s1_agent_rf_source_endofpacket;                                  // leds_port_s1_agent:rf_source_endofpacket -> leds_port_s1_agent_rsp_fifo:in_endofpacket
	wire         leds_port_s1_agent_rf_source_valid;                                        // leds_port_s1_agent:rf_source_valid -> leds_port_s1_agent_rsp_fifo:in_valid
	wire         leds_port_s1_agent_rf_source_startofpacket;                                // leds_port_s1_agent:rf_source_startofpacket -> leds_port_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] leds_port_s1_agent_rf_source_data;                                         // leds_port_s1_agent:rf_source_data -> leds_port_s1_agent_rsp_fifo:in_data
	wire         leds_port_s1_agent_rf_source_ready;                                        // leds_port_s1_agent_rsp_fifo:in_ready -> leds_port_s1_agent:rf_source_ready
	wire         leds_port_s1_agent_rsp_fifo_out_endofpacket;                               // leds_port_s1_agent_rsp_fifo:out_endofpacket -> leds_port_s1_agent:rf_sink_endofpacket
	wire         leds_port_s1_agent_rsp_fifo_out_valid;                                     // leds_port_s1_agent_rsp_fifo:out_valid -> leds_port_s1_agent:rf_sink_valid
	wire         leds_port_s1_agent_rsp_fifo_out_startofpacket;                             // leds_port_s1_agent_rsp_fifo:out_startofpacket -> leds_port_s1_agent:rf_sink_startofpacket
	wire  [96:0] leds_port_s1_agent_rsp_fifo_out_data;                                      // leds_port_s1_agent_rsp_fifo:out_data -> leds_port_s1_agent:rf_sink_data
	wire         leds_port_s1_agent_rsp_fifo_out_ready;                                     // leds_port_s1_agent:rf_sink_ready -> leds_port_s1_agent_rsp_fifo:out_ready
	wire         leds_port_s1_agent_rdata_fifo_src_valid;                                   // leds_port_s1_agent:rdata_fifo_src_valid -> leds_port_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] leds_port_s1_agent_rdata_fifo_src_data;                                    // leds_port_s1_agent:rdata_fifo_src_data -> leds_port_s1_agent:rdata_fifo_sink_data
	wire         leds_port_s1_agent_rdata_fifo_src_ready;                                   // leds_port_s1_agent:rdata_fifo_sink_ready -> leds_port_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_006_src_endofpacket;                                               // cmd_mux_006:src_endofpacket -> leds_port_s1_agent:cp_endofpacket
	wire         cmd_mux_006_src_valid;                                                     // cmd_mux_006:src_valid -> leds_port_s1_agent:cp_valid
	wire         cmd_mux_006_src_startofpacket;                                             // cmd_mux_006:src_startofpacket -> leds_port_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_006_src_data;                                                      // cmd_mux_006:src_data -> leds_port_s1_agent:cp_data
	wire  [24:0] cmd_mux_006_src_channel;                                                   // cmd_mux_006:src_channel -> leds_port_s1_agent:cp_channel
	wire         cmd_mux_006_src_ready;                                                     // leds_port_s1_agent:cp_ready -> cmd_mux_006:src_ready
	wire         i2c_port_s1_agent_m0_waitrequest;                                          // i2c_port_s1_translator:uav_waitrequest -> i2c_port_s1_agent:m0_waitrequest
	wire   [2:0] i2c_port_s1_agent_m0_burstcount;                                           // i2c_port_s1_agent:m0_burstcount -> i2c_port_s1_translator:uav_burstcount
	wire  [31:0] i2c_port_s1_agent_m0_writedata;                                            // i2c_port_s1_agent:m0_writedata -> i2c_port_s1_translator:uav_writedata
	wire  [15:0] i2c_port_s1_agent_m0_address;                                              // i2c_port_s1_agent:m0_address -> i2c_port_s1_translator:uav_address
	wire         i2c_port_s1_agent_m0_write;                                                // i2c_port_s1_agent:m0_write -> i2c_port_s1_translator:uav_write
	wire         i2c_port_s1_agent_m0_lock;                                                 // i2c_port_s1_agent:m0_lock -> i2c_port_s1_translator:uav_lock
	wire         i2c_port_s1_agent_m0_read;                                                 // i2c_port_s1_agent:m0_read -> i2c_port_s1_translator:uav_read
	wire  [31:0] i2c_port_s1_agent_m0_readdata;                                             // i2c_port_s1_translator:uav_readdata -> i2c_port_s1_agent:m0_readdata
	wire         i2c_port_s1_agent_m0_readdatavalid;                                        // i2c_port_s1_translator:uav_readdatavalid -> i2c_port_s1_agent:m0_readdatavalid
	wire         i2c_port_s1_agent_m0_debugaccess;                                          // i2c_port_s1_agent:m0_debugaccess -> i2c_port_s1_translator:uav_debugaccess
	wire   [3:0] i2c_port_s1_agent_m0_byteenable;                                           // i2c_port_s1_agent:m0_byteenable -> i2c_port_s1_translator:uav_byteenable
	wire         i2c_port_s1_agent_rf_source_endofpacket;                                   // i2c_port_s1_agent:rf_source_endofpacket -> i2c_port_s1_agent_rsp_fifo:in_endofpacket
	wire         i2c_port_s1_agent_rf_source_valid;                                         // i2c_port_s1_agent:rf_source_valid -> i2c_port_s1_agent_rsp_fifo:in_valid
	wire         i2c_port_s1_agent_rf_source_startofpacket;                                 // i2c_port_s1_agent:rf_source_startofpacket -> i2c_port_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] i2c_port_s1_agent_rf_source_data;                                          // i2c_port_s1_agent:rf_source_data -> i2c_port_s1_agent_rsp_fifo:in_data
	wire         i2c_port_s1_agent_rf_source_ready;                                         // i2c_port_s1_agent_rsp_fifo:in_ready -> i2c_port_s1_agent:rf_source_ready
	wire         i2c_port_s1_agent_rsp_fifo_out_endofpacket;                                // i2c_port_s1_agent_rsp_fifo:out_endofpacket -> i2c_port_s1_agent:rf_sink_endofpacket
	wire         i2c_port_s1_agent_rsp_fifo_out_valid;                                      // i2c_port_s1_agent_rsp_fifo:out_valid -> i2c_port_s1_agent:rf_sink_valid
	wire         i2c_port_s1_agent_rsp_fifo_out_startofpacket;                              // i2c_port_s1_agent_rsp_fifo:out_startofpacket -> i2c_port_s1_agent:rf_sink_startofpacket
	wire  [96:0] i2c_port_s1_agent_rsp_fifo_out_data;                                       // i2c_port_s1_agent_rsp_fifo:out_data -> i2c_port_s1_agent:rf_sink_data
	wire         i2c_port_s1_agent_rsp_fifo_out_ready;                                      // i2c_port_s1_agent:rf_sink_ready -> i2c_port_s1_agent_rsp_fifo:out_ready
	wire         i2c_port_s1_agent_rdata_fifo_src_valid;                                    // i2c_port_s1_agent:rdata_fifo_src_valid -> i2c_port_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] i2c_port_s1_agent_rdata_fifo_src_data;                                     // i2c_port_s1_agent:rdata_fifo_src_data -> i2c_port_s1_agent:rdata_fifo_sink_data
	wire         i2c_port_s1_agent_rdata_fifo_src_ready;                                    // i2c_port_s1_agent:rdata_fifo_sink_ready -> i2c_port_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_007_src_endofpacket;                                               // cmd_mux_007:src_endofpacket -> i2c_port_s1_agent:cp_endofpacket
	wire         cmd_mux_007_src_valid;                                                     // cmd_mux_007:src_valid -> i2c_port_s1_agent:cp_valid
	wire         cmd_mux_007_src_startofpacket;                                             // cmd_mux_007:src_startofpacket -> i2c_port_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_007_src_data;                                                      // cmd_mux_007:src_data -> i2c_port_s1_agent:cp_data
	wire  [24:0] cmd_mux_007_src_channel;                                                   // cmd_mux_007:src_channel -> i2c_port_s1_agent:cp_channel
	wire         cmd_mux_007_src_ready;                                                     // i2c_port_s1_agent:cp_ready -> cmd_mux_007:src_ready
	wire         laser_driver_avalon_slave_0_agent_m0_waitrequest;                          // laser_driver_avalon_slave_0_translator:uav_waitrequest -> laser_driver_avalon_slave_0_agent:m0_waitrequest
	wire   [2:0] laser_driver_avalon_slave_0_agent_m0_burstcount;                           // laser_driver_avalon_slave_0_agent:m0_burstcount -> laser_driver_avalon_slave_0_translator:uav_burstcount
	wire  [31:0] laser_driver_avalon_slave_0_agent_m0_writedata;                            // laser_driver_avalon_slave_0_agent:m0_writedata -> laser_driver_avalon_slave_0_translator:uav_writedata
	wire  [15:0] laser_driver_avalon_slave_0_agent_m0_address;                              // laser_driver_avalon_slave_0_agent:m0_address -> laser_driver_avalon_slave_0_translator:uav_address
	wire         laser_driver_avalon_slave_0_agent_m0_write;                                // laser_driver_avalon_slave_0_agent:m0_write -> laser_driver_avalon_slave_0_translator:uav_write
	wire         laser_driver_avalon_slave_0_agent_m0_lock;                                 // laser_driver_avalon_slave_0_agent:m0_lock -> laser_driver_avalon_slave_0_translator:uav_lock
	wire         laser_driver_avalon_slave_0_agent_m0_read;                                 // laser_driver_avalon_slave_0_agent:m0_read -> laser_driver_avalon_slave_0_translator:uav_read
	wire  [31:0] laser_driver_avalon_slave_0_agent_m0_readdata;                             // laser_driver_avalon_slave_0_translator:uav_readdata -> laser_driver_avalon_slave_0_agent:m0_readdata
	wire         laser_driver_avalon_slave_0_agent_m0_readdatavalid;                        // laser_driver_avalon_slave_0_translator:uav_readdatavalid -> laser_driver_avalon_slave_0_agent:m0_readdatavalid
	wire         laser_driver_avalon_slave_0_agent_m0_debugaccess;                          // laser_driver_avalon_slave_0_agent:m0_debugaccess -> laser_driver_avalon_slave_0_translator:uav_debugaccess
	wire   [3:0] laser_driver_avalon_slave_0_agent_m0_byteenable;                           // laser_driver_avalon_slave_0_agent:m0_byteenable -> laser_driver_avalon_slave_0_translator:uav_byteenable
	wire         laser_driver_avalon_slave_0_agent_rf_source_endofpacket;                   // laser_driver_avalon_slave_0_agent:rf_source_endofpacket -> laser_driver_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         laser_driver_avalon_slave_0_agent_rf_source_valid;                         // laser_driver_avalon_slave_0_agent:rf_source_valid -> laser_driver_avalon_slave_0_agent_rsp_fifo:in_valid
	wire         laser_driver_avalon_slave_0_agent_rf_source_startofpacket;                 // laser_driver_avalon_slave_0_agent:rf_source_startofpacket -> laser_driver_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [96:0] laser_driver_avalon_slave_0_agent_rf_source_data;                          // laser_driver_avalon_slave_0_agent:rf_source_data -> laser_driver_avalon_slave_0_agent_rsp_fifo:in_data
	wire         laser_driver_avalon_slave_0_agent_rf_source_ready;                         // laser_driver_avalon_slave_0_agent_rsp_fifo:in_ready -> laser_driver_avalon_slave_0_agent:rf_source_ready
	wire         laser_driver_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                // laser_driver_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> laser_driver_avalon_slave_0_agent:rf_sink_endofpacket
	wire         laser_driver_avalon_slave_0_agent_rsp_fifo_out_valid;                      // laser_driver_avalon_slave_0_agent_rsp_fifo:out_valid -> laser_driver_avalon_slave_0_agent:rf_sink_valid
	wire         laser_driver_avalon_slave_0_agent_rsp_fifo_out_startofpacket;              // laser_driver_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> laser_driver_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [96:0] laser_driver_avalon_slave_0_agent_rsp_fifo_out_data;                       // laser_driver_avalon_slave_0_agent_rsp_fifo:out_data -> laser_driver_avalon_slave_0_agent:rf_sink_data
	wire         laser_driver_avalon_slave_0_agent_rsp_fifo_out_ready;                      // laser_driver_avalon_slave_0_agent:rf_sink_ready -> laser_driver_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         laser_driver_avalon_slave_0_agent_rdata_fifo_src_valid;                    // laser_driver_avalon_slave_0_agent:rdata_fifo_src_valid -> laser_driver_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] laser_driver_avalon_slave_0_agent_rdata_fifo_src_data;                     // laser_driver_avalon_slave_0_agent:rdata_fifo_src_data -> laser_driver_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         laser_driver_avalon_slave_0_agent_rdata_fifo_src_ready;                    // laser_driver_avalon_slave_0_agent:rdata_fifo_sink_ready -> laser_driver_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_008_src_endofpacket;                                               // cmd_mux_008:src_endofpacket -> laser_driver_avalon_slave_0_agent:cp_endofpacket
	wire         cmd_mux_008_src_valid;                                                     // cmd_mux_008:src_valid -> laser_driver_avalon_slave_0_agent:cp_valid
	wire         cmd_mux_008_src_startofpacket;                                             // cmd_mux_008:src_startofpacket -> laser_driver_avalon_slave_0_agent:cp_startofpacket
	wire  [95:0] cmd_mux_008_src_data;                                                      // cmd_mux_008:src_data -> laser_driver_avalon_slave_0_agent:cp_data
	wire  [24:0] cmd_mux_008_src_channel;                                                   // cmd_mux_008:src_channel -> laser_driver_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_008_src_ready;                                                     // laser_driver_avalon_slave_0_agent:cp_ready -> cmd_mux_008:src_ready
	wire         spi_tdc_avalon_slave_agent_m0_waitrequest;                                 // spi_tdc_avalon_slave_translator:uav_waitrequest -> spi_tdc_avalon_slave_agent:m0_waitrequest
	wire   [2:0] spi_tdc_avalon_slave_agent_m0_burstcount;                                  // spi_tdc_avalon_slave_agent:m0_burstcount -> spi_tdc_avalon_slave_translator:uav_burstcount
	wire  [31:0] spi_tdc_avalon_slave_agent_m0_writedata;                                   // spi_tdc_avalon_slave_agent:m0_writedata -> spi_tdc_avalon_slave_translator:uav_writedata
	wire  [15:0] spi_tdc_avalon_slave_agent_m0_address;                                     // spi_tdc_avalon_slave_agent:m0_address -> spi_tdc_avalon_slave_translator:uav_address
	wire         spi_tdc_avalon_slave_agent_m0_write;                                       // spi_tdc_avalon_slave_agent:m0_write -> spi_tdc_avalon_slave_translator:uav_write
	wire         spi_tdc_avalon_slave_agent_m0_lock;                                        // spi_tdc_avalon_slave_agent:m0_lock -> spi_tdc_avalon_slave_translator:uav_lock
	wire         spi_tdc_avalon_slave_agent_m0_read;                                        // spi_tdc_avalon_slave_agent:m0_read -> spi_tdc_avalon_slave_translator:uav_read
	wire  [31:0] spi_tdc_avalon_slave_agent_m0_readdata;                                    // spi_tdc_avalon_slave_translator:uav_readdata -> spi_tdc_avalon_slave_agent:m0_readdata
	wire         spi_tdc_avalon_slave_agent_m0_readdatavalid;                               // spi_tdc_avalon_slave_translator:uav_readdatavalid -> spi_tdc_avalon_slave_agent:m0_readdatavalid
	wire         spi_tdc_avalon_slave_agent_m0_debugaccess;                                 // spi_tdc_avalon_slave_agent:m0_debugaccess -> spi_tdc_avalon_slave_translator:uav_debugaccess
	wire   [3:0] spi_tdc_avalon_slave_agent_m0_byteenable;                                  // spi_tdc_avalon_slave_agent:m0_byteenable -> spi_tdc_avalon_slave_translator:uav_byteenable
	wire         spi_tdc_avalon_slave_agent_rf_source_endofpacket;                          // spi_tdc_avalon_slave_agent:rf_source_endofpacket -> spi_tdc_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         spi_tdc_avalon_slave_agent_rf_source_valid;                                // spi_tdc_avalon_slave_agent:rf_source_valid -> spi_tdc_avalon_slave_agent_rsp_fifo:in_valid
	wire         spi_tdc_avalon_slave_agent_rf_source_startofpacket;                        // spi_tdc_avalon_slave_agent:rf_source_startofpacket -> spi_tdc_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire  [96:0] spi_tdc_avalon_slave_agent_rf_source_data;                                 // spi_tdc_avalon_slave_agent:rf_source_data -> spi_tdc_avalon_slave_agent_rsp_fifo:in_data
	wire         spi_tdc_avalon_slave_agent_rf_source_ready;                                // spi_tdc_avalon_slave_agent_rsp_fifo:in_ready -> spi_tdc_avalon_slave_agent:rf_source_ready
	wire         spi_tdc_avalon_slave_agent_rsp_fifo_out_endofpacket;                       // spi_tdc_avalon_slave_agent_rsp_fifo:out_endofpacket -> spi_tdc_avalon_slave_agent:rf_sink_endofpacket
	wire         spi_tdc_avalon_slave_agent_rsp_fifo_out_valid;                             // spi_tdc_avalon_slave_agent_rsp_fifo:out_valid -> spi_tdc_avalon_slave_agent:rf_sink_valid
	wire         spi_tdc_avalon_slave_agent_rsp_fifo_out_startofpacket;                     // spi_tdc_avalon_slave_agent_rsp_fifo:out_startofpacket -> spi_tdc_avalon_slave_agent:rf_sink_startofpacket
	wire  [96:0] spi_tdc_avalon_slave_agent_rsp_fifo_out_data;                              // spi_tdc_avalon_slave_agent_rsp_fifo:out_data -> spi_tdc_avalon_slave_agent:rf_sink_data
	wire         spi_tdc_avalon_slave_agent_rsp_fifo_out_ready;                             // spi_tdc_avalon_slave_agent:rf_sink_ready -> spi_tdc_avalon_slave_agent_rsp_fifo:out_ready
	wire         spi_tdc_avalon_slave_agent_rdata_fifo_src_valid;                           // spi_tdc_avalon_slave_agent:rdata_fifo_src_valid -> spi_tdc_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] spi_tdc_avalon_slave_agent_rdata_fifo_src_data;                            // spi_tdc_avalon_slave_agent:rdata_fifo_src_data -> spi_tdc_avalon_slave_agent:rdata_fifo_sink_data
	wire         spi_tdc_avalon_slave_agent_rdata_fifo_src_ready;                           // spi_tdc_avalon_slave_agent:rdata_fifo_sink_ready -> spi_tdc_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_009_src_endofpacket;                                               // cmd_mux_009:src_endofpacket -> spi_tdc_avalon_slave_agent:cp_endofpacket
	wire         cmd_mux_009_src_valid;                                                     // cmd_mux_009:src_valid -> spi_tdc_avalon_slave_agent:cp_valid
	wire         cmd_mux_009_src_startofpacket;                                             // cmd_mux_009:src_startofpacket -> spi_tdc_avalon_slave_agent:cp_startofpacket
	wire  [95:0] cmd_mux_009_src_data;                                                      // cmd_mux_009:src_data -> spi_tdc_avalon_slave_agent:cp_data
	wire  [24:0] cmd_mux_009_src_channel;                                                   // cmd_mux_009:src_channel -> spi_tdc_avalon_slave_agent:cp_channel
	wire         cmd_mux_009_src_ready;                                                     // spi_tdc_avalon_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire         pulse_generator_avalon_slave_agent_m0_waitrequest;                         // pulse_generator_avalon_slave_translator:uav_waitrequest -> pulse_generator_avalon_slave_agent:m0_waitrequest
	wire   [2:0] pulse_generator_avalon_slave_agent_m0_burstcount;                          // pulse_generator_avalon_slave_agent:m0_burstcount -> pulse_generator_avalon_slave_translator:uav_burstcount
	wire  [31:0] pulse_generator_avalon_slave_agent_m0_writedata;                           // pulse_generator_avalon_slave_agent:m0_writedata -> pulse_generator_avalon_slave_translator:uav_writedata
	wire  [15:0] pulse_generator_avalon_slave_agent_m0_address;                             // pulse_generator_avalon_slave_agent:m0_address -> pulse_generator_avalon_slave_translator:uav_address
	wire         pulse_generator_avalon_slave_agent_m0_write;                               // pulse_generator_avalon_slave_agent:m0_write -> pulse_generator_avalon_slave_translator:uav_write
	wire         pulse_generator_avalon_slave_agent_m0_lock;                                // pulse_generator_avalon_slave_agent:m0_lock -> pulse_generator_avalon_slave_translator:uav_lock
	wire         pulse_generator_avalon_slave_agent_m0_read;                                // pulse_generator_avalon_slave_agent:m0_read -> pulse_generator_avalon_slave_translator:uav_read
	wire  [31:0] pulse_generator_avalon_slave_agent_m0_readdata;                            // pulse_generator_avalon_slave_translator:uav_readdata -> pulse_generator_avalon_slave_agent:m0_readdata
	wire         pulse_generator_avalon_slave_agent_m0_readdatavalid;                       // pulse_generator_avalon_slave_translator:uav_readdatavalid -> pulse_generator_avalon_slave_agent:m0_readdatavalid
	wire         pulse_generator_avalon_slave_agent_m0_debugaccess;                         // pulse_generator_avalon_slave_agent:m0_debugaccess -> pulse_generator_avalon_slave_translator:uav_debugaccess
	wire   [3:0] pulse_generator_avalon_slave_agent_m0_byteenable;                          // pulse_generator_avalon_slave_agent:m0_byteenable -> pulse_generator_avalon_slave_translator:uav_byteenable
	wire         pulse_generator_avalon_slave_agent_rf_source_endofpacket;                  // pulse_generator_avalon_slave_agent:rf_source_endofpacket -> pulse_generator_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         pulse_generator_avalon_slave_agent_rf_source_valid;                        // pulse_generator_avalon_slave_agent:rf_source_valid -> pulse_generator_avalon_slave_agent_rsp_fifo:in_valid
	wire         pulse_generator_avalon_slave_agent_rf_source_startofpacket;                // pulse_generator_avalon_slave_agent:rf_source_startofpacket -> pulse_generator_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire  [96:0] pulse_generator_avalon_slave_agent_rf_source_data;                         // pulse_generator_avalon_slave_agent:rf_source_data -> pulse_generator_avalon_slave_agent_rsp_fifo:in_data
	wire         pulse_generator_avalon_slave_agent_rf_source_ready;                        // pulse_generator_avalon_slave_agent_rsp_fifo:in_ready -> pulse_generator_avalon_slave_agent:rf_source_ready
	wire         pulse_generator_avalon_slave_agent_rsp_fifo_out_endofpacket;               // pulse_generator_avalon_slave_agent_rsp_fifo:out_endofpacket -> pulse_generator_avalon_slave_agent:rf_sink_endofpacket
	wire         pulse_generator_avalon_slave_agent_rsp_fifo_out_valid;                     // pulse_generator_avalon_slave_agent_rsp_fifo:out_valid -> pulse_generator_avalon_slave_agent:rf_sink_valid
	wire         pulse_generator_avalon_slave_agent_rsp_fifo_out_startofpacket;             // pulse_generator_avalon_slave_agent_rsp_fifo:out_startofpacket -> pulse_generator_avalon_slave_agent:rf_sink_startofpacket
	wire  [96:0] pulse_generator_avalon_slave_agent_rsp_fifo_out_data;                      // pulse_generator_avalon_slave_agent_rsp_fifo:out_data -> pulse_generator_avalon_slave_agent:rf_sink_data
	wire         pulse_generator_avalon_slave_agent_rsp_fifo_out_ready;                     // pulse_generator_avalon_slave_agent:rf_sink_ready -> pulse_generator_avalon_slave_agent_rsp_fifo:out_ready
	wire         pulse_generator_avalon_slave_agent_rdata_fifo_src_valid;                   // pulse_generator_avalon_slave_agent:rdata_fifo_src_valid -> pulse_generator_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] pulse_generator_avalon_slave_agent_rdata_fifo_src_data;                    // pulse_generator_avalon_slave_agent:rdata_fifo_src_data -> pulse_generator_avalon_slave_agent:rdata_fifo_sink_data
	wire         pulse_generator_avalon_slave_agent_rdata_fifo_src_ready;                   // pulse_generator_avalon_slave_agent:rdata_fifo_sink_ready -> pulse_generator_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_010_src_endofpacket;                                               // cmd_mux_010:src_endofpacket -> pulse_generator_avalon_slave_agent:cp_endofpacket
	wire         cmd_mux_010_src_valid;                                                     // cmd_mux_010:src_valid -> pulse_generator_avalon_slave_agent:cp_valid
	wire         cmd_mux_010_src_startofpacket;                                             // cmd_mux_010:src_startofpacket -> pulse_generator_avalon_slave_agent:cp_startofpacket
	wire  [95:0] cmd_mux_010_src_data;                                                      // cmd_mux_010:src_data -> pulse_generator_avalon_slave_agent:cp_data
	wire  [24:0] cmd_mux_010_src_channel;                                                   // cmd_mux_010:src_channel -> pulse_generator_avalon_slave_agent:cp_channel
	wire         cmd_mux_010_src_ready;                                                     // pulse_generator_avalon_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire         spi_vga_avalon_slave_agent_m0_waitrequest;                                 // spi_vga_avalon_slave_translator:uav_waitrequest -> spi_vga_avalon_slave_agent:m0_waitrequest
	wire   [2:0] spi_vga_avalon_slave_agent_m0_burstcount;                                  // spi_vga_avalon_slave_agent:m0_burstcount -> spi_vga_avalon_slave_translator:uav_burstcount
	wire  [31:0] spi_vga_avalon_slave_agent_m0_writedata;                                   // spi_vga_avalon_slave_agent:m0_writedata -> spi_vga_avalon_slave_translator:uav_writedata
	wire  [15:0] spi_vga_avalon_slave_agent_m0_address;                                     // spi_vga_avalon_slave_agent:m0_address -> spi_vga_avalon_slave_translator:uav_address
	wire         spi_vga_avalon_slave_agent_m0_write;                                       // spi_vga_avalon_slave_agent:m0_write -> spi_vga_avalon_slave_translator:uav_write
	wire         spi_vga_avalon_slave_agent_m0_lock;                                        // spi_vga_avalon_slave_agent:m0_lock -> spi_vga_avalon_slave_translator:uav_lock
	wire         spi_vga_avalon_slave_agent_m0_read;                                        // spi_vga_avalon_slave_agent:m0_read -> spi_vga_avalon_slave_translator:uav_read
	wire  [31:0] spi_vga_avalon_slave_agent_m0_readdata;                                    // spi_vga_avalon_slave_translator:uav_readdata -> spi_vga_avalon_slave_agent:m0_readdata
	wire         spi_vga_avalon_slave_agent_m0_readdatavalid;                               // spi_vga_avalon_slave_translator:uav_readdatavalid -> spi_vga_avalon_slave_agent:m0_readdatavalid
	wire         spi_vga_avalon_slave_agent_m0_debugaccess;                                 // spi_vga_avalon_slave_agent:m0_debugaccess -> spi_vga_avalon_slave_translator:uav_debugaccess
	wire   [3:0] spi_vga_avalon_slave_agent_m0_byteenable;                                  // spi_vga_avalon_slave_agent:m0_byteenable -> spi_vga_avalon_slave_translator:uav_byteenable
	wire         spi_vga_avalon_slave_agent_rf_source_endofpacket;                          // spi_vga_avalon_slave_agent:rf_source_endofpacket -> spi_vga_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         spi_vga_avalon_slave_agent_rf_source_valid;                                // spi_vga_avalon_slave_agent:rf_source_valid -> spi_vga_avalon_slave_agent_rsp_fifo:in_valid
	wire         spi_vga_avalon_slave_agent_rf_source_startofpacket;                        // spi_vga_avalon_slave_agent:rf_source_startofpacket -> spi_vga_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire  [96:0] spi_vga_avalon_slave_agent_rf_source_data;                                 // spi_vga_avalon_slave_agent:rf_source_data -> spi_vga_avalon_slave_agent_rsp_fifo:in_data
	wire         spi_vga_avalon_slave_agent_rf_source_ready;                                // spi_vga_avalon_slave_agent_rsp_fifo:in_ready -> spi_vga_avalon_slave_agent:rf_source_ready
	wire         spi_vga_avalon_slave_agent_rsp_fifo_out_endofpacket;                       // spi_vga_avalon_slave_agent_rsp_fifo:out_endofpacket -> spi_vga_avalon_slave_agent:rf_sink_endofpacket
	wire         spi_vga_avalon_slave_agent_rsp_fifo_out_valid;                             // spi_vga_avalon_slave_agent_rsp_fifo:out_valid -> spi_vga_avalon_slave_agent:rf_sink_valid
	wire         spi_vga_avalon_slave_agent_rsp_fifo_out_startofpacket;                     // spi_vga_avalon_slave_agent_rsp_fifo:out_startofpacket -> spi_vga_avalon_slave_agent:rf_sink_startofpacket
	wire  [96:0] spi_vga_avalon_slave_agent_rsp_fifo_out_data;                              // spi_vga_avalon_slave_agent_rsp_fifo:out_data -> spi_vga_avalon_slave_agent:rf_sink_data
	wire         spi_vga_avalon_slave_agent_rsp_fifo_out_ready;                             // spi_vga_avalon_slave_agent:rf_sink_ready -> spi_vga_avalon_slave_agent_rsp_fifo:out_ready
	wire         spi_vga_avalon_slave_agent_rdata_fifo_src_valid;                           // spi_vga_avalon_slave_agent:rdata_fifo_src_valid -> spi_vga_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] spi_vga_avalon_slave_agent_rdata_fifo_src_data;                            // spi_vga_avalon_slave_agent:rdata_fifo_src_data -> spi_vga_avalon_slave_agent:rdata_fifo_sink_data
	wire         spi_vga_avalon_slave_agent_rdata_fifo_src_ready;                           // spi_vga_avalon_slave_agent:rdata_fifo_sink_ready -> spi_vga_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_011_src_endofpacket;                                               // cmd_mux_011:src_endofpacket -> spi_vga_avalon_slave_agent:cp_endofpacket
	wire         cmd_mux_011_src_valid;                                                     // cmd_mux_011:src_valid -> spi_vga_avalon_slave_agent:cp_valid
	wire         cmd_mux_011_src_startofpacket;                                             // cmd_mux_011:src_startofpacket -> spi_vga_avalon_slave_agent:cp_startofpacket
	wire  [95:0] cmd_mux_011_src_data;                                                      // cmd_mux_011:src_data -> spi_vga_avalon_slave_agent:cp_data
	wire  [24:0] cmd_mux_011_src_channel;                                                   // cmd_mux_011:src_channel -> spi_vga_avalon_slave_agent:cp_channel
	wire         cmd_mux_011_src_ready;                                                     // spi_vga_avalon_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire         rs485_de_s1_agent_m0_waitrequest;                                          // rs485_de_s1_translator:uav_waitrequest -> rs485_de_s1_agent:m0_waitrequest
	wire   [2:0] rs485_de_s1_agent_m0_burstcount;                                           // rs485_de_s1_agent:m0_burstcount -> rs485_de_s1_translator:uav_burstcount
	wire  [31:0] rs485_de_s1_agent_m0_writedata;                                            // rs485_de_s1_agent:m0_writedata -> rs485_de_s1_translator:uav_writedata
	wire  [15:0] rs485_de_s1_agent_m0_address;                                              // rs485_de_s1_agent:m0_address -> rs485_de_s1_translator:uav_address
	wire         rs485_de_s1_agent_m0_write;                                                // rs485_de_s1_agent:m0_write -> rs485_de_s1_translator:uav_write
	wire         rs485_de_s1_agent_m0_lock;                                                 // rs485_de_s1_agent:m0_lock -> rs485_de_s1_translator:uav_lock
	wire         rs485_de_s1_agent_m0_read;                                                 // rs485_de_s1_agent:m0_read -> rs485_de_s1_translator:uav_read
	wire  [31:0] rs485_de_s1_agent_m0_readdata;                                             // rs485_de_s1_translator:uav_readdata -> rs485_de_s1_agent:m0_readdata
	wire         rs485_de_s1_agent_m0_readdatavalid;                                        // rs485_de_s1_translator:uav_readdatavalid -> rs485_de_s1_agent:m0_readdatavalid
	wire         rs485_de_s1_agent_m0_debugaccess;                                          // rs485_de_s1_agent:m0_debugaccess -> rs485_de_s1_translator:uav_debugaccess
	wire   [3:0] rs485_de_s1_agent_m0_byteenable;                                           // rs485_de_s1_agent:m0_byteenable -> rs485_de_s1_translator:uav_byteenable
	wire         rs485_de_s1_agent_rf_source_endofpacket;                                   // rs485_de_s1_agent:rf_source_endofpacket -> rs485_de_s1_agent_rsp_fifo:in_endofpacket
	wire         rs485_de_s1_agent_rf_source_valid;                                         // rs485_de_s1_agent:rf_source_valid -> rs485_de_s1_agent_rsp_fifo:in_valid
	wire         rs485_de_s1_agent_rf_source_startofpacket;                                 // rs485_de_s1_agent:rf_source_startofpacket -> rs485_de_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] rs485_de_s1_agent_rf_source_data;                                          // rs485_de_s1_agent:rf_source_data -> rs485_de_s1_agent_rsp_fifo:in_data
	wire         rs485_de_s1_agent_rf_source_ready;                                         // rs485_de_s1_agent_rsp_fifo:in_ready -> rs485_de_s1_agent:rf_source_ready
	wire         rs485_de_s1_agent_rsp_fifo_out_endofpacket;                                // rs485_de_s1_agent_rsp_fifo:out_endofpacket -> rs485_de_s1_agent:rf_sink_endofpacket
	wire         rs485_de_s1_agent_rsp_fifo_out_valid;                                      // rs485_de_s1_agent_rsp_fifo:out_valid -> rs485_de_s1_agent:rf_sink_valid
	wire         rs485_de_s1_agent_rsp_fifo_out_startofpacket;                              // rs485_de_s1_agent_rsp_fifo:out_startofpacket -> rs485_de_s1_agent:rf_sink_startofpacket
	wire  [96:0] rs485_de_s1_agent_rsp_fifo_out_data;                                       // rs485_de_s1_agent_rsp_fifo:out_data -> rs485_de_s1_agent:rf_sink_data
	wire         rs485_de_s1_agent_rsp_fifo_out_ready;                                      // rs485_de_s1_agent:rf_sink_ready -> rs485_de_s1_agent_rsp_fifo:out_ready
	wire         rs485_de_s1_agent_rdata_fifo_src_valid;                                    // rs485_de_s1_agent:rdata_fifo_src_valid -> rs485_de_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] rs485_de_s1_agent_rdata_fifo_src_data;                                     // rs485_de_s1_agent:rdata_fifo_src_data -> rs485_de_s1_agent:rdata_fifo_sink_data
	wire         rs485_de_s1_agent_rdata_fifo_src_ready;                                    // rs485_de_s1_agent:rdata_fifo_sink_ready -> rs485_de_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_012_src_endofpacket;                                               // cmd_mux_012:src_endofpacket -> rs485_de_s1_agent:cp_endofpacket
	wire         cmd_mux_012_src_valid;                                                     // cmd_mux_012:src_valid -> rs485_de_s1_agent:cp_valid
	wire         cmd_mux_012_src_startofpacket;                                             // cmd_mux_012:src_startofpacket -> rs485_de_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_012_src_data;                                                      // cmd_mux_012:src_data -> rs485_de_s1_agent:cp_data
	wire  [24:0] cmd_mux_012_src_channel;                                                   // cmd_mux_012:src_channel -> rs485_de_s1_agent:cp_channel
	wire         cmd_mux_012_src_ready;                                                     // rs485_de_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire         tdc_enable_s1_agent_m0_waitrequest;                                        // tdc_enable_s1_translator:uav_waitrequest -> tdc_enable_s1_agent:m0_waitrequest
	wire   [2:0] tdc_enable_s1_agent_m0_burstcount;                                         // tdc_enable_s1_agent:m0_burstcount -> tdc_enable_s1_translator:uav_burstcount
	wire  [31:0] tdc_enable_s1_agent_m0_writedata;                                          // tdc_enable_s1_agent:m0_writedata -> tdc_enable_s1_translator:uav_writedata
	wire  [15:0] tdc_enable_s1_agent_m0_address;                                            // tdc_enable_s1_agent:m0_address -> tdc_enable_s1_translator:uav_address
	wire         tdc_enable_s1_agent_m0_write;                                              // tdc_enable_s1_agent:m0_write -> tdc_enable_s1_translator:uav_write
	wire         tdc_enable_s1_agent_m0_lock;                                               // tdc_enable_s1_agent:m0_lock -> tdc_enable_s1_translator:uav_lock
	wire         tdc_enable_s1_agent_m0_read;                                               // tdc_enable_s1_agent:m0_read -> tdc_enable_s1_translator:uav_read
	wire  [31:0] tdc_enable_s1_agent_m0_readdata;                                           // tdc_enable_s1_translator:uav_readdata -> tdc_enable_s1_agent:m0_readdata
	wire         tdc_enable_s1_agent_m0_readdatavalid;                                      // tdc_enable_s1_translator:uav_readdatavalid -> tdc_enable_s1_agent:m0_readdatavalid
	wire         tdc_enable_s1_agent_m0_debugaccess;                                        // tdc_enable_s1_agent:m0_debugaccess -> tdc_enable_s1_translator:uav_debugaccess
	wire   [3:0] tdc_enable_s1_agent_m0_byteenable;                                         // tdc_enable_s1_agent:m0_byteenable -> tdc_enable_s1_translator:uav_byteenable
	wire         tdc_enable_s1_agent_rf_source_endofpacket;                                 // tdc_enable_s1_agent:rf_source_endofpacket -> tdc_enable_s1_agent_rsp_fifo:in_endofpacket
	wire         tdc_enable_s1_agent_rf_source_valid;                                       // tdc_enable_s1_agent:rf_source_valid -> tdc_enable_s1_agent_rsp_fifo:in_valid
	wire         tdc_enable_s1_agent_rf_source_startofpacket;                               // tdc_enable_s1_agent:rf_source_startofpacket -> tdc_enable_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] tdc_enable_s1_agent_rf_source_data;                                        // tdc_enable_s1_agent:rf_source_data -> tdc_enable_s1_agent_rsp_fifo:in_data
	wire         tdc_enable_s1_agent_rf_source_ready;                                       // tdc_enable_s1_agent_rsp_fifo:in_ready -> tdc_enable_s1_agent:rf_source_ready
	wire         tdc_enable_s1_agent_rsp_fifo_out_endofpacket;                              // tdc_enable_s1_agent_rsp_fifo:out_endofpacket -> tdc_enable_s1_agent:rf_sink_endofpacket
	wire         tdc_enable_s1_agent_rsp_fifo_out_valid;                                    // tdc_enable_s1_agent_rsp_fifo:out_valid -> tdc_enable_s1_agent:rf_sink_valid
	wire         tdc_enable_s1_agent_rsp_fifo_out_startofpacket;                            // tdc_enable_s1_agent_rsp_fifo:out_startofpacket -> tdc_enable_s1_agent:rf_sink_startofpacket
	wire  [96:0] tdc_enable_s1_agent_rsp_fifo_out_data;                                     // tdc_enable_s1_agent_rsp_fifo:out_data -> tdc_enable_s1_agent:rf_sink_data
	wire         tdc_enable_s1_agent_rsp_fifo_out_ready;                                    // tdc_enable_s1_agent:rf_sink_ready -> tdc_enable_s1_agent_rsp_fifo:out_ready
	wire         tdc_enable_s1_agent_rdata_fifo_src_valid;                                  // tdc_enable_s1_agent:rdata_fifo_src_valid -> tdc_enable_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] tdc_enable_s1_agent_rdata_fifo_src_data;                                   // tdc_enable_s1_agent:rdata_fifo_src_data -> tdc_enable_s1_agent:rdata_fifo_sink_data
	wire         tdc_enable_s1_agent_rdata_fifo_src_ready;                                  // tdc_enable_s1_agent:rdata_fifo_sink_ready -> tdc_enable_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_013_src_endofpacket;                                               // cmd_mux_013:src_endofpacket -> tdc_enable_s1_agent:cp_endofpacket
	wire         cmd_mux_013_src_valid;                                                     // cmd_mux_013:src_valid -> tdc_enable_s1_agent:cp_valid
	wire         cmd_mux_013_src_startofpacket;                                             // cmd_mux_013:src_startofpacket -> tdc_enable_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_013_src_data;                                                      // cmd_mux_013:src_data -> tdc_enable_s1_agent:cp_data
	wire  [24:0] cmd_mux_013_src_channel;                                                   // cmd_mux_013:src_channel -> tdc_enable_s1_agent:cp_channel
	wire         cmd_mux_013_src_ready;                                                     // tdc_enable_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire         service_timer_s1_agent_m0_waitrequest;                                     // service_timer_s1_translator:uav_waitrequest -> service_timer_s1_agent:m0_waitrequest
	wire   [2:0] service_timer_s1_agent_m0_burstcount;                                      // service_timer_s1_agent:m0_burstcount -> service_timer_s1_translator:uav_burstcount
	wire  [31:0] service_timer_s1_agent_m0_writedata;                                       // service_timer_s1_agent:m0_writedata -> service_timer_s1_translator:uav_writedata
	wire  [15:0] service_timer_s1_agent_m0_address;                                         // service_timer_s1_agent:m0_address -> service_timer_s1_translator:uav_address
	wire         service_timer_s1_agent_m0_write;                                           // service_timer_s1_agent:m0_write -> service_timer_s1_translator:uav_write
	wire         service_timer_s1_agent_m0_lock;                                            // service_timer_s1_agent:m0_lock -> service_timer_s1_translator:uav_lock
	wire         service_timer_s1_agent_m0_read;                                            // service_timer_s1_agent:m0_read -> service_timer_s1_translator:uav_read
	wire  [31:0] service_timer_s1_agent_m0_readdata;                                        // service_timer_s1_translator:uav_readdata -> service_timer_s1_agent:m0_readdata
	wire         service_timer_s1_agent_m0_readdatavalid;                                   // service_timer_s1_translator:uav_readdatavalid -> service_timer_s1_agent:m0_readdatavalid
	wire         service_timer_s1_agent_m0_debugaccess;                                     // service_timer_s1_agent:m0_debugaccess -> service_timer_s1_translator:uav_debugaccess
	wire   [3:0] service_timer_s1_agent_m0_byteenable;                                      // service_timer_s1_agent:m0_byteenable -> service_timer_s1_translator:uav_byteenable
	wire         service_timer_s1_agent_rf_source_endofpacket;                              // service_timer_s1_agent:rf_source_endofpacket -> service_timer_s1_agent_rsp_fifo:in_endofpacket
	wire         service_timer_s1_agent_rf_source_valid;                                    // service_timer_s1_agent:rf_source_valid -> service_timer_s1_agent_rsp_fifo:in_valid
	wire         service_timer_s1_agent_rf_source_startofpacket;                            // service_timer_s1_agent:rf_source_startofpacket -> service_timer_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] service_timer_s1_agent_rf_source_data;                                     // service_timer_s1_agent:rf_source_data -> service_timer_s1_agent_rsp_fifo:in_data
	wire         service_timer_s1_agent_rf_source_ready;                                    // service_timer_s1_agent_rsp_fifo:in_ready -> service_timer_s1_agent:rf_source_ready
	wire         service_timer_s1_agent_rsp_fifo_out_endofpacket;                           // service_timer_s1_agent_rsp_fifo:out_endofpacket -> service_timer_s1_agent:rf_sink_endofpacket
	wire         service_timer_s1_agent_rsp_fifo_out_valid;                                 // service_timer_s1_agent_rsp_fifo:out_valid -> service_timer_s1_agent:rf_sink_valid
	wire         service_timer_s1_agent_rsp_fifo_out_startofpacket;                         // service_timer_s1_agent_rsp_fifo:out_startofpacket -> service_timer_s1_agent:rf_sink_startofpacket
	wire  [96:0] service_timer_s1_agent_rsp_fifo_out_data;                                  // service_timer_s1_agent_rsp_fifo:out_data -> service_timer_s1_agent:rf_sink_data
	wire         service_timer_s1_agent_rsp_fifo_out_ready;                                 // service_timer_s1_agent:rf_sink_ready -> service_timer_s1_agent_rsp_fifo:out_ready
	wire         service_timer_s1_agent_rdata_fifo_src_valid;                               // service_timer_s1_agent:rdata_fifo_src_valid -> service_timer_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] service_timer_s1_agent_rdata_fifo_src_data;                                // service_timer_s1_agent:rdata_fifo_src_data -> service_timer_s1_agent:rdata_fifo_sink_data
	wire         service_timer_s1_agent_rdata_fifo_src_ready;                               // service_timer_s1_agent:rdata_fifo_sink_ready -> service_timer_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_014_src_endofpacket;                                               // cmd_mux_014:src_endofpacket -> service_timer_s1_agent:cp_endofpacket
	wire         cmd_mux_014_src_valid;                                                     // cmd_mux_014:src_valid -> service_timer_s1_agent:cp_valid
	wire         cmd_mux_014_src_startofpacket;                                             // cmd_mux_014:src_startofpacket -> service_timer_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_014_src_data;                                                      // cmd_mux_014:src_data -> service_timer_s1_agent:cp_data
	wire  [24:0] cmd_mux_014_src_channel;                                                   // cmd_mux_014:src_channel -> service_timer_s1_agent:cp_channel
	wire         cmd_mux_014_src_ready;                                                     // service_timer_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire         system_mode_s1_agent_m0_waitrequest;                                       // system_mode_s1_translator:uav_waitrequest -> system_mode_s1_agent:m0_waitrequest
	wire   [2:0] system_mode_s1_agent_m0_burstcount;                                        // system_mode_s1_agent:m0_burstcount -> system_mode_s1_translator:uav_burstcount
	wire  [31:0] system_mode_s1_agent_m0_writedata;                                         // system_mode_s1_agent:m0_writedata -> system_mode_s1_translator:uav_writedata
	wire  [15:0] system_mode_s1_agent_m0_address;                                           // system_mode_s1_agent:m0_address -> system_mode_s1_translator:uav_address
	wire         system_mode_s1_agent_m0_write;                                             // system_mode_s1_agent:m0_write -> system_mode_s1_translator:uav_write
	wire         system_mode_s1_agent_m0_lock;                                              // system_mode_s1_agent:m0_lock -> system_mode_s1_translator:uav_lock
	wire         system_mode_s1_agent_m0_read;                                              // system_mode_s1_agent:m0_read -> system_mode_s1_translator:uav_read
	wire  [31:0] system_mode_s1_agent_m0_readdata;                                          // system_mode_s1_translator:uav_readdata -> system_mode_s1_agent:m0_readdata
	wire         system_mode_s1_agent_m0_readdatavalid;                                     // system_mode_s1_translator:uav_readdatavalid -> system_mode_s1_agent:m0_readdatavalid
	wire         system_mode_s1_agent_m0_debugaccess;                                       // system_mode_s1_agent:m0_debugaccess -> system_mode_s1_translator:uav_debugaccess
	wire   [3:0] system_mode_s1_agent_m0_byteenable;                                        // system_mode_s1_agent:m0_byteenable -> system_mode_s1_translator:uav_byteenable
	wire         system_mode_s1_agent_rf_source_endofpacket;                                // system_mode_s1_agent:rf_source_endofpacket -> system_mode_s1_agent_rsp_fifo:in_endofpacket
	wire         system_mode_s1_agent_rf_source_valid;                                      // system_mode_s1_agent:rf_source_valid -> system_mode_s1_agent_rsp_fifo:in_valid
	wire         system_mode_s1_agent_rf_source_startofpacket;                              // system_mode_s1_agent:rf_source_startofpacket -> system_mode_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] system_mode_s1_agent_rf_source_data;                                       // system_mode_s1_agent:rf_source_data -> system_mode_s1_agent_rsp_fifo:in_data
	wire         system_mode_s1_agent_rf_source_ready;                                      // system_mode_s1_agent_rsp_fifo:in_ready -> system_mode_s1_agent:rf_source_ready
	wire         system_mode_s1_agent_rsp_fifo_out_endofpacket;                             // system_mode_s1_agent_rsp_fifo:out_endofpacket -> system_mode_s1_agent:rf_sink_endofpacket
	wire         system_mode_s1_agent_rsp_fifo_out_valid;                                   // system_mode_s1_agent_rsp_fifo:out_valid -> system_mode_s1_agent:rf_sink_valid
	wire         system_mode_s1_agent_rsp_fifo_out_startofpacket;                           // system_mode_s1_agent_rsp_fifo:out_startofpacket -> system_mode_s1_agent:rf_sink_startofpacket
	wire  [96:0] system_mode_s1_agent_rsp_fifo_out_data;                                    // system_mode_s1_agent_rsp_fifo:out_data -> system_mode_s1_agent:rf_sink_data
	wire         system_mode_s1_agent_rsp_fifo_out_ready;                                   // system_mode_s1_agent:rf_sink_ready -> system_mode_s1_agent_rsp_fifo:out_ready
	wire         system_mode_s1_agent_rdata_fifo_src_valid;                                 // system_mode_s1_agent:rdata_fifo_src_valid -> system_mode_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] system_mode_s1_agent_rdata_fifo_src_data;                                  // system_mode_s1_agent:rdata_fifo_src_data -> system_mode_s1_agent:rdata_fifo_sink_data
	wire         system_mode_s1_agent_rdata_fifo_src_ready;                                 // system_mode_s1_agent:rdata_fifo_sink_ready -> system_mode_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_015_src_endofpacket;                                               // cmd_mux_015:src_endofpacket -> system_mode_s1_agent:cp_endofpacket
	wire         cmd_mux_015_src_valid;                                                     // cmd_mux_015:src_valid -> system_mode_s1_agent:cp_valid
	wire         cmd_mux_015_src_startofpacket;                                             // cmd_mux_015:src_startofpacket -> system_mode_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_015_src_data;                                                      // cmd_mux_015:src_data -> system_mode_s1_agent:cp_data
	wire  [24:0] cmd_mux_015_src_channel;                                                   // cmd_mux_015:src_channel -> system_mode_s1_agent:cp_channel
	wire         cmd_mux_015_src_ready;                                                     // system_mode_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire         amp_gain_s1_agent_m0_waitrequest;                                          // amp_gain_s1_translator:uav_waitrequest -> amp_gain_s1_agent:m0_waitrequest
	wire   [2:0] amp_gain_s1_agent_m0_burstcount;                                           // amp_gain_s1_agent:m0_burstcount -> amp_gain_s1_translator:uav_burstcount
	wire  [31:0] amp_gain_s1_agent_m0_writedata;                                            // amp_gain_s1_agent:m0_writedata -> amp_gain_s1_translator:uav_writedata
	wire  [15:0] amp_gain_s1_agent_m0_address;                                              // amp_gain_s1_agent:m0_address -> amp_gain_s1_translator:uav_address
	wire         amp_gain_s1_agent_m0_write;                                                // amp_gain_s1_agent:m0_write -> amp_gain_s1_translator:uav_write
	wire         amp_gain_s1_agent_m0_lock;                                                 // amp_gain_s1_agent:m0_lock -> amp_gain_s1_translator:uav_lock
	wire         amp_gain_s1_agent_m0_read;                                                 // amp_gain_s1_agent:m0_read -> amp_gain_s1_translator:uav_read
	wire  [31:0] amp_gain_s1_agent_m0_readdata;                                             // amp_gain_s1_translator:uav_readdata -> amp_gain_s1_agent:m0_readdata
	wire         amp_gain_s1_agent_m0_readdatavalid;                                        // amp_gain_s1_translator:uav_readdatavalid -> amp_gain_s1_agent:m0_readdatavalid
	wire         amp_gain_s1_agent_m0_debugaccess;                                          // amp_gain_s1_agent:m0_debugaccess -> amp_gain_s1_translator:uav_debugaccess
	wire   [3:0] amp_gain_s1_agent_m0_byteenable;                                           // amp_gain_s1_agent:m0_byteenable -> amp_gain_s1_translator:uav_byteenable
	wire         amp_gain_s1_agent_rf_source_endofpacket;                                   // amp_gain_s1_agent:rf_source_endofpacket -> amp_gain_s1_agent_rsp_fifo:in_endofpacket
	wire         amp_gain_s1_agent_rf_source_valid;                                         // amp_gain_s1_agent:rf_source_valid -> amp_gain_s1_agent_rsp_fifo:in_valid
	wire         amp_gain_s1_agent_rf_source_startofpacket;                                 // amp_gain_s1_agent:rf_source_startofpacket -> amp_gain_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] amp_gain_s1_agent_rf_source_data;                                          // amp_gain_s1_agent:rf_source_data -> amp_gain_s1_agent_rsp_fifo:in_data
	wire         amp_gain_s1_agent_rf_source_ready;                                         // amp_gain_s1_agent_rsp_fifo:in_ready -> amp_gain_s1_agent:rf_source_ready
	wire         amp_gain_s1_agent_rsp_fifo_out_endofpacket;                                // amp_gain_s1_agent_rsp_fifo:out_endofpacket -> amp_gain_s1_agent:rf_sink_endofpacket
	wire         amp_gain_s1_agent_rsp_fifo_out_valid;                                      // amp_gain_s1_agent_rsp_fifo:out_valid -> amp_gain_s1_agent:rf_sink_valid
	wire         amp_gain_s1_agent_rsp_fifo_out_startofpacket;                              // amp_gain_s1_agent_rsp_fifo:out_startofpacket -> amp_gain_s1_agent:rf_sink_startofpacket
	wire  [96:0] amp_gain_s1_agent_rsp_fifo_out_data;                                       // amp_gain_s1_agent_rsp_fifo:out_data -> amp_gain_s1_agent:rf_sink_data
	wire         amp_gain_s1_agent_rsp_fifo_out_ready;                                      // amp_gain_s1_agent:rf_sink_ready -> amp_gain_s1_agent_rsp_fifo:out_ready
	wire         amp_gain_s1_agent_rdata_fifo_src_valid;                                    // amp_gain_s1_agent:rdata_fifo_src_valid -> amp_gain_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] amp_gain_s1_agent_rdata_fifo_src_data;                                     // amp_gain_s1_agent:rdata_fifo_src_data -> amp_gain_s1_agent:rdata_fifo_sink_data
	wire         amp_gain_s1_agent_rdata_fifo_src_ready;                                    // amp_gain_s1_agent:rdata_fifo_sink_ready -> amp_gain_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_016_src_endofpacket;                                               // cmd_mux_016:src_endofpacket -> amp_gain_s1_agent:cp_endofpacket
	wire         cmd_mux_016_src_valid;                                                     // cmd_mux_016:src_valid -> amp_gain_s1_agent:cp_valid
	wire         cmd_mux_016_src_startofpacket;                                             // cmd_mux_016:src_startofpacket -> amp_gain_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_016_src_data;                                                      // cmd_mux_016:src_data -> amp_gain_s1_agent:cp_data
	wire  [24:0] cmd_mux_016_src_channel;                                                   // cmd_mux_016:src_channel -> amp_gain_s1_agent:cp_channel
	wire         cmd_mux_016_src_ready;                                                     // amp_gain_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire         apd_overcurrent_s1_agent_m0_waitrequest;                                   // apd_overcurrent_s1_translator:uav_waitrequest -> apd_overcurrent_s1_agent:m0_waitrequest
	wire   [2:0] apd_overcurrent_s1_agent_m0_burstcount;                                    // apd_overcurrent_s1_agent:m0_burstcount -> apd_overcurrent_s1_translator:uav_burstcount
	wire  [31:0] apd_overcurrent_s1_agent_m0_writedata;                                     // apd_overcurrent_s1_agent:m0_writedata -> apd_overcurrent_s1_translator:uav_writedata
	wire  [15:0] apd_overcurrent_s1_agent_m0_address;                                       // apd_overcurrent_s1_agent:m0_address -> apd_overcurrent_s1_translator:uav_address
	wire         apd_overcurrent_s1_agent_m0_write;                                         // apd_overcurrent_s1_agent:m0_write -> apd_overcurrent_s1_translator:uav_write
	wire         apd_overcurrent_s1_agent_m0_lock;                                          // apd_overcurrent_s1_agent:m0_lock -> apd_overcurrent_s1_translator:uav_lock
	wire         apd_overcurrent_s1_agent_m0_read;                                          // apd_overcurrent_s1_agent:m0_read -> apd_overcurrent_s1_translator:uav_read
	wire  [31:0] apd_overcurrent_s1_agent_m0_readdata;                                      // apd_overcurrent_s1_translator:uav_readdata -> apd_overcurrent_s1_agent:m0_readdata
	wire         apd_overcurrent_s1_agent_m0_readdatavalid;                                 // apd_overcurrent_s1_translator:uav_readdatavalid -> apd_overcurrent_s1_agent:m0_readdatavalid
	wire         apd_overcurrent_s1_agent_m0_debugaccess;                                   // apd_overcurrent_s1_agent:m0_debugaccess -> apd_overcurrent_s1_translator:uav_debugaccess
	wire   [3:0] apd_overcurrent_s1_agent_m0_byteenable;                                    // apd_overcurrent_s1_agent:m0_byteenable -> apd_overcurrent_s1_translator:uav_byteenable
	wire         apd_overcurrent_s1_agent_rf_source_endofpacket;                            // apd_overcurrent_s1_agent:rf_source_endofpacket -> apd_overcurrent_s1_agent_rsp_fifo:in_endofpacket
	wire         apd_overcurrent_s1_agent_rf_source_valid;                                  // apd_overcurrent_s1_agent:rf_source_valid -> apd_overcurrent_s1_agent_rsp_fifo:in_valid
	wire         apd_overcurrent_s1_agent_rf_source_startofpacket;                          // apd_overcurrent_s1_agent:rf_source_startofpacket -> apd_overcurrent_s1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] apd_overcurrent_s1_agent_rf_source_data;                                   // apd_overcurrent_s1_agent:rf_source_data -> apd_overcurrent_s1_agent_rsp_fifo:in_data
	wire         apd_overcurrent_s1_agent_rf_source_ready;                                  // apd_overcurrent_s1_agent_rsp_fifo:in_ready -> apd_overcurrent_s1_agent:rf_source_ready
	wire         apd_overcurrent_s1_agent_rsp_fifo_out_endofpacket;                         // apd_overcurrent_s1_agent_rsp_fifo:out_endofpacket -> apd_overcurrent_s1_agent:rf_sink_endofpacket
	wire         apd_overcurrent_s1_agent_rsp_fifo_out_valid;                               // apd_overcurrent_s1_agent_rsp_fifo:out_valid -> apd_overcurrent_s1_agent:rf_sink_valid
	wire         apd_overcurrent_s1_agent_rsp_fifo_out_startofpacket;                       // apd_overcurrent_s1_agent_rsp_fifo:out_startofpacket -> apd_overcurrent_s1_agent:rf_sink_startofpacket
	wire  [96:0] apd_overcurrent_s1_agent_rsp_fifo_out_data;                                // apd_overcurrent_s1_agent_rsp_fifo:out_data -> apd_overcurrent_s1_agent:rf_sink_data
	wire         apd_overcurrent_s1_agent_rsp_fifo_out_ready;                               // apd_overcurrent_s1_agent:rf_sink_ready -> apd_overcurrent_s1_agent_rsp_fifo:out_ready
	wire         apd_overcurrent_s1_agent_rdata_fifo_src_valid;                             // apd_overcurrent_s1_agent:rdata_fifo_src_valid -> apd_overcurrent_s1_agent:rdata_fifo_sink_valid
	wire  [33:0] apd_overcurrent_s1_agent_rdata_fifo_src_data;                              // apd_overcurrent_s1_agent:rdata_fifo_src_data -> apd_overcurrent_s1_agent:rdata_fifo_sink_data
	wire         apd_overcurrent_s1_agent_rdata_fifo_src_ready;                             // apd_overcurrent_s1_agent:rdata_fifo_sink_ready -> apd_overcurrent_s1_agent:rdata_fifo_src_ready
	wire         cmd_mux_017_src_endofpacket;                                               // cmd_mux_017:src_endofpacket -> apd_overcurrent_s1_agent:cp_endofpacket
	wire         cmd_mux_017_src_valid;                                                     // cmd_mux_017:src_valid -> apd_overcurrent_s1_agent:cp_valid
	wire         cmd_mux_017_src_startofpacket;                                             // cmd_mux_017:src_startofpacket -> apd_overcurrent_s1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_017_src_data;                                                      // cmd_mux_017:src_data -> apd_overcurrent_s1_agent:cp_data
	wire  [24:0] cmd_mux_017_src_channel;                                                   // cmd_mux_017:src_channel -> apd_overcurrent_s1_agent:cp_channel
	wire         cmd_mux_017_src_ready;                                                     // apd_overcurrent_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire         spi_apd_avalon_slave_agent_m0_waitrequest;                                 // spi_apd_avalon_slave_translator:uav_waitrequest -> spi_apd_avalon_slave_agent:m0_waitrequest
	wire   [2:0] spi_apd_avalon_slave_agent_m0_burstcount;                                  // spi_apd_avalon_slave_agent:m0_burstcount -> spi_apd_avalon_slave_translator:uav_burstcount
	wire  [31:0] spi_apd_avalon_slave_agent_m0_writedata;                                   // spi_apd_avalon_slave_agent:m0_writedata -> spi_apd_avalon_slave_translator:uav_writedata
	wire  [15:0] spi_apd_avalon_slave_agent_m0_address;                                     // spi_apd_avalon_slave_agent:m0_address -> spi_apd_avalon_slave_translator:uav_address
	wire         spi_apd_avalon_slave_agent_m0_write;                                       // spi_apd_avalon_slave_agent:m0_write -> spi_apd_avalon_slave_translator:uav_write
	wire         spi_apd_avalon_slave_agent_m0_lock;                                        // spi_apd_avalon_slave_agent:m0_lock -> spi_apd_avalon_slave_translator:uav_lock
	wire         spi_apd_avalon_slave_agent_m0_read;                                        // spi_apd_avalon_slave_agent:m0_read -> spi_apd_avalon_slave_translator:uav_read
	wire  [31:0] spi_apd_avalon_slave_agent_m0_readdata;                                    // spi_apd_avalon_slave_translator:uav_readdata -> spi_apd_avalon_slave_agent:m0_readdata
	wire         spi_apd_avalon_slave_agent_m0_readdatavalid;                               // spi_apd_avalon_slave_translator:uav_readdatavalid -> spi_apd_avalon_slave_agent:m0_readdatavalid
	wire         spi_apd_avalon_slave_agent_m0_debugaccess;                                 // spi_apd_avalon_slave_agent:m0_debugaccess -> spi_apd_avalon_slave_translator:uav_debugaccess
	wire   [3:0] spi_apd_avalon_slave_agent_m0_byteenable;                                  // spi_apd_avalon_slave_agent:m0_byteenable -> spi_apd_avalon_slave_translator:uav_byteenable
	wire         spi_apd_avalon_slave_agent_rf_source_endofpacket;                          // spi_apd_avalon_slave_agent:rf_source_endofpacket -> spi_apd_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         spi_apd_avalon_slave_agent_rf_source_valid;                                // spi_apd_avalon_slave_agent:rf_source_valid -> spi_apd_avalon_slave_agent_rsp_fifo:in_valid
	wire         spi_apd_avalon_slave_agent_rf_source_startofpacket;                        // spi_apd_avalon_slave_agent:rf_source_startofpacket -> spi_apd_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire  [96:0] spi_apd_avalon_slave_agent_rf_source_data;                                 // spi_apd_avalon_slave_agent:rf_source_data -> spi_apd_avalon_slave_agent_rsp_fifo:in_data
	wire         spi_apd_avalon_slave_agent_rf_source_ready;                                // spi_apd_avalon_slave_agent_rsp_fifo:in_ready -> spi_apd_avalon_slave_agent:rf_source_ready
	wire         spi_apd_avalon_slave_agent_rsp_fifo_out_endofpacket;                       // spi_apd_avalon_slave_agent_rsp_fifo:out_endofpacket -> spi_apd_avalon_slave_agent:rf_sink_endofpacket
	wire         spi_apd_avalon_slave_agent_rsp_fifo_out_valid;                             // spi_apd_avalon_slave_agent_rsp_fifo:out_valid -> spi_apd_avalon_slave_agent:rf_sink_valid
	wire         spi_apd_avalon_slave_agent_rsp_fifo_out_startofpacket;                     // spi_apd_avalon_slave_agent_rsp_fifo:out_startofpacket -> spi_apd_avalon_slave_agent:rf_sink_startofpacket
	wire  [96:0] spi_apd_avalon_slave_agent_rsp_fifo_out_data;                              // spi_apd_avalon_slave_agent_rsp_fifo:out_data -> spi_apd_avalon_slave_agent:rf_sink_data
	wire         spi_apd_avalon_slave_agent_rsp_fifo_out_ready;                             // spi_apd_avalon_slave_agent:rf_sink_ready -> spi_apd_avalon_slave_agent_rsp_fifo:out_ready
	wire         spi_apd_avalon_slave_agent_rdata_fifo_src_valid;                           // spi_apd_avalon_slave_agent:rdata_fifo_src_valid -> spi_apd_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] spi_apd_avalon_slave_agent_rdata_fifo_src_data;                            // spi_apd_avalon_slave_agent:rdata_fifo_src_data -> spi_apd_avalon_slave_agent:rdata_fifo_sink_data
	wire         spi_apd_avalon_slave_agent_rdata_fifo_src_ready;                           // spi_apd_avalon_slave_agent:rdata_fifo_sink_ready -> spi_apd_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_018_src_endofpacket;                                               // cmd_mux_018:src_endofpacket -> spi_apd_avalon_slave_agent:cp_endofpacket
	wire         cmd_mux_018_src_valid;                                                     // cmd_mux_018:src_valid -> spi_apd_avalon_slave_agent:cp_valid
	wire         cmd_mux_018_src_startofpacket;                                             // cmd_mux_018:src_startofpacket -> spi_apd_avalon_slave_agent:cp_startofpacket
	wire  [95:0] cmd_mux_018_src_data;                                                      // cmd_mux_018:src_data -> spi_apd_avalon_slave_agent:cp_data
	wire  [24:0] cmd_mux_018_src_channel;                                                   // cmd_mux_018:src_channel -> spi_apd_avalon_slave_agent:cp_channel
	wire         cmd_mux_018_src_ready;                                                     // spi_apd_avalon_slave_agent:cp_ready -> cmd_mux_018:src_ready
	wire         stepper_atten_avalon_slave_0_agent_m0_waitrequest;                         // stepper_atten_avalon_slave_0_translator:uav_waitrequest -> stepper_atten_avalon_slave_0_agent:m0_waitrequest
	wire   [2:0] stepper_atten_avalon_slave_0_agent_m0_burstcount;                          // stepper_atten_avalon_slave_0_agent:m0_burstcount -> stepper_atten_avalon_slave_0_translator:uav_burstcount
	wire  [31:0] stepper_atten_avalon_slave_0_agent_m0_writedata;                           // stepper_atten_avalon_slave_0_agent:m0_writedata -> stepper_atten_avalon_slave_0_translator:uav_writedata
	wire  [15:0] stepper_atten_avalon_slave_0_agent_m0_address;                             // stepper_atten_avalon_slave_0_agent:m0_address -> stepper_atten_avalon_slave_0_translator:uav_address
	wire         stepper_atten_avalon_slave_0_agent_m0_write;                               // stepper_atten_avalon_slave_0_agent:m0_write -> stepper_atten_avalon_slave_0_translator:uav_write
	wire         stepper_atten_avalon_slave_0_agent_m0_lock;                                // stepper_atten_avalon_slave_0_agent:m0_lock -> stepper_atten_avalon_slave_0_translator:uav_lock
	wire         stepper_atten_avalon_slave_0_agent_m0_read;                                // stepper_atten_avalon_slave_0_agent:m0_read -> stepper_atten_avalon_slave_0_translator:uav_read
	wire  [31:0] stepper_atten_avalon_slave_0_agent_m0_readdata;                            // stepper_atten_avalon_slave_0_translator:uav_readdata -> stepper_atten_avalon_slave_0_agent:m0_readdata
	wire         stepper_atten_avalon_slave_0_agent_m0_readdatavalid;                       // stepper_atten_avalon_slave_0_translator:uav_readdatavalid -> stepper_atten_avalon_slave_0_agent:m0_readdatavalid
	wire         stepper_atten_avalon_slave_0_agent_m0_debugaccess;                         // stepper_atten_avalon_slave_0_agent:m0_debugaccess -> stepper_atten_avalon_slave_0_translator:uav_debugaccess
	wire   [3:0] stepper_atten_avalon_slave_0_agent_m0_byteenable;                          // stepper_atten_avalon_slave_0_agent:m0_byteenable -> stepper_atten_avalon_slave_0_translator:uav_byteenable
	wire         stepper_atten_avalon_slave_0_agent_rf_source_endofpacket;                  // stepper_atten_avalon_slave_0_agent:rf_source_endofpacket -> stepper_atten_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         stepper_atten_avalon_slave_0_agent_rf_source_valid;                        // stepper_atten_avalon_slave_0_agent:rf_source_valid -> stepper_atten_avalon_slave_0_agent_rsp_fifo:in_valid
	wire         stepper_atten_avalon_slave_0_agent_rf_source_startofpacket;                // stepper_atten_avalon_slave_0_agent:rf_source_startofpacket -> stepper_atten_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [96:0] stepper_atten_avalon_slave_0_agent_rf_source_data;                         // stepper_atten_avalon_slave_0_agent:rf_source_data -> stepper_atten_avalon_slave_0_agent_rsp_fifo:in_data
	wire         stepper_atten_avalon_slave_0_agent_rf_source_ready;                        // stepper_atten_avalon_slave_0_agent_rsp_fifo:in_ready -> stepper_atten_avalon_slave_0_agent:rf_source_ready
	wire         stepper_atten_avalon_slave_0_agent_rsp_fifo_out_endofpacket;               // stepper_atten_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> stepper_atten_avalon_slave_0_agent:rf_sink_endofpacket
	wire         stepper_atten_avalon_slave_0_agent_rsp_fifo_out_valid;                     // stepper_atten_avalon_slave_0_agent_rsp_fifo:out_valid -> stepper_atten_avalon_slave_0_agent:rf_sink_valid
	wire         stepper_atten_avalon_slave_0_agent_rsp_fifo_out_startofpacket;             // stepper_atten_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> stepper_atten_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [96:0] stepper_atten_avalon_slave_0_agent_rsp_fifo_out_data;                      // stepper_atten_avalon_slave_0_agent_rsp_fifo:out_data -> stepper_atten_avalon_slave_0_agent:rf_sink_data
	wire         stepper_atten_avalon_slave_0_agent_rsp_fifo_out_ready;                     // stepper_atten_avalon_slave_0_agent:rf_sink_ready -> stepper_atten_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         stepper_atten_avalon_slave_0_agent_rdata_fifo_src_valid;                   // stepper_atten_avalon_slave_0_agent:rdata_fifo_src_valid -> stepper_atten_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] stepper_atten_avalon_slave_0_agent_rdata_fifo_src_data;                    // stepper_atten_avalon_slave_0_agent:rdata_fifo_src_data -> stepper_atten_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         stepper_atten_avalon_slave_0_agent_rdata_fifo_src_ready;                   // stepper_atten_avalon_slave_0_agent:rdata_fifo_sink_ready -> stepper_atten_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_019_src_endofpacket;                                               // cmd_mux_019:src_endofpacket -> stepper_atten_avalon_slave_0_agent:cp_endofpacket
	wire         cmd_mux_019_src_valid;                                                     // cmd_mux_019:src_valid -> stepper_atten_avalon_slave_0_agent:cp_valid
	wire         cmd_mux_019_src_startofpacket;                                             // cmd_mux_019:src_startofpacket -> stepper_atten_avalon_slave_0_agent:cp_startofpacket
	wire  [95:0] cmd_mux_019_src_data;                                                      // cmd_mux_019:src_data -> stepper_atten_avalon_slave_0_agent:cp_data
	wire  [24:0] cmd_mux_019_src_channel;                                                   // cmd_mux_019:src_channel -> stepper_atten_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_019_src_ready;                                                     // stepper_atten_avalon_slave_0_agent:cp_ready -> cmd_mux_019:src_ready
	wire         stepper_iris_avalon_slave_0_agent_m0_waitrequest;                          // stepper_iris_avalon_slave_0_translator:uav_waitrequest -> stepper_iris_avalon_slave_0_agent:m0_waitrequest
	wire   [2:0] stepper_iris_avalon_slave_0_agent_m0_burstcount;                           // stepper_iris_avalon_slave_0_agent:m0_burstcount -> stepper_iris_avalon_slave_0_translator:uav_burstcount
	wire  [31:0] stepper_iris_avalon_slave_0_agent_m0_writedata;                            // stepper_iris_avalon_slave_0_agent:m0_writedata -> stepper_iris_avalon_slave_0_translator:uav_writedata
	wire  [15:0] stepper_iris_avalon_slave_0_agent_m0_address;                              // stepper_iris_avalon_slave_0_agent:m0_address -> stepper_iris_avalon_slave_0_translator:uav_address
	wire         stepper_iris_avalon_slave_0_agent_m0_write;                                // stepper_iris_avalon_slave_0_agent:m0_write -> stepper_iris_avalon_slave_0_translator:uav_write
	wire         stepper_iris_avalon_slave_0_agent_m0_lock;                                 // stepper_iris_avalon_slave_0_agent:m0_lock -> stepper_iris_avalon_slave_0_translator:uav_lock
	wire         stepper_iris_avalon_slave_0_agent_m0_read;                                 // stepper_iris_avalon_slave_0_agent:m0_read -> stepper_iris_avalon_slave_0_translator:uav_read
	wire  [31:0] stepper_iris_avalon_slave_0_agent_m0_readdata;                             // stepper_iris_avalon_slave_0_translator:uav_readdata -> stepper_iris_avalon_slave_0_agent:m0_readdata
	wire         stepper_iris_avalon_slave_0_agent_m0_readdatavalid;                        // stepper_iris_avalon_slave_0_translator:uav_readdatavalid -> stepper_iris_avalon_slave_0_agent:m0_readdatavalid
	wire         stepper_iris_avalon_slave_0_agent_m0_debugaccess;                          // stepper_iris_avalon_slave_0_agent:m0_debugaccess -> stepper_iris_avalon_slave_0_translator:uav_debugaccess
	wire   [3:0] stepper_iris_avalon_slave_0_agent_m0_byteenable;                           // stepper_iris_avalon_slave_0_agent:m0_byteenable -> stepper_iris_avalon_slave_0_translator:uav_byteenable
	wire         stepper_iris_avalon_slave_0_agent_rf_source_endofpacket;                   // stepper_iris_avalon_slave_0_agent:rf_source_endofpacket -> stepper_iris_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         stepper_iris_avalon_slave_0_agent_rf_source_valid;                         // stepper_iris_avalon_slave_0_agent:rf_source_valid -> stepper_iris_avalon_slave_0_agent_rsp_fifo:in_valid
	wire         stepper_iris_avalon_slave_0_agent_rf_source_startofpacket;                 // stepper_iris_avalon_slave_0_agent:rf_source_startofpacket -> stepper_iris_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [96:0] stepper_iris_avalon_slave_0_agent_rf_source_data;                          // stepper_iris_avalon_slave_0_agent:rf_source_data -> stepper_iris_avalon_slave_0_agent_rsp_fifo:in_data
	wire         stepper_iris_avalon_slave_0_agent_rf_source_ready;                         // stepper_iris_avalon_slave_0_agent_rsp_fifo:in_ready -> stepper_iris_avalon_slave_0_agent:rf_source_ready
	wire         stepper_iris_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                // stepper_iris_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> stepper_iris_avalon_slave_0_agent:rf_sink_endofpacket
	wire         stepper_iris_avalon_slave_0_agent_rsp_fifo_out_valid;                      // stepper_iris_avalon_slave_0_agent_rsp_fifo:out_valid -> stepper_iris_avalon_slave_0_agent:rf_sink_valid
	wire         stepper_iris_avalon_slave_0_agent_rsp_fifo_out_startofpacket;              // stepper_iris_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> stepper_iris_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [96:0] stepper_iris_avalon_slave_0_agent_rsp_fifo_out_data;                       // stepper_iris_avalon_slave_0_agent_rsp_fifo:out_data -> stepper_iris_avalon_slave_0_agent:rf_sink_data
	wire         stepper_iris_avalon_slave_0_agent_rsp_fifo_out_ready;                      // stepper_iris_avalon_slave_0_agent:rf_sink_ready -> stepper_iris_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         stepper_iris_avalon_slave_0_agent_rdata_fifo_src_valid;                    // stepper_iris_avalon_slave_0_agent:rdata_fifo_src_valid -> stepper_iris_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] stepper_iris_avalon_slave_0_agent_rdata_fifo_src_data;                     // stepper_iris_avalon_slave_0_agent:rdata_fifo_src_data -> stepper_iris_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         stepper_iris_avalon_slave_0_agent_rdata_fifo_src_ready;                    // stepper_iris_avalon_slave_0_agent:rdata_fifo_sink_ready -> stepper_iris_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_020_src_endofpacket;                                               // cmd_mux_020:src_endofpacket -> stepper_iris_avalon_slave_0_agent:cp_endofpacket
	wire         cmd_mux_020_src_valid;                                                     // cmd_mux_020:src_valid -> stepper_iris_avalon_slave_0_agent:cp_valid
	wire         cmd_mux_020_src_startofpacket;                                             // cmd_mux_020:src_startofpacket -> stepper_iris_avalon_slave_0_agent:cp_startofpacket
	wire  [95:0] cmd_mux_020_src_data;                                                      // cmd_mux_020:src_data -> stepper_iris_avalon_slave_0_agent:cp_data
	wire  [24:0] cmd_mux_020_src_channel;                                                   // cmd_mux_020:src_channel -> stepper_iris_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_020_src_ready;                                                     // stepper_iris_avalon_slave_0_agent:cp_ready -> cmd_mux_020:src_ready
	wire         laser_charge_avalon_slave_0_agent_m0_waitrequest;                          // laser_charge_avalon_slave_0_translator:uav_waitrequest -> laser_charge_avalon_slave_0_agent:m0_waitrequest
	wire   [2:0] laser_charge_avalon_slave_0_agent_m0_burstcount;                           // laser_charge_avalon_slave_0_agent:m0_burstcount -> laser_charge_avalon_slave_0_translator:uav_burstcount
	wire  [31:0] laser_charge_avalon_slave_0_agent_m0_writedata;                            // laser_charge_avalon_slave_0_agent:m0_writedata -> laser_charge_avalon_slave_0_translator:uav_writedata
	wire  [15:0] laser_charge_avalon_slave_0_agent_m0_address;                              // laser_charge_avalon_slave_0_agent:m0_address -> laser_charge_avalon_slave_0_translator:uav_address
	wire         laser_charge_avalon_slave_0_agent_m0_write;                                // laser_charge_avalon_slave_0_agent:m0_write -> laser_charge_avalon_slave_0_translator:uav_write
	wire         laser_charge_avalon_slave_0_agent_m0_lock;                                 // laser_charge_avalon_slave_0_agent:m0_lock -> laser_charge_avalon_slave_0_translator:uav_lock
	wire         laser_charge_avalon_slave_0_agent_m0_read;                                 // laser_charge_avalon_slave_0_agent:m0_read -> laser_charge_avalon_slave_0_translator:uav_read
	wire  [31:0] laser_charge_avalon_slave_0_agent_m0_readdata;                             // laser_charge_avalon_slave_0_translator:uav_readdata -> laser_charge_avalon_slave_0_agent:m0_readdata
	wire         laser_charge_avalon_slave_0_agent_m0_readdatavalid;                        // laser_charge_avalon_slave_0_translator:uav_readdatavalid -> laser_charge_avalon_slave_0_agent:m0_readdatavalid
	wire         laser_charge_avalon_slave_0_agent_m0_debugaccess;                          // laser_charge_avalon_slave_0_agent:m0_debugaccess -> laser_charge_avalon_slave_0_translator:uav_debugaccess
	wire   [3:0] laser_charge_avalon_slave_0_agent_m0_byteenable;                           // laser_charge_avalon_slave_0_agent:m0_byteenable -> laser_charge_avalon_slave_0_translator:uav_byteenable
	wire         laser_charge_avalon_slave_0_agent_rf_source_endofpacket;                   // laser_charge_avalon_slave_0_agent:rf_source_endofpacket -> laser_charge_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         laser_charge_avalon_slave_0_agent_rf_source_valid;                         // laser_charge_avalon_slave_0_agent:rf_source_valid -> laser_charge_avalon_slave_0_agent_rsp_fifo:in_valid
	wire         laser_charge_avalon_slave_0_agent_rf_source_startofpacket;                 // laser_charge_avalon_slave_0_agent:rf_source_startofpacket -> laser_charge_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [96:0] laser_charge_avalon_slave_0_agent_rf_source_data;                          // laser_charge_avalon_slave_0_agent:rf_source_data -> laser_charge_avalon_slave_0_agent_rsp_fifo:in_data
	wire         laser_charge_avalon_slave_0_agent_rf_source_ready;                         // laser_charge_avalon_slave_0_agent_rsp_fifo:in_ready -> laser_charge_avalon_slave_0_agent:rf_source_ready
	wire         laser_charge_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                // laser_charge_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> laser_charge_avalon_slave_0_agent:rf_sink_endofpacket
	wire         laser_charge_avalon_slave_0_agent_rsp_fifo_out_valid;                      // laser_charge_avalon_slave_0_agent_rsp_fifo:out_valid -> laser_charge_avalon_slave_0_agent:rf_sink_valid
	wire         laser_charge_avalon_slave_0_agent_rsp_fifo_out_startofpacket;              // laser_charge_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> laser_charge_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [96:0] laser_charge_avalon_slave_0_agent_rsp_fifo_out_data;                       // laser_charge_avalon_slave_0_agent_rsp_fifo:out_data -> laser_charge_avalon_slave_0_agent:rf_sink_data
	wire         laser_charge_avalon_slave_0_agent_rsp_fifo_out_ready;                      // laser_charge_avalon_slave_0_agent:rf_sink_ready -> laser_charge_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         laser_charge_avalon_slave_0_agent_rdata_fifo_src_valid;                    // laser_charge_avalon_slave_0_agent:rdata_fifo_src_valid -> laser_charge_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] laser_charge_avalon_slave_0_agent_rdata_fifo_src_data;                     // laser_charge_avalon_slave_0_agent:rdata_fifo_src_data -> laser_charge_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         laser_charge_avalon_slave_0_agent_rdata_fifo_src_ready;                    // laser_charge_avalon_slave_0_agent:rdata_fifo_sink_ready -> laser_charge_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_021_src_endofpacket;                                               // cmd_mux_021:src_endofpacket -> laser_charge_avalon_slave_0_agent:cp_endofpacket
	wire         cmd_mux_021_src_valid;                                                     // cmd_mux_021:src_valid -> laser_charge_avalon_slave_0_agent:cp_valid
	wire         cmd_mux_021_src_startofpacket;                                             // cmd_mux_021:src_startofpacket -> laser_charge_avalon_slave_0_agent:cp_startofpacket
	wire  [95:0] cmd_mux_021_src_data;                                                      // cmd_mux_021:src_data -> laser_charge_avalon_slave_0_agent:cp_data
	wire  [24:0] cmd_mux_021_src_channel;                                                   // cmd_mux_021:src_channel -> laser_charge_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_021_src_ready;                                                     // laser_charge_avalon_slave_0_agent:cp_ready -> cmd_mux_021:src_ready
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_m0_waitrequest;                   // tdc_start_pulse_gen_avalon_slave_0_translator:uav_waitrequest -> tdc_start_pulse_gen_avalon_slave_0_agent:m0_waitrequest
	wire   [2:0] tdc_start_pulse_gen_avalon_slave_0_agent_m0_burstcount;                    // tdc_start_pulse_gen_avalon_slave_0_agent:m0_burstcount -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_burstcount
	wire  [31:0] tdc_start_pulse_gen_avalon_slave_0_agent_m0_writedata;                     // tdc_start_pulse_gen_avalon_slave_0_agent:m0_writedata -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_writedata
	wire  [15:0] tdc_start_pulse_gen_avalon_slave_0_agent_m0_address;                       // tdc_start_pulse_gen_avalon_slave_0_agent:m0_address -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_address
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_m0_write;                         // tdc_start_pulse_gen_avalon_slave_0_agent:m0_write -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_write
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_m0_lock;                          // tdc_start_pulse_gen_avalon_slave_0_agent:m0_lock -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_lock
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_m0_read;                          // tdc_start_pulse_gen_avalon_slave_0_agent:m0_read -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_read
	wire  [31:0] tdc_start_pulse_gen_avalon_slave_0_agent_m0_readdata;                      // tdc_start_pulse_gen_avalon_slave_0_translator:uav_readdata -> tdc_start_pulse_gen_avalon_slave_0_agent:m0_readdata
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_m0_readdatavalid;                 // tdc_start_pulse_gen_avalon_slave_0_translator:uav_readdatavalid -> tdc_start_pulse_gen_avalon_slave_0_agent:m0_readdatavalid
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_m0_debugaccess;                   // tdc_start_pulse_gen_avalon_slave_0_agent:m0_debugaccess -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_debugaccess
	wire   [3:0] tdc_start_pulse_gen_avalon_slave_0_agent_m0_byteenable;                    // tdc_start_pulse_gen_avalon_slave_0_agent:m0_byteenable -> tdc_start_pulse_gen_avalon_slave_0_translator:uav_byteenable
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_endofpacket;            // tdc_start_pulse_gen_avalon_slave_0_agent:rf_source_endofpacket -> tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_valid;                  // tdc_start_pulse_gen_avalon_slave_0_agent:rf_source_valid -> tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:in_valid
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_startofpacket;          // tdc_start_pulse_gen_avalon_slave_0_agent:rf_source_startofpacket -> tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire  [96:0] tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_data;                   // tdc_start_pulse_gen_avalon_slave_0_agent:rf_source_data -> tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:in_data
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_ready;                  // tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:in_ready -> tdc_start_pulse_gen_avalon_slave_0_agent:rf_source_ready
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_endofpacket;         // tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> tdc_start_pulse_gen_avalon_slave_0_agent:rf_sink_endofpacket
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_valid;               // tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:out_valid -> tdc_start_pulse_gen_avalon_slave_0_agent:rf_sink_valid
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_startofpacket;       // tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> tdc_start_pulse_gen_avalon_slave_0_agent:rf_sink_startofpacket
	wire  [96:0] tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_data;                // tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:out_data -> tdc_start_pulse_gen_avalon_slave_0_agent:rf_sink_data
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_ready;               // tdc_start_pulse_gen_avalon_slave_0_agent:rf_sink_ready -> tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo:out_ready
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_valid;             // tdc_start_pulse_gen_avalon_slave_0_agent:rdata_fifo_src_valid -> tdc_start_pulse_gen_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire  [33:0] tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_data;              // tdc_start_pulse_gen_avalon_slave_0_agent:rdata_fifo_src_data -> tdc_start_pulse_gen_avalon_slave_0_agent:rdata_fifo_sink_data
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_ready;             // tdc_start_pulse_gen_avalon_slave_0_agent:rdata_fifo_sink_ready -> tdc_start_pulse_gen_avalon_slave_0_agent:rdata_fifo_src_ready
	wire         cmd_mux_022_src_endofpacket;                                               // cmd_mux_022:src_endofpacket -> tdc_start_pulse_gen_avalon_slave_0_agent:cp_endofpacket
	wire         cmd_mux_022_src_valid;                                                     // cmd_mux_022:src_valid -> tdc_start_pulse_gen_avalon_slave_0_agent:cp_valid
	wire         cmd_mux_022_src_startofpacket;                                             // cmd_mux_022:src_startofpacket -> tdc_start_pulse_gen_avalon_slave_0_agent:cp_startofpacket
	wire  [95:0] cmd_mux_022_src_data;                                                      // cmd_mux_022:src_data -> tdc_start_pulse_gen_avalon_slave_0_agent:cp_data
	wire  [24:0] cmd_mux_022_src_channel;                                                   // cmd_mux_022:src_channel -> tdc_start_pulse_gen_avalon_slave_0_agent:cp_channel
	wire         cmd_mux_022_src_ready;                                                     // tdc_start_pulse_gen_avalon_slave_0_agent:cp_ready -> cmd_mux_022:src_ready
	wire         sample_recorder_avalon_slave_agent_m0_waitrequest;                         // sample_recorder_avalon_slave_translator:uav_waitrequest -> sample_recorder_avalon_slave_agent:m0_waitrequest
	wire   [2:0] sample_recorder_avalon_slave_agent_m0_burstcount;                          // sample_recorder_avalon_slave_agent:m0_burstcount -> sample_recorder_avalon_slave_translator:uav_burstcount
	wire  [31:0] sample_recorder_avalon_slave_agent_m0_writedata;                           // sample_recorder_avalon_slave_agent:m0_writedata -> sample_recorder_avalon_slave_translator:uav_writedata
	wire  [15:0] sample_recorder_avalon_slave_agent_m0_address;                             // sample_recorder_avalon_slave_agent:m0_address -> sample_recorder_avalon_slave_translator:uav_address
	wire         sample_recorder_avalon_slave_agent_m0_write;                               // sample_recorder_avalon_slave_agent:m0_write -> sample_recorder_avalon_slave_translator:uav_write
	wire         sample_recorder_avalon_slave_agent_m0_lock;                                // sample_recorder_avalon_slave_agent:m0_lock -> sample_recorder_avalon_slave_translator:uav_lock
	wire         sample_recorder_avalon_slave_agent_m0_read;                                // sample_recorder_avalon_slave_agent:m0_read -> sample_recorder_avalon_slave_translator:uav_read
	wire  [31:0] sample_recorder_avalon_slave_agent_m0_readdata;                            // sample_recorder_avalon_slave_translator:uav_readdata -> sample_recorder_avalon_slave_agent:m0_readdata
	wire         sample_recorder_avalon_slave_agent_m0_readdatavalid;                       // sample_recorder_avalon_slave_translator:uav_readdatavalid -> sample_recorder_avalon_slave_agent:m0_readdatavalid
	wire         sample_recorder_avalon_slave_agent_m0_debugaccess;                         // sample_recorder_avalon_slave_agent:m0_debugaccess -> sample_recorder_avalon_slave_translator:uav_debugaccess
	wire   [3:0] sample_recorder_avalon_slave_agent_m0_byteenable;                          // sample_recorder_avalon_slave_agent:m0_byteenable -> sample_recorder_avalon_slave_translator:uav_byteenable
	wire         sample_recorder_avalon_slave_agent_rf_source_endofpacket;                  // sample_recorder_avalon_slave_agent:rf_source_endofpacket -> sample_recorder_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire         sample_recorder_avalon_slave_agent_rf_source_valid;                        // sample_recorder_avalon_slave_agent:rf_source_valid -> sample_recorder_avalon_slave_agent_rsp_fifo:in_valid
	wire         sample_recorder_avalon_slave_agent_rf_source_startofpacket;                // sample_recorder_avalon_slave_agent:rf_source_startofpacket -> sample_recorder_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire  [96:0] sample_recorder_avalon_slave_agent_rf_source_data;                         // sample_recorder_avalon_slave_agent:rf_source_data -> sample_recorder_avalon_slave_agent_rsp_fifo:in_data
	wire         sample_recorder_avalon_slave_agent_rf_source_ready;                        // sample_recorder_avalon_slave_agent_rsp_fifo:in_ready -> sample_recorder_avalon_slave_agent:rf_source_ready
	wire         sample_recorder_avalon_slave_agent_rsp_fifo_out_endofpacket;               // sample_recorder_avalon_slave_agent_rsp_fifo:out_endofpacket -> sample_recorder_avalon_slave_agent:rf_sink_endofpacket
	wire         sample_recorder_avalon_slave_agent_rsp_fifo_out_valid;                     // sample_recorder_avalon_slave_agent_rsp_fifo:out_valid -> sample_recorder_avalon_slave_agent:rf_sink_valid
	wire         sample_recorder_avalon_slave_agent_rsp_fifo_out_startofpacket;             // sample_recorder_avalon_slave_agent_rsp_fifo:out_startofpacket -> sample_recorder_avalon_slave_agent:rf_sink_startofpacket
	wire  [96:0] sample_recorder_avalon_slave_agent_rsp_fifo_out_data;                      // sample_recorder_avalon_slave_agent_rsp_fifo:out_data -> sample_recorder_avalon_slave_agent:rf_sink_data
	wire         sample_recorder_avalon_slave_agent_rsp_fifo_out_ready;                     // sample_recorder_avalon_slave_agent:rf_sink_ready -> sample_recorder_avalon_slave_agent_rsp_fifo:out_ready
	wire         sample_recorder_avalon_slave_agent_rdata_fifo_src_valid;                   // sample_recorder_avalon_slave_agent:rdata_fifo_src_valid -> sample_recorder_avalon_slave_agent:rdata_fifo_sink_valid
	wire  [33:0] sample_recorder_avalon_slave_agent_rdata_fifo_src_data;                    // sample_recorder_avalon_slave_agent:rdata_fifo_src_data -> sample_recorder_avalon_slave_agent:rdata_fifo_sink_data
	wire         sample_recorder_avalon_slave_agent_rdata_fifo_src_ready;                   // sample_recorder_avalon_slave_agent:rdata_fifo_sink_ready -> sample_recorder_avalon_slave_agent:rdata_fifo_src_ready
	wire         cmd_mux_023_src_endofpacket;                                               // cmd_mux_023:src_endofpacket -> sample_recorder_avalon_slave_agent:cp_endofpacket
	wire         cmd_mux_023_src_valid;                                                     // cmd_mux_023:src_valid -> sample_recorder_avalon_slave_agent:cp_valid
	wire         cmd_mux_023_src_startofpacket;                                             // cmd_mux_023:src_startofpacket -> sample_recorder_avalon_slave_agent:cp_startofpacket
	wire  [95:0] cmd_mux_023_src_data;                                                      // cmd_mux_023:src_data -> sample_recorder_avalon_slave_agent:cp_data
	wire  [24:0] cmd_mux_023_src_channel;                                                   // cmd_mux_023:src_channel -> sample_recorder_avalon_slave_agent:cp_channel
	wire         cmd_mux_023_src_ready;                                                     // sample_recorder_avalon_slave_agent:cp_ready -> cmd_mux_023:src_ready
	wire         sample_recorder_avalon_slave_1_agent_m0_waitrequest;                       // sample_recorder_avalon_slave_1_translator:uav_waitrequest -> sample_recorder_avalon_slave_1_agent:m0_waitrequest
	wire   [2:0] sample_recorder_avalon_slave_1_agent_m0_burstcount;                        // sample_recorder_avalon_slave_1_agent:m0_burstcount -> sample_recorder_avalon_slave_1_translator:uav_burstcount
	wire  [31:0] sample_recorder_avalon_slave_1_agent_m0_writedata;                         // sample_recorder_avalon_slave_1_agent:m0_writedata -> sample_recorder_avalon_slave_1_translator:uav_writedata
	wire  [15:0] sample_recorder_avalon_slave_1_agent_m0_address;                           // sample_recorder_avalon_slave_1_agent:m0_address -> sample_recorder_avalon_slave_1_translator:uav_address
	wire         sample_recorder_avalon_slave_1_agent_m0_write;                             // sample_recorder_avalon_slave_1_agent:m0_write -> sample_recorder_avalon_slave_1_translator:uav_write
	wire         sample_recorder_avalon_slave_1_agent_m0_lock;                              // sample_recorder_avalon_slave_1_agent:m0_lock -> sample_recorder_avalon_slave_1_translator:uav_lock
	wire         sample_recorder_avalon_slave_1_agent_m0_read;                              // sample_recorder_avalon_slave_1_agent:m0_read -> sample_recorder_avalon_slave_1_translator:uav_read
	wire  [31:0] sample_recorder_avalon_slave_1_agent_m0_readdata;                          // sample_recorder_avalon_slave_1_translator:uav_readdata -> sample_recorder_avalon_slave_1_agent:m0_readdata
	wire         sample_recorder_avalon_slave_1_agent_m0_readdatavalid;                     // sample_recorder_avalon_slave_1_translator:uav_readdatavalid -> sample_recorder_avalon_slave_1_agent:m0_readdatavalid
	wire         sample_recorder_avalon_slave_1_agent_m0_debugaccess;                       // sample_recorder_avalon_slave_1_agent:m0_debugaccess -> sample_recorder_avalon_slave_1_translator:uav_debugaccess
	wire   [3:0] sample_recorder_avalon_slave_1_agent_m0_byteenable;                        // sample_recorder_avalon_slave_1_agent:m0_byteenable -> sample_recorder_avalon_slave_1_translator:uav_byteenable
	wire         sample_recorder_avalon_slave_1_agent_rf_source_endofpacket;                // sample_recorder_avalon_slave_1_agent:rf_source_endofpacket -> sample_recorder_avalon_slave_1_agent_rsp_fifo:in_endofpacket
	wire         sample_recorder_avalon_slave_1_agent_rf_source_valid;                      // sample_recorder_avalon_slave_1_agent:rf_source_valid -> sample_recorder_avalon_slave_1_agent_rsp_fifo:in_valid
	wire         sample_recorder_avalon_slave_1_agent_rf_source_startofpacket;              // sample_recorder_avalon_slave_1_agent:rf_source_startofpacket -> sample_recorder_avalon_slave_1_agent_rsp_fifo:in_startofpacket
	wire  [96:0] sample_recorder_avalon_slave_1_agent_rf_source_data;                       // sample_recorder_avalon_slave_1_agent:rf_source_data -> sample_recorder_avalon_slave_1_agent_rsp_fifo:in_data
	wire         sample_recorder_avalon_slave_1_agent_rf_source_ready;                      // sample_recorder_avalon_slave_1_agent_rsp_fifo:in_ready -> sample_recorder_avalon_slave_1_agent:rf_source_ready
	wire         sample_recorder_avalon_slave_1_agent_rsp_fifo_out_endofpacket;             // sample_recorder_avalon_slave_1_agent_rsp_fifo:out_endofpacket -> sample_recorder_avalon_slave_1_agent:rf_sink_endofpacket
	wire         sample_recorder_avalon_slave_1_agent_rsp_fifo_out_valid;                   // sample_recorder_avalon_slave_1_agent_rsp_fifo:out_valid -> sample_recorder_avalon_slave_1_agent:rf_sink_valid
	wire         sample_recorder_avalon_slave_1_agent_rsp_fifo_out_startofpacket;           // sample_recorder_avalon_slave_1_agent_rsp_fifo:out_startofpacket -> sample_recorder_avalon_slave_1_agent:rf_sink_startofpacket
	wire  [96:0] sample_recorder_avalon_slave_1_agent_rsp_fifo_out_data;                    // sample_recorder_avalon_slave_1_agent_rsp_fifo:out_data -> sample_recorder_avalon_slave_1_agent:rf_sink_data
	wire         sample_recorder_avalon_slave_1_agent_rsp_fifo_out_ready;                   // sample_recorder_avalon_slave_1_agent:rf_sink_ready -> sample_recorder_avalon_slave_1_agent_rsp_fifo:out_ready
	wire         sample_recorder_avalon_slave_1_agent_rdata_fifo_src_valid;                 // sample_recorder_avalon_slave_1_agent:rdata_fifo_src_valid -> sample_recorder_avalon_slave_1_agent:rdata_fifo_sink_valid
	wire  [33:0] sample_recorder_avalon_slave_1_agent_rdata_fifo_src_data;                  // sample_recorder_avalon_slave_1_agent:rdata_fifo_src_data -> sample_recorder_avalon_slave_1_agent:rdata_fifo_sink_data
	wire         sample_recorder_avalon_slave_1_agent_rdata_fifo_src_ready;                 // sample_recorder_avalon_slave_1_agent:rdata_fifo_sink_ready -> sample_recorder_avalon_slave_1_agent:rdata_fifo_src_ready
	wire         cmd_mux_024_src_endofpacket;                                               // cmd_mux_024:src_endofpacket -> sample_recorder_avalon_slave_1_agent:cp_endofpacket
	wire         cmd_mux_024_src_valid;                                                     // cmd_mux_024:src_valid -> sample_recorder_avalon_slave_1_agent:cp_valid
	wire         cmd_mux_024_src_startofpacket;                                             // cmd_mux_024:src_startofpacket -> sample_recorder_avalon_slave_1_agent:cp_startofpacket
	wire  [95:0] cmd_mux_024_src_data;                                                      // cmd_mux_024:src_data -> sample_recorder_avalon_slave_1_agent:cp_data
	wire  [24:0] cmd_mux_024_src_channel;                                                   // cmd_mux_024:src_channel -> sample_recorder_avalon_slave_1_agent:cp_channel
	wire         cmd_mux_024_src_ready;                                                     // sample_recorder_avalon_slave_1_agent:cp_ready -> cmd_mux_024:src_ready
	wire         cpu_instruction_master_agent_cp_endofpacket;                               // cpu_instruction_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire         cpu_instruction_master_agent_cp_valid;                                     // cpu_instruction_master_agent:cp_valid -> router:sink_valid
	wire         cpu_instruction_master_agent_cp_startofpacket;                             // cpu_instruction_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire  [95:0] cpu_instruction_master_agent_cp_data;                                      // cpu_instruction_master_agent:cp_data -> router:sink_data
	wire         cpu_instruction_master_agent_cp_ready;                                     // router:sink_ready -> cpu_instruction_master_agent:cp_ready
	wire         cpu_data_master_agent_cp_endofpacket;                                      // cpu_data_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire         cpu_data_master_agent_cp_valid;                                            // cpu_data_master_agent:cp_valid -> router_001:sink_valid
	wire         cpu_data_master_agent_cp_startofpacket;                                    // cpu_data_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire  [95:0] cpu_data_master_agent_cp_data;                                             // cpu_data_master_agent:cp_data -> router_001:sink_data
	wire         cpu_data_master_agent_cp_ready;                                            // router_001:sink_ready -> cpu_data_master_agent:cp_ready
	wire         cpu_jtag_debug_module_agent_rp_endofpacket;                                // cpu_jtag_debug_module_agent:rp_endofpacket -> router_002:sink_endofpacket
	wire         cpu_jtag_debug_module_agent_rp_valid;                                      // cpu_jtag_debug_module_agent:rp_valid -> router_002:sink_valid
	wire         cpu_jtag_debug_module_agent_rp_startofpacket;                              // cpu_jtag_debug_module_agent:rp_startofpacket -> router_002:sink_startofpacket
	wire  [95:0] cpu_jtag_debug_module_agent_rp_data;                                       // cpu_jtag_debug_module_agent:rp_data -> router_002:sink_data
	wire         cpu_jtag_debug_module_agent_rp_ready;                                      // router_002:sink_ready -> cpu_jtag_debug_module_agent:rp_ready
	wire         router_002_src_endofpacket;                                                // router_002:src_endofpacket -> rsp_demux:sink_endofpacket
	wire         router_002_src_valid;                                                      // router_002:src_valid -> rsp_demux:sink_valid
	wire         router_002_src_startofpacket;                                              // router_002:src_startofpacket -> rsp_demux:sink_startofpacket
	wire  [95:0] router_002_src_data;                                                       // router_002:src_data -> rsp_demux:sink_data
	wire  [24:0] router_002_src_channel;                                                    // router_002:src_channel -> rsp_demux:sink_channel
	wire         router_002_src_ready;                                                      // rsp_demux:sink_ready -> router_002:src_ready
	wire         ram_cpu_s1_agent_rp_endofpacket;                                           // ram_cpu_s1_agent:rp_endofpacket -> router_003:sink_endofpacket
	wire         ram_cpu_s1_agent_rp_valid;                                                 // ram_cpu_s1_agent:rp_valid -> router_003:sink_valid
	wire         ram_cpu_s1_agent_rp_startofpacket;                                         // ram_cpu_s1_agent:rp_startofpacket -> router_003:sink_startofpacket
	wire  [95:0] ram_cpu_s1_agent_rp_data;                                                  // ram_cpu_s1_agent:rp_data -> router_003:sink_data
	wire         ram_cpu_s1_agent_rp_ready;                                                 // router_003:sink_ready -> ram_cpu_s1_agent:rp_ready
	wire         router_003_src_endofpacket;                                                // router_003:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire         router_003_src_valid;                                                      // router_003:src_valid -> rsp_demux_001:sink_valid
	wire         router_003_src_startofpacket;                                              // router_003:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire  [95:0] router_003_src_data;                                                       // router_003:src_data -> rsp_demux_001:sink_data
	wire  [24:0] router_003_src_channel;                                                    // router_003:src_channel -> rsp_demux_001:sink_channel
	wire         router_003_src_ready;                                                      // rsp_demux_001:sink_ready -> router_003:src_ready
	wire         ram_cpu_s2_agent_rp_endofpacket;                                           // ram_cpu_s2_agent:rp_endofpacket -> router_004:sink_endofpacket
	wire         ram_cpu_s2_agent_rp_valid;                                                 // ram_cpu_s2_agent:rp_valid -> router_004:sink_valid
	wire         ram_cpu_s2_agent_rp_startofpacket;                                         // ram_cpu_s2_agent:rp_startofpacket -> router_004:sink_startofpacket
	wire  [95:0] ram_cpu_s2_agent_rp_data;                                                  // ram_cpu_s2_agent:rp_data -> router_004:sink_data
	wire         ram_cpu_s2_agent_rp_ready;                                                 // router_004:sink_ready -> ram_cpu_s2_agent:rp_ready
	wire         router_004_src_endofpacket;                                                // router_004:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire         router_004_src_valid;                                                      // router_004:src_valid -> rsp_demux_002:sink_valid
	wire         router_004_src_startofpacket;                                              // router_004:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire  [95:0] router_004_src_data;                                                       // router_004:src_data -> rsp_demux_002:sink_data
	wire  [24:0] router_004_src_channel;                                                    // router_004:src_channel -> rsp_demux_002:sink_channel
	wire         router_004_src_ready;                                                      // rsp_demux_002:sink_ready -> router_004:src_ready
	wire         sys_id_control_slave_agent_rp_endofpacket;                                 // sys_id_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire         sys_id_control_slave_agent_rp_valid;                                       // sys_id_control_slave_agent:rp_valid -> router_005:sink_valid
	wire         sys_id_control_slave_agent_rp_startofpacket;                               // sys_id_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire  [95:0] sys_id_control_slave_agent_rp_data;                                        // sys_id_control_slave_agent:rp_data -> router_005:sink_data
	wire         sys_id_control_slave_agent_rp_ready;                                       // router_005:sink_ready -> sys_id_control_slave_agent:rp_ready
	wire         router_005_src_endofpacket;                                                // router_005:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire         router_005_src_valid;                                                      // router_005:src_valid -> rsp_demux_003:sink_valid
	wire         router_005_src_startofpacket;                                              // router_005:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire  [95:0] router_005_src_data;                                                       // router_005:src_data -> rsp_demux_003:sink_data
	wire  [24:0] router_005_src_channel;                                                    // router_005:src_channel -> rsp_demux_003:sink_channel
	wire         router_005_src_ready;                                                      // rsp_demux_003:sink_ready -> router_005:src_ready
	wire         sys_timer_s1_agent_rp_endofpacket;                                         // sys_timer_s1_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire         sys_timer_s1_agent_rp_valid;                                               // sys_timer_s1_agent:rp_valid -> router_006:sink_valid
	wire         sys_timer_s1_agent_rp_startofpacket;                                       // sys_timer_s1_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire  [95:0] sys_timer_s1_agent_rp_data;                                                // sys_timer_s1_agent:rp_data -> router_006:sink_data
	wire         sys_timer_s1_agent_rp_ready;                                               // router_006:sink_ready -> sys_timer_s1_agent:rp_ready
	wire         router_006_src_endofpacket;                                                // router_006:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire         router_006_src_valid;                                                      // router_006:src_valid -> rsp_demux_004:sink_valid
	wire         router_006_src_startofpacket;                                              // router_006:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire  [95:0] router_006_src_data;                                                       // router_006:src_data -> rsp_demux_004:sink_data
	wire  [24:0] router_006_src_channel;                                                    // router_006:src_channel -> rsp_demux_004:sink_channel
	wire         router_006_src_ready;                                                      // rsp_demux_004:sink_ready -> router_006:src_ready
	wire         pc_uart_s1_agent_rp_endofpacket;                                           // pc_uart_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire         pc_uart_s1_agent_rp_valid;                                                 // pc_uart_s1_agent:rp_valid -> router_007:sink_valid
	wire         pc_uart_s1_agent_rp_startofpacket;                                         // pc_uart_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire  [95:0] pc_uart_s1_agent_rp_data;                                                  // pc_uart_s1_agent:rp_data -> router_007:sink_data
	wire         pc_uart_s1_agent_rp_ready;                                                 // router_007:sink_ready -> pc_uart_s1_agent:rp_ready
	wire         router_007_src_endofpacket;                                                // router_007:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire         router_007_src_valid;                                                      // router_007:src_valid -> rsp_demux_005:sink_valid
	wire         router_007_src_startofpacket;                                              // router_007:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire  [95:0] router_007_src_data;                                                       // router_007:src_data -> rsp_demux_005:sink_data
	wire  [24:0] router_007_src_channel;                                                    // router_007:src_channel -> rsp_demux_005:sink_channel
	wire         router_007_src_ready;                                                      // rsp_demux_005:sink_ready -> router_007:src_ready
	wire         leds_port_s1_agent_rp_endofpacket;                                         // leds_port_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire         leds_port_s1_agent_rp_valid;                                               // leds_port_s1_agent:rp_valid -> router_008:sink_valid
	wire         leds_port_s1_agent_rp_startofpacket;                                       // leds_port_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire  [95:0] leds_port_s1_agent_rp_data;                                                // leds_port_s1_agent:rp_data -> router_008:sink_data
	wire         leds_port_s1_agent_rp_ready;                                               // router_008:sink_ready -> leds_port_s1_agent:rp_ready
	wire         router_008_src_endofpacket;                                                // router_008:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire         router_008_src_valid;                                                      // router_008:src_valid -> rsp_demux_006:sink_valid
	wire         router_008_src_startofpacket;                                              // router_008:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire  [95:0] router_008_src_data;                                                       // router_008:src_data -> rsp_demux_006:sink_data
	wire  [24:0] router_008_src_channel;                                                    // router_008:src_channel -> rsp_demux_006:sink_channel
	wire         router_008_src_ready;                                                      // rsp_demux_006:sink_ready -> router_008:src_ready
	wire         i2c_port_s1_agent_rp_endofpacket;                                          // i2c_port_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire         i2c_port_s1_agent_rp_valid;                                                // i2c_port_s1_agent:rp_valid -> router_009:sink_valid
	wire         i2c_port_s1_agent_rp_startofpacket;                                        // i2c_port_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire  [95:0] i2c_port_s1_agent_rp_data;                                                 // i2c_port_s1_agent:rp_data -> router_009:sink_data
	wire         i2c_port_s1_agent_rp_ready;                                                // router_009:sink_ready -> i2c_port_s1_agent:rp_ready
	wire         router_009_src_endofpacket;                                                // router_009:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire         router_009_src_valid;                                                      // router_009:src_valid -> rsp_demux_007:sink_valid
	wire         router_009_src_startofpacket;                                              // router_009:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire  [95:0] router_009_src_data;                                                       // router_009:src_data -> rsp_demux_007:sink_data
	wire  [24:0] router_009_src_channel;                                                    // router_009:src_channel -> rsp_demux_007:sink_channel
	wire         router_009_src_ready;                                                      // rsp_demux_007:sink_ready -> router_009:src_ready
	wire         laser_driver_avalon_slave_0_agent_rp_endofpacket;                          // laser_driver_avalon_slave_0_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire         laser_driver_avalon_slave_0_agent_rp_valid;                                // laser_driver_avalon_slave_0_agent:rp_valid -> router_010:sink_valid
	wire         laser_driver_avalon_slave_0_agent_rp_startofpacket;                        // laser_driver_avalon_slave_0_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire  [95:0] laser_driver_avalon_slave_0_agent_rp_data;                                 // laser_driver_avalon_slave_0_agent:rp_data -> router_010:sink_data
	wire         laser_driver_avalon_slave_0_agent_rp_ready;                                // router_010:sink_ready -> laser_driver_avalon_slave_0_agent:rp_ready
	wire         router_010_src_endofpacket;                                                // router_010:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire         router_010_src_valid;                                                      // router_010:src_valid -> rsp_demux_008:sink_valid
	wire         router_010_src_startofpacket;                                              // router_010:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire  [95:0] router_010_src_data;                                                       // router_010:src_data -> rsp_demux_008:sink_data
	wire  [24:0] router_010_src_channel;                                                    // router_010:src_channel -> rsp_demux_008:sink_channel
	wire         router_010_src_ready;                                                      // rsp_demux_008:sink_ready -> router_010:src_ready
	wire         spi_tdc_avalon_slave_agent_rp_endofpacket;                                 // spi_tdc_avalon_slave_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire         spi_tdc_avalon_slave_agent_rp_valid;                                       // spi_tdc_avalon_slave_agent:rp_valid -> router_011:sink_valid
	wire         spi_tdc_avalon_slave_agent_rp_startofpacket;                               // spi_tdc_avalon_slave_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire  [95:0] spi_tdc_avalon_slave_agent_rp_data;                                        // spi_tdc_avalon_slave_agent:rp_data -> router_011:sink_data
	wire         spi_tdc_avalon_slave_agent_rp_ready;                                       // router_011:sink_ready -> spi_tdc_avalon_slave_agent:rp_ready
	wire         router_011_src_endofpacket;                                                // router_011:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire         router_011_src_valid;                                                      // router_011:src_valid -> rsp_demux_009:sink_valid
	wire         router_011_src_startofpacket;                                              // router_011:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire  [95:0] router_011_src_data;                                                       // router_011:src_data -> rsp_demux_009:sink_data
	wire  [24:0] router_011_src_channel;                                                    // router_011:src_channel -> rsp_demux_009:sink_channel
	wire         router_011_src_ready;                                                      // rsp_demux_009:sink_ready -> router_011:src_ready
	wire         pulse_generator_avalon_slave_agent_rp_endofpacket;                         // pulse_generator_avalon_slave_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire         pulse_generator_avalon_slave_agent_rp_valid;                               // pulse_generator_avalon_slave_agent:rp_valid -> router_012:sink_valid
	wire         pulse_generator_avalon_slave_agent_rp_startofpacket;                       // pulse_generator_avalon_slave_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire  [95:0] pulse_generator_avalon_slave_agent_rp_data;                                // pulse_generator_avalon_slave_agent:rp_data -> router_012:sink_data
	wire         pulse_generator_avalon_slave_agent_rp_ready;                               // router_012:sink_ready -> pulse_generator_avalon_slave_agent:rp_ready
	wire         router_012_src_endofpacket;                                                // router_012:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire         router_012_src_valid;                                                      // router_012:src_valid -> rsp_demux_010:sink_valid
	wire         router_012_src_startofpacket;                                              // router_012:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire  [95:0] router_012_src_data;                                                       // router_012:src_data -> rsp_demux_010:sink_data
	wire  [24:0] router_012_src_channel;                                                    // router_012:src_channel -> rsp_demux_010:sink_channel
	wire         router_012_src_ready;                                                      // rsp_demux_010:sink_ready -> router_012:src_ready
	wire         spi_vga_avalon_slave_agent_rp_endofpacket;                                 // spi_vga_avalon_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire         spi_vga_avalon_slave_agent_rp_valid;                                       // spi_vga_avalon_slave_agent:rp_valid -> router_013:sink_valid
	wire         spi_vga_avalon_slave_agent_rp_startofpacket;                               // spi_vga_avalon_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire  [95:0] spi_vga_avalon_slave_agent_rp_data;                                        // spi_vga_avalon_slave_agent:rp_data -> router_013:sink_data
	wire         spi_vga_avalon_slave_agent_rp_ready;                                       // router_013:sink_ready -> spi_vga_avalon_slave_agent:rp_ready
	wire         router_013_src_endofpacket;                                                // router_013:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire         router_013_src_valid;                                                      // router_013:src_valid -> rsp_demux_011:sink_valid
	wire         router_013_src_startofpacket;                                              // router_013:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire  [95:0] router_013_src_data;                                                       // router_013:src_data -> rsp_demux_011:sink_data
	wire  [24:0] router_013_src_channel;                                                    // router_013:src_channel -> rsp_demux_011:sink_channel
	wire         router_013_src_ready;                                                      // rsp_demux_011:sink_ready -> router_013:src_ready
	wire         rs485_de_s1_agent_rp_endofpacket;                                          // rs485_de_s1_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire         rs485_de_s1_agent_rp_valid;                                                // rs485_de_s1_agent:rp_valid -> router_014:sink_valid
	wire         rs485_de_s1_agent_rp_startofpacket;                                        // rs485_de_s1_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire  [95:0] rs485_de_s1_agent_rp_data;                                                 // rs485_de_s1_agent:rp_data -> router_014:sink_data
	wire         rs485_de_s1_agent_rp_ready;                                                // router_014:sink_ready -> rs485_de_s1_agent:rp_ready
	wire         router_014_src_endofpacket;                                                // router_014:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire         router_014_src_valid;                                                      // router_014:src_valid -> rsp_demux_012:sink_valid
	wire         router_014_src_startofpacket;                                              // router_014:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire  [95:0] router_014_src_data;                                                       // router_014:src_data -> rsp_demux_012:sink_data
	wire  [24:0] router_014_src_channel;                                                    // router_014:src_channel -> rsp_demux_012:sink_channel
	wire         router_014_src_ready;                                                      // rsp_demux_012:sink_ready -> router_014:src_ready
	wire         tdc_enable_s1_agent_rp_endofpacket;                                        // tdc_enable_s1_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire         tdc_enable_s1_agent_rp_valid;                                              // tdc_enable_s1_agent:rp_valid -> router_015:sink_valid
	wire         tdc_enable_s1_agent_rp_startofpacket;                                      // tdc_enable_s1_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire  [95:0] tdc_enable_s1_agent_rp_data;                                               // tdc_enable_s1_agent:rp_data -> router_015:sink_data
	wire         tdc_enable_s1_agent_rp_ready;                                              // router_015:sink_ready -> tdc_enable_s1_agent:rp_ready
	wire         router_015_src_endofpacket;                                                // router_015:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire         router_015_src_valid;                                                      // router_015:src_valid -> rsp_demux_013:sink_valid
	wire         router_015_src_startofpacket;                                              // router_015:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire  [95:0] router_015_src_data;                                                       // router_015:src_data -> rsp_demux_013:sink_data
	wire  [24:0] router_015_src_channel;                                                    // router_015:src_channel -> rsp_demux_013:sink_channel
	wire         router_015_src_ready;                                                      // rsp_demux_013:sink_ready -> router_015:src_ready
	wire         service_timer_s1_agent_rp_endofpacket;                                     // service_timer_s1_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire         service_timer_s1_agent_rp_valid;                                           // service_timer_s1_agent:rp_valid -> router_016:sink_valid
	wire         service_timer_s1_agent_rp_startofpacket;                                   // service_timer_s1_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire  [95:0] service_timer_s1_agent_rp_data;                                            // service_timer_s1_agent:rp_data -> router_016:sink_data
	wire         service_timer_s1_agent_rp_ready;                                           // router_016:sink_ready -> service_timer_s1_agent:rp_ready
	wire         router_016_src_endofpacket;                                                // router_016:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire         router_016_src_valid;                                                      // router_016:src_valid -> rsp_demux_014:sink_valid
	wire         router_016_src_startofpacket;                                              // router_016:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire  [95:0] router_016_src_data;                                                       // router_016:src_data -> rsp_demux_014:sink_data
	wire  [24:0] router_016_src_channel;                                                    // router_016:src_channel -> rsp_demux_014:sink_channel
	wire         router_016_src_ready;                                                      // rsp_demux_014:sink_ready -> router_016:src_ready
	wire         system_mode_s1_agent_rp_endofpacket;                                       // system_mode_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire         system_mode_s1_agent_rp_valid;                                             // system_mode_s1_agent:rp_valid -> router_017:sink_valid
	wire         system_mode_s1_agent_rp_startofpacket;                                     // system_mode_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire  [95:0] system_mode_s1_agent_rp_data;                                              // system_mode_s1_agent:rp_data -> router_017:sink_data
	wire         system_mode_s1_agent_rp_ready;                                             // router_017:sink_ready -> system_mode_s1_agent:rp_ready
	wire         router_017_src_endofpacket;                                                // router_017:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire         router_017_src_valid;                                                      // router_017:src_valid -> rsp_demux_015:sink_valid
	wire         router_017_src_startofpacket;                                              // router_017:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire  [95:0] router_017_src_data;                                                       // router_017:src_data -> rsp_demux_015:sink_data
	wire  [24:0] router_017_src_channel;                                                    // router_017:src_channel -> rsp_demux_015:sink_channel
	wire         router_017_src_ready;                                                      // rsp_demux_015:sink_ready -> router_017:src_ready
	wire         amp_gain_s1_agent_rp_endofpacket;                                          // amp_gain_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire         amp_gain_s1_agent_rp_valid;                                                // amp_gain_s1_agent:rp_valid -> router_018:sink_valid
	wire         amp_gain_s1_agent_rp_startofpacket;                                        // amp_gain_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire  [95:0] amp_gain_s1_agent_rp_data;                                                 // amp_gain_s1_agent:rp_data -> router_018:sink_data
	wire         amp_gain_s1_agent_rp_ready;                                                // router_018:sink_ready -> amp_gain_s1_agent:rp_ready
	wire         router_018_src_endofpacket;                                                // router_018:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire         router_018_src_valid;                                                      // router_018:src_valid -> rsp_demux_016:sink_valid
	wire         router_018_src_startofpacket;                                              // router_018:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire  [95:0] router_018_src_data;                                                       // router_018:src_data -> rsp_demux_016:sink_data
	wire  [24:0] router_018_src_channel;                                                    // router_018:src_channel -> rsp_demux_016:sink_channel
	wire         router_018_src_ready;                                                      // rsp_demux_016:sink_ready -> router_018:src_ready
	wire         apd_overcurrent_s1_agent_rp_endofpacket;                                   // apd_overcurrent_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire         apd_overcurrent_s1_agent_rp_valid;                                         // apd_overcurrent_s1_agent:rp_valid -> router_019:sink_valid
	wire         apd_overcurrent_s1_agent_rp_startofpacket;                                 // apd_overcurrent_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire  [95:0] apd_overcurrent_s1_agent_rp_data;                                          // apd_overcurrent_s1_agent:rp_data -> router_019:sink_data
	wire         apd_overcurrent_s1_agent_rp_ready;                                         // router_019:sink_ready -> apd_overcurrent_s1_agent:rp_ready
	wire         router_019_src_endofpacket;                                                // router_019:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire         router_019_src_valid;                                                      // router_019:src_valid -> rsp_demux_017:sink_valid
	wire         router_019_src_startofpacket;                                              // router_019:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire  [95:0] router_019_src_data;                                                       // router_019:src_data -> rsp_demux_017:sink_data
	wire  [24:0] router_019_src_channel;                                                    // router_019:src_channel -> rsp_demux_017:sink_channel
	wire         router_019_src_ready;                                                      // rsp_demux_017:sink_ready -> router_019:src_ready
	wire         spi_apd_avalon_slave_agent_rp_endofpacket;                                 // spi_apd_avalon_slave_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire         spi_apd_avalon_slave_agent_rp_valid;                                       // spi_apd_avalon_slave_agent:rp_valid -> router_020:sink_valid
	wire         spi_apd_avalon_slave_agent_rp_startofpacket;                               // spi_apd_avalon_slave_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire  [95:0] spi_apd_avalon_slave_agent_rp_data;                                        // spi_apd_avalon_slave_agent:rp_data -> router_020:sink_data
	wire         spi_apd_avalon_slave_agent_rp_ready;                                       // router_020:sink_ready -> spi_apd_avalon_slave_agent:rp_ready
	wire         router_020_src_endofpacket;                                                // router_020:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire         router_020_src_valid;                                                      // router_020:src_valid -> rsp_demux_018:sink_valid
	wire         router_020_src_startofpacket;                                              // router_020:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire  [95:0] router_020_src_data;                                                       // router_020:src_data -> rsp_demux_018:sink_data
	wire  [24:0] router_020_src_channel;                                                    // router_020:src_channel -> rsp_demux_018:sink_channel
	wire         router_020_src_ready;                                                      // rsp_demux_018:sink_ready -> router_020:src_ready
	wire         stepper_atten_avalon_slave_0_agent_rp_endofpacket;                         // stepper_atten_avalon_slave_0_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire         stepper_atten_avalon_slave_0_agent_rp_valid;                               // stepper_atten_avalon_slave_0_agent:rp_valid -> router_021:sink_valid
	wire         stepper_atten_avalon_slave_0_agent_rp_startofpacket;                       // stepper_atten_avalon_slave_0_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire  [95:0] stepper_atten_avalon_slave_0_agent_rp_data;                                // stepper_atten_avalon_slave_0_agent:rp_data -> router_021:sink_data
	wire         stepper_atten_avalon_slave_0_agent_rp_ready;                               // router_021:sink_ready -> stepper_atten_avalon_slave_0_agent:rp_ready
	wire         router_021_src_endofpacket;                                                // router_021:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire         router_021_src_valid;                                                      // router_021:src_valid -> rsp_demux_019:sink_valid
	wire         router_021_src_startofpacket;                                              // router_021:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire  [95:0] router_021_src_data;                                                       // router_021:src_data -> rsp_demux_019:sink_data
	wire  [24:0] router_021_src_channel;                                                    // router_021:src_channel -> rsp_demux_019:sink_channel
	wire         router_021_src_ready;                                                      // rsp_demux_019:sink_ready -> router_021:src_ready
	wire         stepper_iris_avalon_slave_0_agent_rp_endofpacket;                          // stepper_iris_avalon_slave_0_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire         stepper_iris_avalon_slave_0_agent_rp_valid;                                // stepper_iris_avalon_slave_0_agent:rp_valid -> router_022:sink_valid
	wire         stepper_iris_avalon_slave_0_agent_rp_startofpacket;                        // stepper_iris_avalon_slave_0_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire  [95:0] stepper_iris_avalon_slave_0_agent_rp_data;                                 // stepper_iris_avalon_slave_0_agent:rp_data -> router_022:sink_data
	wire         stepper_iris_avalon_slave_0_agent_rp_ready;                                // router_022:sink_ready -> stepper_iris_avalon_slave_0_agent:rp_ready
	wire         router_022_src_endofpacket;                                                // router_022:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire         router_022_src_valid;                                                      // router_022:src_valid -> rsp_demux_020:sink_valid
	wire         router_022_src_startofpacket;                                              // router_022:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire  [95:0] router_022_src_data;                                                       // router_022:src_data -> rsp_demux_020:sink_data
	wire  [24:0] router_022_src_channel;                                                    // router_022:src_channel -> rsp_demux_020:sink_channel
	wire         router_022_src_ready;                                                      // rsp_demux_020:sink_ready -> router_022:src_ready
	wire         laser_charge_avalon_slave_0_agent_rp_endofpacket;                          // laser_charge_avalon_slave_0_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire         laser_charge_avalon_slave_0_agent_rp_valid;                                // laser_charge_avalon_slave_0_agent:rp_valid -> router_023:sink_valid
	wire         laser_charge_avalon_slave_0_agent_rp_startofpacket;                        // laser_charge_avalon_slave_0_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire  [95:0] laser_charge_avalon_slave_0_agent_rp_data;                                 // laser_charge_avalon_slave_0_agent:rp_data -> router_023:sink_data
	wire         laser_charge_avalon_slave_0_agent_rp_ready;                                // router_023:sink_ready -> laser_charge_avalon_slave_0_agent:rp_ready
	wire         router_023_src_endofpacket;                                                // router_023:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire         router_023_src_valid;                                                      // router_023:src_valid -> rsp_demux_021:sink_valid
	wire         router_023_src_startofpacket;                                              // router_023:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire  [95:0] router_023_src_data;                                                       // router_023:src_data -> rsp_demux_021:sink_data
	wire  [24:0] router_023_src_channel;                                                    // router_023:src_channel -> rsp_demux_021:sink_channel
	wire         router_023_src_ready;                                                      // rsp_demux_021:sink_ready -> router_023:src_ready
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rp_endofpacket;                   // tdc_start_pulse_gen_avalon_slave_0_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rp_valid;                         // tdc_start_pulse_gen_avalon_slave_0_agent:rp_valid -> router_024:sink_valid
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rp_startofpacket;                 // tdc_start_pulse_gen_avalon_slave_0_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire  [95:0] tdc_start_pulse_gen_avalon_slave_0_agent_rp_data;                          // tdc_start_pulse_gen_avalon_slave_0_agent:rp_data -> router_024:sink_data
	wire         tdc_start_pulse_gen_avalon_slave_0_agent_rp_ready;                         // router_024:sink_ready -> tdc_start_pulse_gen_avalon_slave_0_agent:rp_ready
	wire         router_024_src_endofpacket;                                                // router_024:src_endofpacket -> rsp_demux_022:sink_endofpacket
	wire         router_024_src_valid;                                                      // router_024:src_valid -> rsp_demux_022:sink_valid
	wire         router_024_src_startofpacket;                                              // router_024:src_startofpacket -> rsp_demux_022:sink_startofpacket
	wire  [95:0] router_024_src_data;                                                       // router_024:src_data -> rsp_demux_022:sink_data
	wire  [24:0] router_024_src_channel;                                                    // router_024:src_channel -> rsp_demux_022:sink_channel
	wire         router_024_src_ready;                                                      // rsp_demux_022:sink_ready -> router_024:src_ready
	wire         sample_recorder_avalon_slave_agent_rp_endofpacket;                         // sample_recorder_avalon_slave_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire         sample_recorder_avalon_slave_agent_rp_valid;                               // sample_recorder_avalon_slave_agent:rp_valid -> router_025:sink_valid
	wire         sample_recorder_avalon_slave_agent_rp_startofpacket;                       // sample_recorder_avalon_slave_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire  [95:0] sample_recorder_avalon_slave_agent_rp_data;                                // sample_recorder_avalon_slave_agent:rp_data -> router_025:sink_data
	wire         sample_recorder_avalon_slave_agent_rp_ready;                               // router_025:sink_ready -> sample_recorder_avalon_slave_agent:rp_ready
	wire         router_025_src_endofpacket;                                                // router_025:src_endofpacket -> rsp_demux_023:sink_endofpacket
	wire         router_025_src_valid;                                                      // router_025:src_valid -> rsp_demux_023:sink_valid
	wire         router_025_src_startofpacket;                                              // router_025:src_startofpacket -> rsp_demux_023:sink_startofpacket
	wire  [95:0] router_025_src_data;                                                       // router_025:src_data -> rsp_demux_023:sink_data
	wire  [24:0] router_025_src_channel;                                                    // router_025:src_channel -> rsp_demux_023:sink_channel
	wire         router_025_src_ready;                                                      // rsp_demux_023:sink_ready -> router_025:src_ready
	wire         sample_recorder_avalon_slave_1_agent_rp_endofpacket;                       // sample_recorder_avalon_slave_1_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire         sample_recorder_avalon_slave_1_agent_rp_valid;                             // sample_recorder_avalon_slave_1_agent:rp_valid -> router_026:sink_valid
	wire         sample_recorder_avalon_slave_1_agent_rp_startofpacket;                     // sample_recorder_avalon_slave_1_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire  [95:0] sample_recorder_avalon_slave_1_agent_rp_data;                              // sample_recorder_avalon_slave_1_agent:rp_data -> router_026:sink_data
	wire         sample_recorder_avalon_slave_1_agent_rp_ready;                             // router_026:sink_ready -> sample_recorder_avalon_slave_1_agent:rp_ready
	wire         router_026_src_endofpacket;                                                // router_026:src_endofpacket -> rsp_demux_024:sink_endofpacket
	wire         router_026_src_valid;                                                      // router_026:src_valid -> rsp_demux_024:sink_valid
	wire         router_026_src_startofpacket;                                              // router_026:src_startofpacket -> rsp_demux_024:sink_startofpacket
	wire  [95:0] router_026_src_data;                                                       // router_026:src_data -> rsp_demux_024:sink_data
	wire  [24:0] router_026_src_channel;                                                    // router_026:src_channel -> rsp_demux_024:sink_channel
	wire         router_026_src_ready;                                                      // rsp_demux_024:sink_ready -> router_026:src_ready
	wire         router_src_endofpacket;                                                    // router:src_endofpacket -> cpu_instruction_master_limiter:cmd_sink_endofpacket
	wire         router_src_valid;                                                          // router:src_valid -> cpu_instruction_master_limiter:cmd_sink_valid
	wire         router_src_startofpacket;                                                  // router:src_startofpacket -> cpu_instruction_master_limiter:cmd_sink_startofpacket
	wire  [95:0] router_src_data;                                                           // router:src_data -> cpu_instruction_master_limiter:cmd_sink_data
	wire  [24:0] router_src_channel;                                                        // router:src_channel -> cpu_instruction_master_limiter:cmd_sink_channel
	wire         router_src_ready;                                                          // cpu_instruction_master_limiter:cmd_sink_ready -> router:src_ready
	wire         cpu_instruction_master_limiter_cmd_src_endofpacket;                        // cpu_instruction_master_limiter:cmd_src_endofpacket -> cmd_demux:sink_endofpacket
	wire         cpu_instruction_master_limiter_cmd_src_startofpacket;                      // cpu_instruction_master_limiter:cmd_src_startofpacket -> cmd_demux:sink_startofpacket
	wire  [95:0] cpu_instruction_master_limiter_cmd_src_data;                               // cpu_instruction_master_limiter:cmd_src_data -> cmd_demux:sink_data
	wire  [24:0] cpu_instruction_master_limiter_cmd_src_channel;                            // cpu_instruction_master_limiter:cmd_src_channel -> cmd_demux:sink_channel
	wire         cpu_instruction_master_limiter_cmd_src_ready;                              // cmd_demux:sink_ready -> cpu_instruction_master_limiter:cmd_src_ready
	wire         rsp_mux_src_endofpacket;                                                   // rsp_mux:src_endofpacket -> cpu_instruction_master_limiter:rsp_sink_endofpacket
	wire         rsp_mux_src_valid;                                                         // rsp_mux:src_valid -> cpu_instruction_master_limiter:rsp_sink_valid
	wire         rsp_mux_src_startofpacket;                                                 // rsp_mux:src_startofpacket -> cpu_instruction_master_limiter:rsp_sink_startofpacket
	wire  [95:0] rsp_mux_src_data;                                                          // rsp_mux:src_data -> cpu_instruction_master_limiter:rsp_sink_data
	wire  [24:0] rsp_mux_src_channel;                                                       // rsp_mux:src_channel -> cpu_instruction_master_limiter:rsp_sink_channel
	wire         rsp_mux_src_ready;                                                         // cpu_instruction_master_limiter:rsp_sink_ready -> rsp_mux:src_ready
	wire         cpu_instruction_master_limiter_rsp_src_endofpacket;                        // cpu_instruction_master_limiter:rsp_src_endofpacket -> cpu_instruction_master_agent:rp_endofpacket
	wire         cpu_instruction_master_limiter_rsp_src_valid;                              // cpu_instruction_master_limiter:rsp_src_valid -> cpu_instruction_master_agent:rp_valid
	wire         cpu_instruction_master_limiter_rsp_src_startofpacket;                      // cpu_instruction_master_limiter:rsp_src_startofpacket -> cpu_instruction_master_agent:rp_startofpacket
	wire  [95:0] cpu_instruction_master_limiter_rsp_src_data;                               // cpu_instruction_master_limiter:rsp_src_data -> cpu_instruction_master_agent:rp_data
	wire  [24:0] cpu_instruction_master_limiter_rsp_src_channel;                            // cpu_instruction_master_limiter:rsp_src_channel -> cpu_instruction_master_agent:rp_channel
	wire         cpu_instruction_master_limiter_rsp_src_ready;                              // cpu_instruction_master_agent:rp_ready -> cpu_instruction_master_limiter:rsp_src_ready
	wire         router_001_src_endofpacket;                                                // router_001:src_endofpacket -> cpu_data_master_limiter:cmd_sink_endofpacket
	wire         router_001_src_valid;                                                      // router_001:src_valid -> cpu_data_master_limiter:cmd_sink_valid
	wire         router_001_src_startofpacket;                                              // router_001:src_startofpacket -> cpu_data_master_limiter:cmd_sink_startofpacket
	wire  [95:0] router_001_src_data;                                                       // router_001:src_data -> cpu_data_master_limiter:cmd_sink_data
	wire  [24:0] router_001_src_channel;                                                    // router_001:src_channel -> cpu_data_master_limiter:cmd_sink_channel
	wire         router_001_src_ready;                                                      // cpu_data_master_limiter:cmd_sink_ready -> router_001:src_ready
	wire         cpu_data_master_limiter_cmd_src_endofpacket;                               // cpu_data_master_limiter:cmd_src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire         cpu_data_master_limiter_cmd_src_startofpacket;                             // cpu_data_master_limiter:cmd_src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire  [95:0] cpu_data_master_limiter_cmd_src_data;                                      // cpu_data_master_limiter:cmd_src_data -> cmd_demux_001:sink_data
	wire  [24:0] cpu_data_master_limiter_cmd_src_channel;                                   // cpu_data_master_limiter:cmd_src_channel -> cmd_demux_001:sink_channel
	wire         cpu_data_master_limiter_cmd_src_ready;                                     // cmd_demux_001:sink_ready -> cpu_data_master_limiter:cmd_src_ready
	wire         rsp_mux_001_src_endofpacket;                                               // rsp_mux_001:src_endofpacket -> cpu_data_master_limiter:rsp_sink_endofpacket
	wire         rsp_mux_001_src_valid;                                                     // rsp_mux_001:src_valid -> cpu_data_master_limiter:rsp_sink_valid
	wire         rsp_mux_001_src_startofpacket;                                             // rsp_mux_001:src_startofpacket -> cpu_data_master_limiter:rsp_sink_startofpacket
	wire  [95:0] rsp_mux_001_src_data;                                                      // rsp_mux_001:src_data -> cpu_data_master_limiter:rsp_sink_data
	wire  [24:0] rsp_mux_001_src_channel;                                                   // rsp_mux_001:src_channel -> cpu_data_master_limiter:rsp_sink_channel
	wire         rsp_mux_001_src_ready;                                                     // cpu_data_master_limiter:rsp_sink_ready -> rsp_mux_001:src_ready
	wire         cpu_data_master_limiter_rsp_src_endofpacket;                               // cpu_data_master_limiter:rsp_src_endofpacket -> cpu_data_master_agent:rp_endofpacket
	wire         cpu_data_master_limiter_rsp_src_valid;                                     // cpu_data_master_limiter:rsp_src_valid -> cpu_data_master_agent:rp_valid
	wire         cpu_data_master_limiter_rsp_src_startofpacket;                             // cpu_data_master_limiter:rsp_src_startofpacket -> cpu_data_master_agent:rp_startofpacket
	wire  [95:0] cpu_data_master_limiter_rsp_src_data;                                      // cpu_data_master_limiter:rsp_src_data -> cpu_data_master_agent:rp_data
	wire  [24:0] cpu_data_master_limiter_rsp_src_channel;                                   // cpu_data_master_limiter:rsp_src_channel -> cpu_data_master_agent:rp_channel
	wire         cpu_data_master_limiter_rsp_src_ready;                                     // cpu_data_master_agent:rp_ready -> cpu_data_master_limiter:rsp_src_ready
	wire         cmd_demux_src0_endofpacket;                                                // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire         cmd_demux_src0_valid;                                                      // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire         cmd_demux_src0_startofpacket;                                              // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire  [95:0] cmd_demux_src0_data;                                                       // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire  [24:0] cmd_demux_src0_channel;                                                    // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire         cmd_demux_src0_ready;                                                      // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire         cmd_demux_src1_endofpacket;                                                // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire         cmd_demux_src1_valid;                                                      // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire         cmd_demux_src1_startofpacket;                                              // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire  [95:0] cmd_demux_src1_data;                                                       // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire  [24:0] cmd_demux_src1_channel;                                                    // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire         cmd_demux_src1_ready;                                                      // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire         cmd_demux_001_src0_endofpacket;                                            // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire         cmd_demux_001_src0_valid;                                                  // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire         cmd_demux_001_src0_startofpacket;                                          // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire  [95:0] cmd_demux_001_src0_data;                                                   // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire  [24:0] cmd_demux_001_src0_channel;                                                // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire         cmd_demux_001_src0_ready;                                                  // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire         cmd_demux_001_src1_endofpacket;                                            // cmd_demux_001:src1_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire         cmd_demux_001_src1_valid;                                                  // cmd_demux_001:src1_valid -> cmd_mux_002:sink0_valid
	wire         cmd_demux_001_src1_startofpacket;                                          // cmd_demux_001:src1_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src1_data;                                                   // cmd_demux_001:src1_data -> cmd_mux_002:sink0_data
	wire  [24:0] cmd_demux_001_src1_channel;                                                // cmd_demux_001:src1_channel -> cmd_mux_002:sink0_channel
	wire         cmd_demux_001_src1_ready;                                                  // cmd_mux_002:sink0_ready -> cmd_demux_001:src1_ready
	wire         cmd_demux_001_src2_endofpacket;                                            // cmd_demux_001:src2_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire         cmd_demux_001_src2_valid;                                                  // cmd_demux_001:src2_valid -> cmd_mux_003:sink0_valid
	wire         cmd_demux_001_src2_startofpacket;                                          // cmd_demux_001:src2_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src2_data;                                                   // cmd_demux_001:src2_data -> cmd_mux_003:sink0_data
	wire  [24:0] cmd_demux_001_src2_channel;                                                // cmd_demux_001:src2_channel -> cmd_mux_003:sink0_channel
	wire         cmd_demux_001_src2_ready;                                                  // cmd_mux_003:sink0_ready -> cmd_demux_001:src2_ready
	wire         cmd_demux_001_src3_endofpacket;                                            // cmd_demux_001:src3_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire         cmd_demux_001_src3_valid;                                                  // cmd_demux_001:src3_valid -> cmd_mux_004:sink0_valid
	wire         cmd_demux_001_src3_startofpacket;                                          // cmd_demux_001:src3_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src3_data;                                                   // cmd_demux_001:src3_data -> cmd_mux_004:sink0_data
	wire  [24:0] cmd_demux_001_src3_channel;                                                // cmd_demux_001:src3_channel -> cmd_mux_004:sink0_channel
	wire         cmd_demux_001_src3_ready;                                                  // cmd_mux_004:sink0_ready -> cmd_demux_001:src3_ready
	wire         cmd_demux_001_src4_endofpacket;                                            // cmd_demux_001:src4_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire         cmd_demux_001_src4_valid;                                                  // cmd_demux_001:src4_valid -> cmd_mux_005:sink0_valid
	wire         cmd_demux_001_src4_startofpacket;                                          // cmd_demux_001:src4_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src4_data;                                                   // cmd_demux_001:src4_data -> cmd_mux_005:sink0_data
	wire  [24:0] cmd_demux_001_src4_channel;                                                // cmd_demux_001:src4_channel -> cmd_mux_005:sink0_channel
	wire         cmd_demux_001_src4_ready;                                                  // cmd_mux_005:sink0_ready -> cmd_demux_001:src4_ready
	wire         cmd_demux_001_src5_endofpacket;                                            // cmd_demux_001:src5_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire         cmd_demux_001_src5_valid;                                                  // cmd_demux_001:src5_valid -> cmd_mux_006:sink0_valid
	wire         cmd_demux_001_src5_startofpacket;                                          // cmd_demux_001:src5_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src5_data;                                                   // cmd_demux_001:src5_data -> cmd_mux_006:sink0_data
	wire  [24:0] cmd_demux_001_src5_channel;                                                // cmd_demux_001:src5_channel -> cmd_mux_006:sink0_channel
	wire         cmd_demux_001_src5_ready;                                                  // cmd_mux_006:sink0_ready -> cmd_demux_001:src5_ready
	wire         cmd_demux_001_src6_endofpacket;                                            // cmd_demux_001:src6_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire         cmd_demux_001_src6_valid;                                                  // cmd_demux_001:src6_valid -> cmd_mux_007:sink0_valid
	wire         cmd_demux_001_src6_startofpacket;                                          // cmd_demux_001:src6_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src6_data;                                                   // cmd_demux_001:src6_data -> cmd_mux_007:sink0_data
	wire  [24:0] cmd_demux_001_src6_channel;                                                // cmd_demux_001:src6_channel -> cmd_mux_007:sink0_channel
	wire         cmd_demux_001_src6_ready;                                                  // cmd_mux_007:sink0_ready -> cmd_demux_001:src6_ready
	wire         cmd_demux_001_src7_endofpacket;                                            // cmd_demux_001:src7_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire         cmd_demux_001_src7_valid;                                                  // cmd_demux_001:src7_valid -> cmd_mux_008:sink0_valid
	wire         cmd_demux_001_src7_startofpacket;                                          // cmd_demux_001:src7_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src7_data;                                                   // cmd_demux_001:src7_data -> cmd_mux_008:sink0_data
	wire  [24:0] cmd_demux_001_src7_channel;                                                // cmd_demux_001:src7_channel -> cmd_mux_008:sink0_channel
	wire         cmd_demux_001_src7_ready;                                                  // cmd_mux_008:sink0_ready -> cmd_demux_001:src7_ready
	wire         cmd_demux_001_src8_endofpacket;                                            // cmd_demux_001:src8_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire         cmd_demux_001_src8_valid;                                                  // cmd_demux_001:src8_valid -> cmd_mux_009:sink0_valid
	wire         cmd_demux_001_src8_startofpacket;                                          // cmd_demux_001:src8_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src8_data;                                                   // cmd_demux_001:src8_data -> cmd_mux_009:sink0_data
	wire  [24:0] cmd_demux_001_src8_channel;                                                // cmd_demux_001:src8_channel -> cmd_mux_009:sink0_channel
	wire         cmd_demux_001_src8_ready;                                                  // cmd_mux_009:sink0_ready -> cmd_demux_001:src8_ready
	wire         cmd_demux_001_src9_endofpacket;                                            // cmd_demux_001:src9_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire         cmd_demux_001_src9_valid;                                                  // cmd_demux_001:src9_valid -> cmd_mux_010:sink0_valid
	wire         cmd_demux_001_src9_startofpacket;                                          // cmd_demux_001:src9_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src9_data;                                                   // cmd_demux_001:src9_data -> cmd_mux_010:sink0_data
	wire  [24:0] cmd_demux_001_src9_channel;                                                // cmd_demux_001:src9_channel -> cmd_mux_010:sink0_channel
	wire         cmd_demux_001_src9_ready;                                                  // cmd_mux_010:sink0_ready -> cmd_demux_001:src9_ready
	wire         cmd_demux_001_src10_endofpacket;                                           // cmd_demux_001:src10_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire         cmd_demux_001_src10_valid;                                                 // cmd_demux_001:src10_valid -> cmd_mux_011:sink0_valid
	wire         cmd_demux_001_src10_startofpacket;                                         // cmd_demux_001:src10_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src10_data;                                                  // cmd_demux_001:src10_data -> cmd_mux_011:sink0_data
	wire  [24:0] cmd_demux_001_src10_channel;                                               // cmd_demux_001:src10_channel -> cmd_mux_011:sink0_channel
	wire         cmd_demux_001_src10_ready;                                                 // cmd_mux_011:sink0_ready -> cmd_demux_001:src10_ready
	wire         cmd_demux_001_src11_endofpacket;                                           // cmd_demux_001:src11_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire         cmd_demux_001_src11_valid;                                                 // cmd_demux_001:src11_valid -> cmd_mux_012:sink0_valid
	wire         cmd_demux_001_src11_startofpacket;                                         // cmd_demux_001:src11_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src11_data;                                                  // cmd_demux_001:src11_data -> cmd_mux_012:sink0_data
	wire  [24:0] cmd_demux_001_src11_channel;                                               // cmd_demux_001:src11_channel -> cmd_mux_012:sink0_channel
	wire         cmd_demux_001_src11_ready;                                                 // cmd_mux_012:sink0_ready -> cmd_demux_001:src11_ready
	wire         cmd_demux_001_src12_endofpacket;                                           // cmd_demux_001:src12_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire         cmd_demux_001_src12_valid;                                                 // cmd_demux_001:src12_valid -> cmd_mux_013:sink0_valid
	wire         cmd_demux_001_src12_startofpacket;                                         // cmd_demux_001:src12_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src12_data;                                                  // cmd_demux_001:src12_data -> cmd_mux_013:sink0_data
	wire  [24:0] cmd_demux_001_src12_channel;                                               // cmd_demux_001:src12_channel -> cmd_mux_013:sink0_channel
	wire         cmd_demux_001_src12_ready;                                                 // cmd_mux_013:sink0_ready -> cmd_demux_001:src12_ready
	wire         cmd_demux_001_src13_endofpacket;                                           // cmd_demux_001:src13_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire         cmd_demux_001_src13_valid;                                                 // cmd_demux_001:src13_valid -> cmd_mux_014:sink0_valid
	wire         cmd_demux_001_src13_startofpacket;                                         // cmd_demux_001:src13_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src13_data;                                                  // cmd_demux_001:src13_data -> cmd_mux_014:sink0_data
	wire  [24:0] cmd_demux_001_src13_channel;                                               // cmd_demux_001:src13_channel -> cmd_mux_014:sink0_channel
	wire         cmd_demux_001_src13_ready;                                                 // cmd_mux_014:sink0_ready -> cmd_demux_001:src13_ready
	wire         cmd_demux_001_src14_endofpacket;                                           // cmd_demux_001:src14_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire         cmd_demux_001_src14_valid;                                                 // cmd_demux_001:src14_valid -> cmd_mux_015:sink0_valid
	wire         cmd_demux_001_src14_startofpacket;                                         // cmd_demux_001:src14_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src14_data;                                                  // cmd_demux_001:src14_data -> cmd_mux_015:sink0_data
	wire  [24:0] cmd_demux_001_src14_channel;                                               // cmd_demux_001:src14_channel -> cmd_mux_015:sink0_channel
	wire         cmd_demux_001_src14_ready;                                                 // cmd_mux_015:sink0_ready -> cmd_demux_001:src14_ready
	wire         cmd_demux_001_src15_endofpacket;                                           // cmd_demux_001:src15_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire         cmd_demux_001_src15_valid;                                                 // cmd_demux_001:src15_valid -> cmd_mux_016:sink0_valid
	wire         cmd_demux_001_src15_startofpacket;                                         // cmd_demux_001:src15_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src15_data;                                                  // cmd_demux_001:src15_data -> cmd_mux_016:sink0_data
	wire  [24:0] cmd_demux_001_src15_channel;                                               // cmd_demux_001:src15_channel -> cmd_mux_016:sink0_channel
	wire         cmd_demux_001_src15_ready;                                                 // cmd_mux_016:sink0_ready -> cmd_demux_001:src15_ready
	wire         cmd_demux_001_src16_endofpacket;                                           // cmd_demux_001:src16_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire         cmd_demux_001_src16_valid;                                                 // cmd_demux_001:src16_valid -> cmd_mux_017:sink0_valid
	wire         cmd_demux_001_src16_startofpacket;                                         // cmd_demux_001:src16_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src16_data;                                                  // cmd_demux_001:src16_data -> cmd_mux_017:sink0_data
	wire  [24:0] cmd_demux_001_src16_channel;                                               // cmd_demux_001:src16_channel -> cmd_mux_017:sink0_channel
	wire         cmd_demux_001_src16_ready;                                                 // cmd_mux_017:sink0_ready -> cmd_demux_001:src16_ready
	wire         cmd_demux_001_src17_endofpacket;                                           // cmd_demux_001:src17_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire         cmd_demux_001_src17_valid;                                                 // cmd_demux_001:src17_valid -> cmd_mux_018:sink0_valid
	wire         cmd_demux_001_src17_startofpacket;                                         // cmd_demux_001:src17_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src17_data;                                                  // cmd_demux_001:src17_data -> cmd_mux_018:sink0_data
	wire  [24:0] cmd_demux_001_src17_channel;                                               // cmd_demux_001:src17_channel -> cmd_mux_018:sink0_channel
	wire         cmd_demux_001_src17_ready;                                                 // cmd_mux_018:sink0_ready -> cmd_demux_001:src17_ready
	wire         cmd_demux_001_src18_endofpacket;                                           // cmd_demux_001:src18_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire         cmd_demux_001_src18_valid;                                                 // cmd_demux_001:src18_valid -> cmd_mux_019:sink0_valid
	wire         cmd_demux_001_src18_startofpacket;                                         // cmd_demux_001:src18_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src18_data;                                                  // cmd_demux_001:src18_data -> cmd_mux_019:sink0_data
	wire  [24:0] cmd_demux_001_src18_channel;                                               // cmd_demux_001:src18_channel -> cmd_mux_019:sink0_channel
	wire         cmd_demux_001_src18_ready;                                                 // cmd_mux_019:sink0_ready -> cmd_demux_001:src18_ready
	wire         cmd_demux_001_src19_endofpacket;                                           // cmd_demux_001:src19_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire         cmd_demux_001_src19_valid;                                                 // cmd_demux_001:src19_valid -> cmd_mux_020:sink0_valid
	wire         cmd_demux_001_src19_startofpacket;                                         // cmd_demux_001:src19_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src19_data;                                                  // cmd_demux_001:src19_data -> cmd_mux_020:sink0_data
	wire  [24:0] cmd_demux_001_src19_channel;                                               // cmd_demux_001:src19_channel -> cmd_mux_020:sink0_channel
	wire         cmd_demux_001_src19_ready;                                                 // cmd_mux_020:sink0_ready -> cmd_demux_001:src19_ready
	wire         cmd_demux_001_src20_endofpacket;                                           // cmd_demux_001:src20_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire         cmd_demux_001_src20_valid;                                                 // cmd_demux_001:src20_valid -> cmd_mux_021:sink0_valid
	wire         cmd_demux_001_src20_startofpacket;                                         // cmd_demux_001:src20_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src20_data;                                                  // cmd_demux_001:src20_data -> cmd_mux_021:sink0_data
	wire  [24:0] cmd_demux_001_src20_channel;                                               // cmd_demux_001:src20_channel -> cmd_mux_021:sink0_channel
	wire         cmd_demux_001_src20_ready;                                                 // cmd_mux_021:sink0_ready -> cmd_demux_001:src20_ready
	wire         cmd_demux_001_src21_endofpacket;                                           // cmd_demux_001:src21_endofpacket -> cmd_mux_022:sink0_endofpacket
	wire         cmd_demux_001_src21_valid;                                                 // cmd_demux_001:src21_valid -> cmd_mux_022:sink0_valid
	wire         cmd_demux_001_src21_startofpacket;                                         // cmd_demux_001:src21_startofpacket -> cmd_mux_022:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src21_data;                                                  // cmd_demux_001:src21_data -> cmd_mux_022:sink0_data
	wire  [24:0] cmd_demux_001_src21_channel;                                               // cmd_demux_001:src21_channel -> cmd_mux_022:sink0_channel
	wire         cmd_demux_001_src21_ready;                                                 // cmd_mux_022:sink0_ready -> cmd_demux_001:src21_ready
	wire         cmd_demux_001_src22_endofpacket;                                           // cmd_demux_001:src22_endofpacket -> cmd_mux_023:sink0_endofpacket
	wire         cmd_demux_001_src22_valid;                                                 // cmd_demux_001:src22_valid -> cmd_mux_023:sink0_valid
	wire         cmd_demux_001_src22_startofpacket;                                         // cmd_demux_001:src22_startofpacket -> cmd_mux_023:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src22_data;                                                  // cmd_demux_001:src22_data -> cmd_mux_023:sink0_data
	wire  [24:0] cmd_demux_001_src22_channel;                                               // cmd_demux_001:src22_channel -> cmd_mux_023:sink0_channel
	wire         cmd_demux_001_src22_ready;                                                 // cmd_mux_023:sink0_ready -> cmd_demux_001:src22_ready
	wire         cmd_demux_001_src23_endofpacket;                                           // cmd_demux_001:src23_endofpacket -> cmd_mux_024:sink0_endofpacket
	wire         cmd_demux_001_src23_valid;                                                 // cmd_demux_001:src23_valid -> cmd_mux_024:sink0_valid
	wire         cmd_demux_001_src23_startofpacket;                                         // cmd_demux_001:src23_startofpacket -> cmd_mux_024:sink0_startofpacket
	wire  [95:0] cmd_demux_001_src23_data;                                                  // cmd_demux_001:src23_data -> cmd_mux_024:sink0_data
	wire  [24:0] cmd_demux_001_src23_channel;                                               // cmd_demux_001:src23_channel -> cmd_mux_024:sink0_channel
	wire         cmd_demux_001_src23_ready;                                                 // cmd_mux_024:sink0_ready -> cmd_demux_001:src23_ready
	wire         rsp_demux_src0_endofpacket;                                                // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire         rsp_demux_src0_valid;                                                      // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire         rsp_demux_src0_startofpacket;                                              // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire  [95:0] rsp_demux_src0_data;                                                       // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire  [24:0] rsp_demux_src0_channel;                                                    // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire         rsp_demux_src0_ready;                                                      // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire         rsp_demux_src1_endofpacket;                                                // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire         rsp_demux_src1_valid;                                                      // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire         rsp_demux_src1_startofpacket;                                              // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire  [95:0] rsp_demux_src1_data;                                                       // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire  [24:0] rsp_demux_src1_channel;                                                    // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire         rsp_demux_src1_ready;                                                      // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire         rsp_demux_001_src0_endofpacket;                                            // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire         rsp_demux_001_src0_valid;                                                  // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire         rsp_demux_001_src0_startofpacket;                                          // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire  [95:0] rsp_demux_001_src0_data;                                                   // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire  [24:0] rsp_demux_001_src0_channel;                                                // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire         rsp_demux_001_src0_ready;                                                  // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire         rsp_demux_002_src0_endofpacket;                                            // rsp_demux_002:src0_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire         rsp_demux_002_src0_valid;                                                  // rsp_demux_002:src0_valid -> rsp_mux_001:sink1_valid
	wire         rsp_demux_002_src0_startofpacket;                                          // rsp_demux_002:src0_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire  [95:0] rsp_demux_002_src0_data;                                                   // rsp_demux_002:src0_data -> rsp_mux_001:sink1_data
	wire  [24:0] rsp_demux_002_src0_channel;                                                // rsp_demux_002:src0_channel -> rsp_mux_001:sink1_channel
	wire         rsp_demux_002_src0_ready;                                                  // rsp_mux_001:sink1_ready -> rsp_demux_002:src0_ready
	wire         rsp_demux_003_src0_endofpacket;                                            // rsp_demux_003:src0_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire         rsp_demux_003_src0_valid;                                                  // rsp_demux_003:src0_valid -> rsp_mux_001:sink2_valid
	wire         rsp_demux_003_src0_startofpacket;                                          // rsp_demux_003:src0_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire  [95:0] rsp_demux_003_src0_data;                                                   // rsp_demux_003:src0_data -> rsp_mux_001:sink2_data
	wire  [24:0] rsp_demux_003_src0_channel;                                                // rsp_demux_003:src0_channel -> rsp_mux_001:sink2_channel
	wire         rsp_demux_003_src0_ready;                                                  // rsp_mux_001:sink2_ready -> rsp_demux_003:src0_ready
	wire         rsp_demux_004_src0_endofpacket;                                            // rsp_demux_004:src0_endofpacket -> rsp_mux_001:sink3_endofpacket
	wire         rsp_demux_004_src0_valid;                                                  // rsp_demux_004:src0_valid -> rsp_mux_001:sink3_valid
	wire         rsp_demux_004_src0_startofpacket;                                          // rsp_demux_004:src0_startofpacket -> rsp_mux_001:sink3_startofpacket
	wire  [95:0] rsp_demux_004_src0_data;                                                   // rsp_demux_004:src0_data -> rsp_mux_001:sink3_data
	wire  [24:0] rsp_demux_004_src0_channel;                                                // rsp_demux_004:src0_channel -> rsp_mux_001:sink3_channel
	wire         rsp_demux_004_src0_ready;                                                  // rsp_mux_001:sink3_ready -> rsp_demux_004:src0_ready
	wire         rsp_demux_005_src0_endofpacket;                                            // rsp_demux_005:src0_endofpacket -> rsp_mux_001:sink4_endofpacket
	wire         rsp_demux_005_src0_valid;                                                  // rsp_demux_005:src0_valid -> rsp_mux_001:sink4_valid
	wire         rsp_demux_005_src0_startofpacket;                                          // rsp_demux_005:src0_startofpacket -> rsp_mux_001:sink4_startofpacket
	wire  [95:0] rsp_demux_005_src0_data;                                                   // rsp_demux_005:src0_data -> rsp_mux_001:sink4_data
	wire  [24:0] rsp_demux_005_src0_channel;                                                // rsp_demux_005:src0_channel -> rsp_mux_001:sink4_channel
	wire         rsp_demux_005_src0_ready;                                                  // rsp_mux_001:sink4_ready -> rsp_demux_005:src0_ready
	wire         rsp_demux_006_src0_endofpacket;                                            // rsp_demux_006:src0_endofpacket -> rsp_mux_001:sink5_endofpacket
	wire         rsp_demux_006_src0_valid;                                                  // rsp_demux_006:src0_valid -> rsp_mux_001:sink5_valid
	wire         rsp_demux_006_src0_startofpacket;                                          // rsp_demux_006:src0_startofpacket -> rsp_mux_001:sink5_startofpacket
	wire  [95:0] rsp_demux_006_src0_data;                                                   // rsp_demux_006:src0_data -> rsp_mux_001:sink5_data
	wire  [24:0] rsp_demux_006_src0_channel;                                                // rsp_demux_006:src0_channel -> rsp_mux_001:sink5_channel
	wire         rsp_demux_006_src0_ready;                                                  // rsp_mux_001:sink5_ready -> rsp_demux_006:src0_ready
	wire         rsp_demux_007_src0_endofpacket;                                            // rsp_demux_007:src0_endofpacket -> rsp_mux_001:sink6_endofpacket
	wire         rsp_demux_007_src0_valid;                                                  // rsp_demux_007:src0_valid -> rsp_mux_001:sink6_valid
	wire         rsp_demux_007_src0_startofpacket;                                          // rsp_demux_007:src0_startofpacket -> rsp_mux_001:sink6_startofpacket
	wire  [95:0] rsp_demux_007_src0_data;                                                   // rsp_demux_007:src0_data -> rsp_mux_001:sink6_data
	wire  [24:0] rsp_demux_007_src0_channel;                                                // rsp_demux_007:src0_channel -> rsp_mux_001:sink6_channel
	wire         rsp_demux_007_src0_ready;                                                  // rsp_mux_001:sink6_ready -> rsp_demux_007:src0_ready
	wire         rsp_demux_008_src0_endofpacket;                                            // rsp_demux_008:src0_endofpacket -> rsp_mux_001:sink7_endofpacket
	wire         rsp_demux_008_src0_valid;                                                  // rsp_demux_008:src0_valid -> rsp_mux_001:sink7_valid
	wire         rsp_demux_008_src0_startofpacket;                                          // rsp_demux_008:src0_startofpacket -> rsp_mux_001:sink7_startofpacket
	wire  [95:0] rsp_demux_008_src0_data;                                                   // rsp_demux_008:src0_data -> rsp_mux_001:sink7_data
	wire  [24:0] rsp_demux_008_src0_channel;                                                // rsp_demux_008:src0_channel -> rsp_mux_001:sink7_channel
	wire         rsp_demux_008_src0_ready;                                                  // rsp_mux_001:sink7_ready -> rsp_demux_008:src0_ready
	wire         rsp_demux_009_src0_endofpacket;                                            // rsp_demux_009:src0_endofpacket -> rsp_mux_001:sink8_endofpacket
	wire         rsp_demux_009_src0_valid;                                                  // rsp_demux_009:src0_valid -> rsp_mux_001:sink8_valid
	wire         rsp_demux_009_src0_startofpacket;                                          // rsp_demux_009:src0_startofpacket -> rsp_mux_001:sink8_startofpacket
	wire  [95:0] rsp_demux_009_src0_data;                                                   // rsp_demux_009:src0_data -> rsp_mux_001:sink8_data
	wire  [24:0] rsp_demux_009_src0_channel;                                                // rsp_demux_009:src0_channel -> rsp_mux_001:sink8_channel
	wire         rsp_demux_009_src0_ready;                                                  // rsp_mux_001:sink8_ready -> rsp_demux_009:src0_ready
	wire         rsp_demux_010_src0_endofpacket;                                            // rsp_demux_010:src0_endofpacket -> rsp_mux_001:sink9_endofpacket
	wire         rsp_demux_010_src0_valid;                                                  // rsp_demux_010:src0_valid -> rsp_mux_001:sink9_valid
	wire         rsp_demux_010_src0_startofpacket;                                          // rsp_demux_010:src0_startofpacket -> rsp_mux_001:sink9_startofpacket
	wire  [95:0] rsp_demux_010_src0_data;                                                   // rsp_demux_010:src0_data -> rsp_mux_001:sink9_data
	wire  [24:0] rsp_demux_010_src0_channel;                                                // rsp_demux_010:src0_channel -> rsp_mux_001:sink9_channel
	wire         rsp_demux_010_src0_ready;                                                  // rsp_mux_001:sink9_ready -> rsp_demux_010:src0_ready
	wire         rsp_demux_011_src0_endofpacket;                                            // rsp_demux_011:src0_endofpacket -> rsp_mux_001:sink10_endofpacket
	wire         rsp_demux_011_src0_valid;                                                  // rsp_demux_011:src0_valid -> rsp_mux_001:sink10_valid
	wire         rsp_demux_011_src0_startofpacket;                                          // rsp_demux_011:src0_startofpacket -> rsp_mux_001:sink10_startofpacket
	wire  [95:0] rsp_demux_011_src0_data;                                                   // rsp_demux_011:src0_data -> rsp_mux_001:sink10_data
	wire  [24:0] rsp_demux_011_src0_channel;                                                // rsp_demux_011:src0_channel -> rsp_mux_001:sink10_channel
	wire         rsp_demux_011_src0_ready;                                                  // rsp_mux_001:sink10_ready -> rsp_demux_011:src0_ready
	wire         rsp_demux_012_src0_endofpacket;                                            // rsp_demux_012:src0_endofpacket -> rsp_mux_001:sink11_endofpacket
	wire         rsp_demux_012_src0_valid;                                                  // rsp_demux_012:src0_valid -> rsp_mux_001:sink11_valid
	wire         rsp_demux_012_src0_startofpacket;                                          // rsp_demux_012:src0_startofpacket -> rsp_mux_001:sink11_startofpacket
	wire  [95:0] rsp_demux_012_src0_data;                                                   // rsp_demux_012:src0_data -> rsp_mux_001:sink11_data
	wire  [24:0] rsp_demux_012_src0_channel;                                                // rsp_demux_012:src0_channel -> rsp_mux_001:sink11_channel
	wire         rsp_demux_012_src0_ready;                                                  // rsp_mux_001:sink11_ready -> rsp_demux_012:src0_ready
	wire         rsp_demux_013_src0_endofpacket;                                            // rsp_demux_013:src0_endofpacket -> rsp_mux_001:sink12_endofpacket
	wire         rsp_demux_013_src0_valid;                                                  // rsp_demux_013:src0_valid -> rsp_mux_001:sink12_valid
	wire         rsp_demux_013_src0_startofpacket;                                          // rsp_demux_013:src0_startofpacket -> rsp_mux_001:sink12_startofpacket
	wire  [95:0] rsp_demux_013_src0_data;                                                   // rsp_demux_013:src0_data -> rsp_mux_001:sink12_data
	wire  [24:0] rsp_demux_013_src0_channel;                                                // rsp_demux_013:src0_channel -> rsp_mux_001:sink12_channel
	wire         rsp_demux_013_src0_ready;                                                  // rsp_mux_001:sink12_ready -> rsp_demux_013:src0_ready
	wire         rsp_demux_014_src0_endofpacket;                                            // rsp_demux_014:src0_endofpacket -> rsp_mux_001:sink13_endofpacket
	wire         rsp_demux_014_src0_valid;                                                  // rsp_demux_014:src0_valid -> rsp_mux_001:sink13_valid
	wire         rsp_demux_014_src0_startofpacket;                                          // rsp_demux_014:src0_startofpacket -> rsp_mux_001:sink13_startofpacket
	wire  [95:0] rsp_demux_014_src0_data;                                                   // rsp_demux_014:src0_data -> rsp_mux_001:sink13_data
	wire  [24:0] rsp_demux_014_src0_channel;                                                // rsp_demux_014:src0_channel -> rsp_mux_001:sink13_channel
	wire         rsp_demux_014_src0_ready;                                                  // rsp_mux_001:sink13_ready -> rsp_demux_014:src0_ready
	wire         rsp_demux_015_src0_endofpacket;                                            // rsp_demux_015:src0_endofpacket -> rsp_mux_001:sink14_endofpacket
	wire         rsp_demux_015_src0_valid;                                                  // rsp_demux_015:src0_valid -> rsp_mux_001:sink14_valid
	wire         rsp_demux_015_src0_startofpacket;                                          // rsp_demux_015:src0_startofpacket -> rsp_mux_001:sink14_startofpacket
	wire  [95:0] rsp_demux_015_src0_data;                                                   // rsp_demux_015:src0_data -> rsp_mux_001:sink14_data
	wire  [24:0] rsp_demux_015_src0_channel;                                                // rsp_demux_015:src0_channel -> rsp_mux_001:sink14_channel
	wire         rsp_demux_015_src0_ready;                                                  // rsp_mux_001:sink14_ready -> rsp_demux_015:src0_ready
	wire         rsp_demux_016_src0_endofpacket;                                            // rsp_demux_016:src0_endofpacket -> rsp_mux_001:sink15_endofpacket
	wire         rsp_demux_016_src0_valid;                                                  // rsp_demux_016:src0_valid -> rsp_mux_001:sink15_valid
	wire         rsp_demux_016_src0_startofpacket;                                          // rsp_demux_016:src0_startofpacket -> rsp_mux_001:sink15_startofpacket
	wire  [95:0] rsp_demux_016_src0_data;                                                   // rsp_demux_016:src0_data -> rsp_mux_001:sink15_data
	wire  [24:0] rsp_demux_016_src0_channel;                                                // rsp_demux_016:src0_channel -> rsp_mux_001:sink15_channel
	wire         rsp_demux_016_src0_ready;                                                  // rsp_mux_001:sink15_ready -> rsp_demux_016:src0_ready
	wire         rsp_demux_017_src0_endofpacket;                                            // rsp_demux_017:src0_endofpacket -> rsp_mux_001:sink16_endofpacket
	wire         rsp_demux_017_src0_valid;                                                  // rsp_demux_017:src0_valid -> rsp_mux_001:sink16_valid
	wire         rsp_demux_017_src0_startofpacket;                                          // rsp_demux_017:src0_startofpacket -> rsp_mux_001:sink16_startofpacket
	wire  [95:0] rsp_demux_017_src0_data;                                                   // rsp_demux_017:src0_data -> rsp_mux_001:sink16_data
	wire  [24:0] rsp_demux_017_src0_channel;                                                // rsp_demux_017:src0_channel -> rsp_mux_001:sink16_channel
	wire         rsp_demux_017_src0_ready;                                                  // rsp_mux_001:sink16_ready -> rsp_demux_017:src0_ready
	wire         rsp_demux_018_src0_endofpacket;                                            // rsp_demux_018:src0_endofpacket -> rsp_mux_001:sink17_endofpacket
	wire         rsp_demux_018_src0_valid;                                                  // rsp_demux_018:src0_valid -> rsp_mux_001:sink17_valid
	wire         rsp_demux_018_src0_startofpacket;                                          // rsp_demux_018:src0_startofpacket -> rsp_mux_001:sink17_startofpacket
	wire  [95:0] rsp_demux_018_src0_data;                                                   // rsp_demux_018:src0_data -> rsp_mux_001:sink17_data
	wire  [24:0] rsp_demux_018_src0_channel;                                                // rsp_demux_018:src0_channel -> rsp_mux_001:sink17_channel
	wire         rsp_demux_018_src0_ready;                                                  // rsp_mux_001:sink17_ready -> rsp_demux_018:src0_ready
	wire         rsp_demux_019_src0_endofpacket;                                            // rsp_demux_019:src0_endofpacket -> rsp_mux_001:sink18_endofpacket
	wire         rsp_demux_019_src0_valid;                                                  // rsp_demux_019:src0_valid -> rsp_mux_001:sink18_valid
	wire         rsp_demux_019_src0_startofpacket;                                          // rsp_demux_019:src0_startofpacket -> rsp_mux_001:sink18_startofpacket
	wire  [95:0] rsp_demux_019_src0_data;                                                   // rsp_demux_019:src0_data -> rsp_mux_001:sink18_data
	wire  [24:0] rsp_demux_019_src0_channel;                                                // rsp_demux_019:src0_channel -> rsp_mux_001:sink18_channel
	wire         rsp_demux_019_src0_ready;                                                  // rsp_mux_001:sink18_ready -> rsp_demux_019:src0_ready
	wire         rsp_demux_020_src0_endofpacket;                                            // rsp_demux_020:src0_endofpacket -> rsp_mux_001:sink19_endofpacket
	wire         rsp_demux_020_src0_valid;                                                  // rsp_demux_020:src0_valid -> rsp_mux_001:sink19_valid
	wire         rsp_demux_020_src0_startofpacket;                                          // rsp_demux_020:src0_startofpacket -> rsp_mux_001:sink19_startofpacket
	wire  [95:0] rsp_demux_020_src0_data;                                                   // rsp_demux_020:src0_data -> rsp_mux_001:sink19_data
	wire  [24:0] rsp_demux_020_src0_channel;                                                // rsp_demux_020:src0_channel -> rsp_mux_001:sink19_channel
	wire         rsp_demux_020_src0_ready;                                                  // rsp_mux_001:sink19_ready -> rsp_demux_020:src0_ready
	wire         rsp_demux_021_src0_endofpacket;                                            // rsp_demux_021:src0_endofpacket -> rsp_mux_001:sink20_endofpacket
	wire         rsp_demux_021_src0_valid;                                                  // rsp_demux_021:src0_valid -> rsp_mux_001:sink20_valid
	wire         rsp_demux_021_src0_startofpacket;                                          // rsp_demux_021:src0_startofpacket -> rsp_mux_001:sink20_startofpacket
	wire  [95:0] rsp_demux_021_src0_data;                                                   // rsp_demux_021:src0_data -> rsp_mux_001:sink20_data
	wire  [24:0] rsp_demux_021_src0_channel;                                                // rsp_demux_021:src0_channel -> rsp_mux_001:sink20_channel
	wire         rsp_demux_021_src0_ready;                                                  // rsp_mux_001:sink20_ready -> rsp_demux_021:src0_ready
	wire         rsp_demux_022_src0_endofpacket;                                            // rsp_demux_022:src0_endofpacket -> rsp_mux_001:sink21_endofpacket
	wire         rsp_demux_022_src0_valid;                                                  // rsp_demux_022:src0_valid -> rsp_mux_001:sink21_valid
	wire         rsp_demux_022_src0_startofpacket;                                          // rsp_demux_022:src0_startofpacket -> rsp_mux_001:sink21_startofpacket
	wire  [95:0] rsp_demux_022_src0_data;                                                   // rsp_demux_022:src0_data -> rsp_mux_001:sink21_data
	wire  [24:0] rsp_demux_022_src0_channel;                                                // rsp_demux_022:src0_channel -> rsp_mux_001:sink21_channel
	wire         rsp_demux_022_src0_ready;                                                  // rsp_mux_001:sink21_ready -> rsp_demux_022:src0_ready
	wire         rsp_demux_023_src0_endofpacket;                                            // rsp_demux_023:src0_endofpacket -> rsp_mux_001:sink22_endofpacket
	wire         rsp_demux_023_src0_valid;                                                  // rsp_demux_023:src0_valid -> rsp_mux_001:sink22_valid
	wire         rsp_demux_023_src0_startofpacket;                                          // rsp_demux_023:src0_startofpacket -> rsp_mux_001:sink22_startofpacket
	wire  [95:0] rsp_demux_023_src0_data;                                                   // rsp_demux_023:src0_data -> rsp_mux_001:sink22_data
	wire  [24:0] rsp_demux_023_src0_channel;                                                // rsp_demux_023:src0_channel -> rsp_mux_001:sink22_channel
	wire         rsp_demux_023_src0_ready;                                                  // rsp_mux_001:sink22_ready -> rsp_demux_023:src0_ready
	wire         rsp_demux_024_src0_endofpacket;                                            // rsp_demux_024:src0_endofpacket -> rsp_mux_001:sink23_endofpacket
	wire         rsp_demux_024_src0_valid;                                                  // rsp_demux_024:src0_valid -> rsp_mux_001:sink23_valid
	wire         rsp_demux_024_src0_startofpacket;                                          // rsp_demux_024:src0_startofpacket -> rsp_mux_001:sink23_startofpacket
	wire  [95:0] rsp_demux_024_src0_data;                                                   // rsp_demux_024:src0_data -> rsp_mux_001:sink23_data
	wire  [24:0] rsp_demux_024_src0_channel;                                                // rsp_demux_024:src0_channel -> rsp_mux_001:sink23_channel
	wire         rsp_demux_024_src0_ready;                                                  // rsp_mux_001:sink23_ready -> rsp_demux_024:src0_ready
	wire  [24:0] cpu_instruction_master_limiter_cmd_valid_data;                             // cpu_instruction_master_limiter:cmd_src_valid -> cmd_demux:sink_valid
	wire  [24:0] cpu_data_master_limiter_cmd_valid_data;                                    // cpu_data_master_limiter:cmd_src_valid -> cmd_demux_001:sink_valid

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_instruction_master_translator (
		.clk                      (clk_clk_clk),                                                               //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                  (cpu_instruction_master_read),                                               //                          .read
		.av_readdata              (cpu_instruction_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (cpu_instruction_master_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount            (1'b1),                                                                      //               (terminated)
		.av_byteenable            (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                                      //               (terminated)
		.av_begintransfer         (1'b0),                                                                      //               (terminated)
		.av_chipselect            (1'b0),                                                                      //               (terminated)
		.av_write                 (1'b0),                                                                      //               (terminated)
		.av_writedata             (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                  (1'b0),                                                                      //               (terminated)
		.av_debugaccess           (1'b0),                                                                      //               (terminated)
		.uav_clken                (),                                                                          //               (terminated)
		.av_clken                 (1'b1),                                                                      //               (terminated)
		.uav_response             (2'b00),                                                                     //               (terminated)
		.av_response              (),                                                                          //               (terminated)
		.uav_writeresponserequest (),                                                                          //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                                      //               (terminated)
		.av_writeresponserequest  (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid    ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (16),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (16),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) cpu_data_master_translator (
		.clk                      (clk_clk_clk),                                                        //                       clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address              (cpu_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address               (cpu_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest           (cpu_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable            (cpu_data_master_byteenable),                                         //                          .byteenable
		.av_read                  (cpu_data_master_read),                                               //                          .read
		.av_readdata              (cpu_data_master_readdata),                                           //                          .readdata
		.av_readdatavalid         (cpu_data_master_readdatavalid),                                      //                          .readdatavalid
		.av_write                 (cpu_data_master_write),                                              //                          .write
		.av_writedata             (cpu_data_master_writedata),                                          //                          .writedata
		.av_debugaccess           (cpu_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount            (1'b1),                                                               //               (terminated)
		.av_beginbursttransfer    (1'b0),                                                               //               (terminated)
		.av_begintransfer         (1'b0),                                                               //               (terminated)
		.av_chipselect            (1'b0),                                                               //               (terminated)
		.av_lock                  (1'b0),                                                               //               (terminated)
		.uav_clken                (),                                                                   //               (terminated)
		.av_clken                 (1'b1),                                                               //               (terminated)
		.uav_response             (2'b00),                                                              //               (terminated)
		.av_response              (),                                                                   //               (terminated)
		.uav_writeresponserequest (),                                                                   //               (terminated)
		.uav_writeresponsevalid   (1'b0),                                                               //               (terminated)
		.av_writeresponserequest  (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid    ()                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) cpu_jtag_debug_module_translator (
		.clk                      (clk_clk_clk),                                  //                      clk.clk
		.reset                    (cpu_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address              (cpu_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (cpu_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write                (cpu_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (cpu_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (cpu_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (cpu_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (cpu_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write                 (cpu_jtag_debug_module_write),                  //                         .write
		.av_read                  (cpu_jtag_debug_module_read),                   //                         .read
		.av_readdata              (cpu_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata             (cpu_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable            (cpu_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest           (cpu_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess           (cpu_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer         (),                                             //              (terminated)
		.av_beginbursttransfer    (),                                             //              (terminated)
		.av_burstcount            (),                                             //              (terminated)
		.av_readdatavalid         (1'b0),                                         //              (terminated)
		.av_writebyteenable       (),                                             //              (terminated)
		.av_lock                  (),                                             //              (terminated)
		.av_chipselect            (),                                             //              (terminated)
		.av_clken                 (),                                             //              (terminated)
		.uav_clken                (1'b0),                                         //              (terminated)
		.av_outputenable          (),                                             //              (terminated)
		.uav_response             (),                                             //              (terminated)
		.av_response              (2'b00),                                        //              (terminated)
		.uav_writeresponserequest (1'b0),                                         //              (terminated)
		.uav_writeresponsevalid   (),                                             //              (terminated)
		.av_writeresponserequest  (),                                             //              (terminated)
		.av_writeresponsevalid    (1'b0)                                          //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_cpu_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (ram_cpu_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (ram_cpu_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (ram_cpu_s1_agent_m0_read),                   //                         .read
		.uav_write                (ram_cpu_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (ram_cpu_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (ram_cpu_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (ram_cpu_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (ram_cpu_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (ram_cpu_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (ram_cpu_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (ram_cpu_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (ram_cpu_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (ram_cpu_s1_write),                           //                         .write
		.av_readdata              (ram_cpu_s1_readdata),                        //                         .readdata
		.av_writedata             (ram_cpu_s1_writedata),                       //                         .writedata
		.av_byteenable            (ram_cpu_s1_byteenable),                      //                         .byteenable
		.av_chipselect            (ram_cpu_s1_chipselect),                      //                         .chipselect
		.av_clken                 (ram_cpu_s1_clken),                           //                         .clken
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ram_cpu_s2_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (ram_cpu_s2_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (ram_cpu_s2_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (ram_cpu_s2_agent_m0_read),                   //                         .read
		.uav_write                (ram_cpu_s2_agent_m0_write),                  //                         .write
		.uav_waitrequest          (ram_cpu_s2_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (ram_cpu_s2_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (ram_cpu_s2_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (ram_cpu_s2_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (ram_cpu_s2_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (ram_cpu_s2_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (ram_cpu_s2_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (ram_cpu_s2_address),                         //      avalon_anti_slave_0.address
		.av_write                 (ram_cpu_s2_write),                           //                         .write
		.av_readdata              (ram_cpu_s2_readdata),                        //                         .readdata
		.av_writedata             (ram_cpu_s2_writedata),                       //                         .writedata
		.av_byteenable            (ram_cpu_s2_byteenable),                      //                         .byteenable
		.av_chipselect            (ram_cpu_s2_chipselect),                      //                         .chipselect
		.av_clken                 (ram_cpu_s2_clken),                           //                         .clken
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_id_control_slave_translator (
		.clk                      (clk_clk_clk),                                 //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (sys_id_control_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sys_id_control_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sys_id_control_slave_agent_m0_read),          //                         .read
		.uav_write                (sys_id_control_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (sys_id_control_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sys_id_control_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sys_id_control_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sys_id_control_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sys_id_control_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sys_id_control_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sys_id_control_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sys_id_control_slave_address),                //      avalon_anti_slave_0.address
		.av_readdata              (sys_id_control_slave_readdata),               //                         .readdata
		.av_write                 (),                                            //              (terminated)
		.av_read                  (),                                            //              (terminated)
		.av_writedata             (),                                            //              (terminated)
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_chipselect            (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sys_timer_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (sys_timer_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (sys_timer_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (sys_timer_s1_agent_m0_read),                 //                         .read
		.uav_write                (sys_timer_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (sys_timer_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (sys_timer_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (sys_timer_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (sys_timer_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (sys_timer_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (sys_timer_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (sys_timer_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (sys_timer_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (sys_timer_s1_write),                         //                         .write
		.av_readdata              (sys_timer_s1_readdata),                      //                         .readdata
		.av_writedata             (sys_timer_s1_writedata),                     //                         .writedata
		.av_chipselect            (sys_timer_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pc_uart_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (pc_uart_s1_agent_m0_address),                // avalon_universal_slave_0.address
		.uav_burstcount           (pc_uart_s1_agent_m0_burstcount),             //                         .burstcount
		.uav_read                 (pc_uart_s1_agent_m0_read),                   //                         .read
		.uav_write                (pc_uart_s1_agent_m0_write),                  //                         .write
		.uav_waitrequest          (pc_uart_s1_agent_m0_waitrequest),            //                         .waitrequest
		.uav_readdatavalid        (pc_uart_s1_agent_m0_readdatavalid),          //                         .readdatavalid
		.uav_byteenable           (pc_uart_s1_agent_m0_byteenable),             //                         .byteenable
		.uav_readdata             (pc_uart_s1_agent_m0_readdata),               //                         .readdata
		.uav_writedata            (pc_uart_s1_agent_m0_writedata),              //                         .writedata
		.uav_lock                 (pc_uart_s1_agent_m0_lock),                   //                         .lock
		.uav_debugaccess          (pc_uart_s1_agent_m0_debugaccess),            //                         .debugaccess
		.av_address               (pc_uart_s1_address),                         //      avalon_anti_slave_0.address
		.av_write                 (pc_uart_s1_write),                           //                         .write
		.av_read                  (pc_uart_s1_read),                            //                         .read
		.av_readdata              (pc_uart_s1_readdata),                        //                         .readdata
		.av_writedata             (pc_uart_s1_writedata),                       //                         .writedata
		.av_begintransfer         (pc_uart_s1_begintransfer),                   //                         .begintransfer
		.av_chipselect            (pc_uart_s1_chipselect),                      //                         .chipselect
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) leds_port_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (leds_port_s1_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount           (leds_port_s1_agent_m0_burstcount),           //                         .burstcount
		.uav_read                 (leds_port_s1_agent_m0_read),                 //                         .read
		.uav_write                (leds_port_s1_agent_m0_write),                //                         .write
		.uav_waitrequest          (leds_port_s1_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid        (leds_port_s1_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable           (leds_port_s1_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata             (leds_port_s1_agent_m0_readdata),             //                         .readdata
		.uav_writedata            (leds_port_s1_agent_m0_writedata),            //                         .writedata
		.uav_lock                 (leds_port_s1_agent_m0_lock),                 //                         .lock
		.uav_debugaccess          (leds_port_s1_agent_m0_debugaccess),          //                         .debugaccess
		.av_address               (leds_port_s1_address),                       //      avalon_anti_slave_0.address
		.av_write                 (leds_port_s1_write),                         //                         .write
		.av_readdata              (leds_port_s1_readdata),                      //                         .readdata
		.av_writedata             (leds_port_s1_writedata),                     //                         .writedata
		.av_chipselect            (leds_port_s1_chipselect),                    //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) i2c_port_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (i2c_port_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (i2c_port_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (i2c_port_s1_agent_m0_read),                  //                         .read
		.uav_write                (i2c_port_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (i2c_port_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (i2c_port_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (i2c_port_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (i2c_port_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (i2c_port_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (i2c_port_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (i2c_port_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (i2c_port_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (i2c_port_s1_write),                          //                         .write
		.av_readdata              (i2c_port_s1_readdata),                       //                         .readdata
		.av_writedata             (i2c_port_s1_writedata),                      //                         .writedata
		.av_chipselect            (i2c_port_s1_chipselect),                     //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) laser_driver_avalon_slave_0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address              (laser_driver_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (laser_driver_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (laser_driver_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (laser_driver_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (laser_driver_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (laser_driver_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (laser_driver_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (laser_driver_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (laser_driver_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (laser_driver_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (laser_driver_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (laser_driver_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (laser_driver_avalon_slave_0_write),                  //                         .write
		.av_read                  (laser_driver_avalon_slave_0_read),                   //                         .read
		.av_readdata              (laser_driver_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (laser_driver_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (laser_driver_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_waitrequest           (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_tdc_avalon_slave_translator (
		.clk                      (clk_clk_clk),                                 //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (spi_tdc_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (spi_tdc_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (spi_tdc_avalon_slave_agent_m0_read),          //                         .read
		.uav_write                (spi_tdc_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (spi_tdc_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (spi_tdc_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (spi_tdc_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (spi_tdc_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (spi_tdc_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (spi_tdc_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (spi_tdc_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (spi_tdc_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (spi_tdc_avalon_slave_write),                  //                         .write
		.av_read                  (spi_tdc_avalon_slave_read),                   //                         .read
		.av_readdata              (spi_tdc_avalon_slave_readdata),               //                         .readdata
		.av_writedata             (spi_tdc_avalon_slave_writedata),              //                         .writedata
		.av_chipselect            (spi_tdc_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pulse_generator_avalon_slave_translator (
		.clk                      (clk_clk_clk),                                         //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (pulse_generator_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (pulse_generator_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (pulse_generator_avalon_slave_agent_m0_read),          //                         .read
		.uav_write                (pulse_generator_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (pulse_generator_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (pulse_generator_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (pulse_generator_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (pulse_generator_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (pulse_generator_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (pulse_generator_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (pulse_generator_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (pulse_generator_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (pulse_generator_avalon_slave_write),                  //                         .write
		.av_read                  (pulse_generator_avalon_slave_read),                   //                         .read
		.av_readdata              (pulse_generator_avalon_slave_readdata),               //                         .readdata
		.av_writedata             (pulse_generator_avalon_slave_writedata),              //                         .writedata
		.av_chipselect            (pulse_generator_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_vga_avalon_slave_translator (
		.clk                      (clk_clk_clk),                                 //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (spi_vga_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (spi_vga_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (spi_vga_avalon_slave_agent_m0_read),          //                         .read
		.uav_write                (spi_vga_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (spi_vga_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (spi_vga_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (spi_vga_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (spi_vga_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (spi_vga_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (spi_vga_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (spi_vga_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (spi_vga_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (spi_vga_avalon_slave_write),                  //                         .write
		.av_read                  (spi_vga_avalon_slave_read),                   //                         .read
		.av_readdata              (spi_vga_avalon_slave_readdata),               //                         .readdata
		.av_writedata             (spi_vga_avalon_slave_writedata),              //                         .writedata
		.av_chipselect            (spi_vga_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) rs485_de_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (rs485_de_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (rs485_de_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (rs485_de_s1_agent_m0_read),                  //                         .read
		.uav_write                (rs485_de_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (rs485_de_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (rs485_de_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (rs485_de_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (rs485_de_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (rs485_de_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (rs485_de_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (rs485_de_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (rs485_de_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (rs485_de_s1_write),                          //                         .write
		.av_readdata              (rs485_de_s1_readdata),                       //                         .readdata
		.av_writedata             (rs485_de_s1_writedata),                      //                         .writedata
		.av_chipselect            (rs485_de_s1_chipselect),                     //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tdc_enable_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (tdc_enable_s1_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount           (tdc_enable_s1_agent_m0_burstcount),          //                         .burstcount
		.uav_read                 (tdc_enable_s1_agent_m0_read),                //                         .read
		.uav_write                (tdc_enable_s1_agent_m0_write),               //                         .write
		.uav_waitrequest          (tdc_enable_s1_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid        (tdc_enable_s1_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable           (tdc_enable_s1_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata             (tdc_enable_s1_agent_m0_readdata),            //                         .readdata
		.uav_writedata            (tdc_enable_s1_agent_m0_writedata),           //                         .writedata
		.uav_lock                 (tdc_enable_s1_agent_m0_lock),                //                         .lock
		.uav_debugaccess          (tdc_enable_s1_agent_m0_debugaccess),         //                         .debugaccess
		.av_address               (tdc_enable_s1_address),                      //      avalon_anti_slave_0.address
		.av_write                 (tdc_enable_s1_write),                        //                         .write
		.av_readdata              (tdc_enable_s1_readdata),                     //                         .readdata
		.av_writedata             (tdc_enable_s1_writedata),                    //                         .writedata
		.av_chipselect            (tdc_enable_s1_chipselect),                   //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) service_timer_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (service_timer_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount           (service_timer_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read                 (service_timer_s1_agent_m0_read),             //                         .read
		.uav_write                (service_timer_s1_agent_m0_write),            //                         .write
		.uav_waitrequest          (service_timer_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid        (service_timer_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable           (service_timer_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata             (service_timer_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata            (service_timer_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock                 (service_timer_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess          (service_timer_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address               (service_timer_s1_address),                   //      avalon_anti_slave_0.address
		.av_write                 (service_timer_s1_write),                     //                         .write
		.av_readdata              (service_timer_s1_readdata),                  //                         .readdata
		.av_writedata             (service_timer_s1_writedata),                 //                         .writedata
		.av_chipselect            (service_timer_s1_chipselect),                //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_mode_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (system_mode_s1_agent_m0_address),            // avalon_universal_slave_0.address
		.uav_burstcount           (system_mode_s1_agent_m0_burstcount),         //                         .burstcount
		.uav_read                 (system_mode_s1_agent_m0_read),               //                         .read
		.uav_write                (system_mode_s1_agent_m0_write),              //                         .write
		.uav_waitrequest          (system_mode_s1_agent_m0_waitrequest),        //                         .waitrequest
		.uav_readdatavalid        (system_mode_s1_agent_m0_readdatavalid),      //                         .readdatavalid
		.uav_byteenable           (system_mode_s1_agent_m0_byteenable),         //                         .byteenable
		.uav_readdata             (system_mode_s1_agent_m0_readdata),           //                         .readdata
		.uav_writedata            (system_mode_s1_agent_m0_writedata),          //                         .writedata
		.uav_lock                 (system_mode_s1_agent_m0_lock),               //                         .lock
		.uav_debugaccess          (system_mode_s1_agent_m0_debugaccess),        //                         .debugaccess
		.av_address               (system_mode_s1_address),                     //      avalon_anti_slave_0.address
		.av_write                 (system_mode_s1_write),                       //                         .write
		.av_readdata              (system_mode_s1_readdata),                    //                         .readdata
		.av_writedata             (system_mode_s1_writedata),                   //                         .writedata
		.av_chipselect            (system_mode_s1_chipselect),                  //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) amp_gain_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (amp_gain_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount           (amp_gain_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read                 (amp_gain_s1_agent_m0_read),                  //                         .read
		.uav_write                (amp_gain_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest          (amp_gain_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid        (amp_gain_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable           (amp_gain_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata             (amp_gain_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata            (amp_gain_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock                 (amp_gain_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess          (amp_gain_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address               (amp_gain_s1_address),                        //      avalon_anti_slave_0.address
		.av_write                 (amp_gain_s1_write),                          //                         .write
		.av_readdata              (amp_gain_s1_readdata),                       //                         .readdata
		.av_writedata             (amp_gain_s1_writedata),                      //                         .writedata
		.av_chipselect            (amp_gain_s1_chipselect),                     //                         .chipselect
		.av_read                  (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) apd_overcurrent_s1_translator (
		.clk                      (clk_clk_clk),                                //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address              (apd_overcurrent_s1_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount           (apd_overcurrent_s1_agent_m0_burstcount),     //                         .burstcount
		.uav_read                 (apd_overcurrent_s1_agent_m0_read),           //                         .read
		.uav_write                (apd_overcurrent_s1_agent_m0_write),          //                         .write
		.uav_waitrequest          (apd_overcurrent_s1_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid        (apd_overcurrent_s1_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable           (apd_overcurrent_s1_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata             (apd_overcurrent_s1_agent_m0_readdata),       //                         .readdata
		.uav_writedata            (apd_overcurrent_s1_agent_m0_writedata),      //                         .writedata
		.uav_lock                 (apd_overcurrent_s1_agent_m0_lock),           //                         .lock
		.uav_debugaccess          (apd_overcurrent_s1_agent_m0_debugaccess),    //                         .debugaccess
		.av_address               (apd_overcurrent_s1_address),                 //      avalon_anti_slave_0.address
		.av_readdata              (apd_overcurrent_s1_readdata),                //                         .readdata
		.av_write                 (),                                           //              (terminated)
		.av_read                  (),                                           //              (terminated)
		.av_writedata             (),                                           //              (terminated)
		.av_begintransfer         (),                                           //              (terminated)
		.av_beginbursttransfer    (),                                           //              (terminated)
		.av_burstcount            (),                                           //              (terminated)
		.av_byteenable            (),                                           //              (terminated)
		.av_readdatavalid         (1'b0),                                       //              (terminated)
		.av_waitrequest           (1'b0),                                       //              (terminated)
		.av_writebyteenable       (),                                           //              (terminated)
		.av_lock                  (),                                           //              (terminated)
		.av_chipselect            (),                                           //              (terminated)
		.av_clken                 (),                                           //              (terminated)
		.uav_clken                (1'b0),                                       //              (terminated)
		.av_debugaccess           (),                                           //              (terminated)
		.av_outputenable          (),                                           //              (terminated)
		.uav_response             (),                                           //              (terminated)
		.av_response              (2'b00),                                      //              (terminated)
		.uav_writeresponserequest (1'b0),                                       //              (terminated)
		.uav_writeresponsevalid   (),                                           //              (terminated)
		.av_writeresponserequest  (),                                           //              (terminated)
		.av_writeresponsevalid    (1'b0)                                        //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_apd_avalon_slave_translator (
		.clk                      (clk_clk_clk),                                 //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address              (spi_apd_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (spi_apd_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (spi_apd_avalon_slave_agent_m0_read),          //                         .read
		.uav_write                (spi_apd_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (spi_apd_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (spi_apd_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (spi_apd_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (spi_apd_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (spi_apd_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (spi_apd_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (spi_apd_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (spi_apd_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (spi_apd_avalon_slave_write),                  //                         .write
		.av_read                  (spi_apd_avalon_slave_read),                   //                         .read
		.av_readdata              (spi_apd_avalon_slave_readdata),               //                         .readdata
		.av_writedata             (spi_apd_avalon_slave_writedata),              //                         .writedata
		.av_chipselect            (spi_apd_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                            //              (terminated)
		.av_beginbursttransfer    (),                                            //              (terminated)
		.av_burstcount            (),                                            //              (terminated)
		.av_byteenable            (),                                            //              (terminated)
		.av_readdatavalid         (1'b0),                                        //              (terminated)
		.av_waitrequest           (1'b0),                                        //              (terminated)
		.av_writebyteenable       (),                                            //              (terminated)
		.av_lock                  (),                                            //              (terminated)
		.av_clken                 (),                                            //              (terminated)
		.uav_clken                (1'b0),                                        //              (terminated)
		.av_debugaccess           (),                                            //              (terminated)
		.av_outputenable          (),                                            //              (terminated)
		.uav_response             (),                                            //              (terminated)
		.av_response              (2'b00),                                       //              (terminated)
		.uav_writeresponserequest (1'b0),                                        //              (terminated)
		.uav_writeresponsevalid   (),                                            //              (terminated)
		.av_writeresponserequest  (),                                            //              (terminated)
		.av_writeresponsevalid    (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) stepper_atten_avalon_slave_0_translator (
		.clk                      (clk_clk_clk),                                         //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (stepper_atten_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (stepper_atten_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (stepper_atten_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (stepper_atten_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (stepper_atten_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (stepper_atten_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (stepper_atten_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (stepper_atten_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (stepper_atten_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (stepper_atten_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (stepper_atten_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (stepper_atten_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (stepper_atten_avalon_slave_0_write),                  //                         .write
		.av_read                  (stepper_atten_avalon_slave_0_read),                   //                         .read
		.av_readdata              (stepper_atten_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (stepper_atten_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (stepper_atten_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) stepper_iris_avalon_slave_0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address              (stepper_iris_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (stepper_iris_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (stepper_iris_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (stepper_iris_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (stepper_iris_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (stepper_iris_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (stepper_iris_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (stepper_iris_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (stepper_iris_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (stepper_iris_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (stepper_iris_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (stepper_iris_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (stepper_iris_avalon_slave_0_write),                  //                         .write
		.av_read                  (stepper_iris_avalon_slave_0_read),                   //                         .read
		.av_readdata              (stepper_iris_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (stepper_iris_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (stepper_iris_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_waitrequest           (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) laser_charge_avalon_slave_0_translator (
		.clk                      (clk_clk_clk),                                        //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),         //                    reset.reset
		.uav_address              (laser_charge_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (laser_charge_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (laser_charge_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (laser_charge_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (laser_charge_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (laser_charge_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (laser_charge_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (laser_charge_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (laser_charge_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (laser_charge_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (laser_charge_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (laser_charge_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (laser_charge_avalon_slave_0_write),                  //                         .write
		.av_read                  (laser_charge_avalon_slave_0_read),                   //                         .read
		.av_readdata              (laser_charge_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (laser_charge_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (laser_charge_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                   //              (terminated)
		.av_beginbursttransfer    (),                                                   //              (terminated)
		.av_burstcount            (),                                                   //              (terminated)
		.av_byteenable            (),                                                   //              (terminated)
		.av_readdatavalid         (1'b0),                                               //              (terminated)
		.av_waitrequest           (1'b0),                                               //              (terminated)
		.av_writebyteenable       (),                                                   //              (terminated)
		.av_lock                  (),                                                   //              (terminated)
		.av_clken                 (),                                                   //              (terminated)
		.uav_clken                (1'b0),                                               //              (terminated)
		.av_debugaccess           (),                                                   //              (terminated)
		.av_outputenable          (),                                                   //              (terminated)
		.uav_response             (),                                                   //              (terminated)
		.av_response              (2'b00),                                              //              (terminated)
		.uav_writeresponserequest (1'b0),                                               //              (terminated)
		.uav_writeresponsevalid   (),                                                   //              (terminated)
		.av_writeresponserequest  (),                                                   //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) tdc_start_pulse_gen_avalon_slave_0_translator (
		.clk                      (clk_clk_clk),                                               //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),                //                    reset.reset
		.uav_address              (tdc_start_pulse_gen_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (tdc_start_pulse_gen_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (tdc_start_pulse_gen_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write                (tdc_start_pulse_gen_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest          (tdc_start_pulse_gen_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (tdc_start_pulse_gen_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (tdc_start_pulse_gen_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (tdc_start_pulse_gen_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (tdc_start_pulse_gen_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (tdc_start_pulse_gen_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (tdc_start_pulse_gen_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (tdc_start_pulse_gen_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write                 (tdc_start_pulse_gen_avalon_slave_0_write),                  //                         .write
		.av_read                  (tdc_start_pulse_gen_avalon_slave_0_read),                   //                         .read
		.av_readdata              (tdc_start_pulse_gen_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata             (tdc_start_pulse_gen_avalon_slave_0_writedata),              //                         .writedata
		.av_chipselect            (tdc_start_pulse_gen_avalon_slave_0_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                          //              (terminated)
		.av_beginbursttransfer    (),                                                          //              (terminated)
		.av_burstcount            (),                                                          //              (terminated)
		.av_byteenable            (),                                                          //              (terminated)
		.av_readdatavalid         (1'b0),                                                      //              (terminated)
		.av_waitrequest           (1'b0),                                                      //              (terminated)
		.av_writebyteenable       (),                                                          //              (terminated)
		.av_lock                  (),                                                          //              (terminated)
		.av_clken                 (),                                                          //              (terminated)
		.uav_clken                (1'b0),                                                      //              (terminated)
		.av_debugaccess           (),                                                          //              (terminated)
		.av_outputenable          (),                                                          //              (terminated)
		.uav_response             (),                                                          //              (terminated)
		.av_response              (2'b00),                                                     //              (terminated)
		.uav_writeresponserequest (1'b0),                                                      //              (terminated)
		.uav_writeresponsevalid   (),                                                          //              (terminated)
		.av_writeresponserequest  (),                                                          //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sample_recorder_avalon_slave_translator (
		.clk                      (clk_clk_clk),                                         //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),          //                    reset.reset
		.uav_address              (sample_recorder_avalon_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sample_recorder_avalon_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sample_recorder_avalon_slave_agent_m0_read),          //                         .read
		.uav_write                (sample_recorder_avalon_slave_agent_m0_write),         //                         .write
		.uav_waitrequest          (sample_recorder_avalon_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sample_recorder_avalon_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sample_recorder_avalon_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sample_recorder_avalon_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sample_recorder_avalon_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sample_recorder_avalon_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sample_recorder_avalon_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sample_recorder_avalon_slave_address),                //      avalon_anti_slave_0.address
		.av_write                 (sample_recorder_avalon_slave_write),                  //                         .write
		.av_read                  (sample_recorder_avalon_slave_read),                   //                         .read
		.av_readdata              (sample_recorder_avalon_slave_readdata),               //                         .readdata
		.av_writedata             (sample_recorder_avalon_slave_writedata),              //                         .writedata
		.av_chipselect            (sample_recorder_avalon_slave_chipselect),             //                         .chipselect
		.av_begintransfer         (),                                                    //              (terminated)
		.av_beginbursttransfer    (),                                                    //              (terminated)
		.av_burstcount            (),                                                    //              (terminated)
		.av_byteenable            (),                                                    //              (terminated)
		.av_readdatavalid         (1'b0),                                                //              (terminated)
		.av_waitrequest           (1'b0),                                                //              (terminated)
		.av_writebyteenable       (),                                                    //              (terminated)
		.av_lock                  (),                                                    //              (terminated)
		.av_clken                 (),                                                    //              (terminated)
		.uav_clken                (1'b0),                                                //              (terminated)
		.av_debugaccess           (),                                                    //              (terminated)
		.av_outputenable          (),                                                    //              (terminated)
		.uav_response             (),                                                    //              (terminated)
		.av_response              (2'b00),                                               //              (terminated)
		.uav_writeresponserequest (1'b0),                                                //              (terminated)
		.uav_writeresponsevalid   (),                                                    //              (terminated)
		.av_writeresponserequest  (),                                                    //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (16),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (2),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) sample_recorder_avalon_slave_1_translator (
		.clk                      (clk_clk_clk),                                           //                      clk.clk
		.reset                    (ram_cpu_reset1_reset_bridge_in_reset_reset),            //                    reset.reset
		.uav_address              (sample_recorder_avalon_slave_1_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount           (sample_recorder_avalon_slave_1_agent_m0_burstcount),    //                         .burstcount
		.uav_read                 (sample_recorder_avalon_slave_1_agent_m0_read),          //                         .read
		.uav_write                (sample_recorder_avalon_slave_1_agent_m0_write),         //                         .write
		.uav_waitrequest          (sample_recorder_avalon_slave_1_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid        (sample_recorder_avalon_slave_1_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable           (sample_recorder_avalon_slave_1_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata             (sample_recorder_avalon_slave_1_agent_m0_readdata),      //                         .readdata
		.uav_writedata            (sample_recorder_avalon_slave_1_agent_m0_writedata),     //                         .writedata
		.uav_lock                 (sample_recorder_avalon_slave_1_agent_m0_lock),          //                         .lock
		.uav_debugaccess          (sample_recorder_avalon_slave_1_agent_m0_debugaccess),   //                         .debugaccess
		.av_address               (sample_recorder_avalon_slave_1_address),                //      avalon_anti_slave_0.address
		.av_read                  (sample_recorder_avalon_slave_1_read),                   //                         .read
		.av_readdata              (sample_recorder_avalon_slave_1_readdata),               //                         .readdata
		.av_chipselect            (sample_recorder_avalon_slave_1_chipselect),             //                         .chipselect
		.av_write                 (),                                                      //              (terminated)
		.av_writedata             (),                                                      //              (terminated)
		.av_begintransfer         (),                                                      //              (terminated)
		.av_beginbursttransfer    (),                                                      //              (terminated)
		.av_burstcount            (),                                                      //              (terminated)
		.av_byteenable            (),                                                      //              (terminated)
		.av_readdatavalid         (1'b0),                                                  //              (terminated)
		.av_waitrequest           (1'b0),                                                  //              (terminated)
		.av_writebyteenable       (),                                                      //              (terminated)
		.av_lock                  (),                                                      //              (terminated)
		.av_clken                 (),                                                      //              (terminated)
		.uav_clken                (1'b0),                                                  //              (terminated)
		.av_debugaccess           (),                                                      //              (terminated)
		.av_outputenable          (),                                                      //              (terminated)
		.uav_response             (),                                                      //              (terminated)
		.av_response              (2'b00),                                                 //              (terminated)
		.uav_writeresponserequest (1'b0),                                                  //              (terminated)
		.uav_writeresponsevalid   (),                                                      //              (terminated)
		.av_writeresponserequest  (),                                                      //              (terminated)
		.av_writeresponsevalid    (1'b0)                                                   //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BEGIN_BURST           (71),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_THREAD_ID_H           (83),
		.PKT_THREAD_ID_L           (83),
		.PKT_CACHE_H               (90),
		.PKT_CACHE_L               (87),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_instruction_master_agent (
		.clk                     (clk_clk_clk),                                                               //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address              (cpu_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (cpu_instruction_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (cpu_instruction_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (cpu_instruction_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (cpu_instruction_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (cpu_instruction_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (cpu_instruction_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                          // (terminated)
		.av_writeresponserequest (1'b0),                                                                      // (terminated)
		.av_writeresponsevalid   ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_BEGIN_BURST           (71),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_BURST_TYPE_H          (68),
		.PKT_BURST_TYPE_L          (67),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_TRANS_EXCLUSIVE       (57),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_THREAD_ID_H           (83),
		.PKT_THREAD_ID_L           (83),
		.PKT_CACHE_H               (90),
		.PKT_CACHE_L               (87),
		.PKT_DATA_SIDEBAND_H       (70),
		.PKT_DATA_SIDEBAND_L       (70),
		.PKT_QOS_H                 (72),
		.PKT_QOS_L                 (72),
		.PKT_ADDR_SIDEBAND_H       (69),
		.PKT_ADDR_SIDEBAND_L       (69),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (25),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_data_master_agent (
		.clk                     (clk_clk_clk),                                                        //       clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address              (cpu_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write                (cpu_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read                 (cpu_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata            (cpu_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata             (cpu_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest          (cpu_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid        (cpu_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable           (cpu_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount           (cpu_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess          (cpu_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock                 (cpu_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid                (cpu_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data                 (cpu_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket        (cpu_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket          (cpu_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready                (cpu_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid                (cpu_data_master_limiter_rsp_src_valid),                              //        rp.valid
		.rp_data                 (cpu_data_master_limiter_rsp_src_data),                               //          .data
		.rp_channel              (cpu_data_master_limiter_rsp_src_channel),                            //          .channel
		.rp_startofpacket        (cpu_data_master_limiter_rsp_src_startofpacket),                      //          .startofpacket
		.rp_endofpacket          (cpu_data_master_limiter_rsp_src_endofpacket),                        //          .endofpacket
		.rp_ready                (cpu_data_master_limiter_rsp_src_ready),                              //          .ready
		.av_response             (),                                                                   // (terminated)
		.av_writeresponserequest (1'b0),                                                               // (terminated)
		.av_writeresponsevalid   ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) cpu_jtag_debug_module_agent (
		.clk                     (clk_clk_clk),                                            //             clk.clk
		.reset                   (cpu_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (cpu_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (cpu_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (cpu_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (cpu_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (cpu_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (cpu_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (cpu_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (cpu_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (cpu_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (cpu_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (cpu_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (cpu_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (cpu_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (cpu_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (cpu_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (cpu_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                      //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                      //                .valid
		.cp_data                 (cmd_mux_src_data),                                       //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                              //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                    //                .channel
		.rf_sink_ready           (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (cpu_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (cpu_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (cpu_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (cpu_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (cpu_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (cpu_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponserequest (),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) cpu_jtag_debug_module_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                            //       clk.clk
		.reset             (cpu_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (cpu_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (cpu_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (cpu_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (cpu_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (cpu_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (cpu_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (cpu_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (cpu_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (cpu_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (cpu_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ram_cpu_s1_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ram_cpu_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ram_cpu_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ram_cpu_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ram_cpu_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ram_cpu_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (ram_cpu_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ram_cpu_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ram_cpu_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (ram_cpu_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ram_cpu_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (ram_cpu_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (ram_cpu_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ram_cpu_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (ram_cpu_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (ram_cpu_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (ram_cpu_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_001_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                     //                .channel
		.rf_sink_ready           (ram_cpu_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ram_cpu_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ram_cpu_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ram_cpu_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ram_cpu_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ram_cpu_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ram_cpu_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ram_cpu_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ram_cpu_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ram_cpu_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ram_cpu_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ram_cpu_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ram_cpu_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ram_cpu_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_cpu_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ram_cpu_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_cpu_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ram_cpu_s1_agent_rf_source_data),             //        in.data
		.in_valid          (ram_cpu_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (ram_cpu_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ram_cpu_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ram_cpu_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ram_cpu_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ram_cpu_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ram_cpu_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ram_cpu_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ram_cpu_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ram_cpu_s2_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (ram_cpu_s2_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ram_cpu_s2_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ram_cpu_s2_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ram_cpu_s2_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ram_cpu_s2_agent_m0_lock),                    //                .lock
		.m0_readdata             (ram_cpu_s2_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ram_cpu_s2_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ram_cpu_s2_agent_m0_read),                    //                .read
		.m0_waitrequest          (ram_cpu_s2_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ram_cpu_s2_agent_m0_writedata),               //                .writedata
		.m0_write                (ram_cpu_s2_agent_m0_write),                   //                .write
		.rp_endofpacket          (ram_cpu_s2_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ram_cpu_s2_agent_rp_ready),                   //                .ready
		.rp_valid                (ram_cpu_s2_agent_rp_valid),                   //                .valid
		.rp_data                 (ram_cpu_s2_agent_rp_data),                    //                .data
		.rp_startofpacket        (ram_cpu_s2_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_002_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                     //                .channel
		.rf_sink_ready           (ram_cpu_s2_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ram_cpu_s2_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ram_cpu_s2_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ram_cpu_s2_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ram_cpu_s2_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ram_cpu_s2_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ram_cpu_s2_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ram_cpu_s2_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ram_cpu_s2_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ram_cpu_s2_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ram_cpu_s2_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ram_cpu_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ram_cpu_s2_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ram_cpu_s2_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ram_cpu_s2_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ram_cpu_s2_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ram_cpu_s2_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (ram_cpu_s2_agent_rf_source_data),             //        in.data
		.in_valid          (ram_cpu_s2_agent_rf_source_valid),            //          .valid
		.in_ready          (ram_cpu_s2_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ram_cpu_s2_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ram_cpu_s2_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ram_cpu_s2_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ram_cpu_s2_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ram_cpu_s2_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ram_cpu_s2_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ram_cpu_s2_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sys_id_control_slave_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (sys_id_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_id_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_id_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_id_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_id_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_id_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_id_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_id_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_id_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_id_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_id_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_id_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_id_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_id_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_id_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_id_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                               //                .channel
		.rf_sink_ready           (sys_id_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_id_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_id_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_id_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_id_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_id_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_id_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_id_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_id_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_id_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sys_id_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sys_id_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sys_id_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sys_id_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_id_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_id_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_id_control_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (sys_id_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sys_id_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_id_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_id_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_id_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_id_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_id_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_id_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_id_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_id_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sys_timer_s1_agent (
		.clk                     (clk_clk_clk),                                   //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (sys_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sys_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sys_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sys_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sys_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sys_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sys_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sys_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sys_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sys_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (sys_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sys_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sys_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (sys_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (sys_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sys_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_004_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                       //                .channel
		.rf_sink_ready           (sys_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sys_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sys_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sys_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sys_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sys_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sys_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sys_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sys_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sys_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sys_timer_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sys_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sys_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sys_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sys_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sys_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sys_timer_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                   //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (sys_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (sys_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (sys_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sys_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sys_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sys_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sys_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sys_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sys_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sys_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pc_uart_s1_agent (
		.clk                     (clk_clk_clk),                                 //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),  //       clk_reset.reset
		.m0_address              (pc_uart_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pc_uart_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pc_uart_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pc_uart_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pc_uart_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (pc_uart_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pc_uart_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pc_uart_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (pc_uart_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pc_uart_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (pc_uart_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (pc_uart_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pc_uart_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (pc_uart_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (pc_uart_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (pc_uart_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                       //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                       //                .valid
		.cp_data                 (cmd_mux_005_src_data),                        //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),               //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                 //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                     //                .channel
		.rf_sink_ready           (pc_uart_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pc_uart_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pc_uart_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pc_uart_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pc_uart_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pc_uart_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pc_uart_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pc_uart_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pc_uart_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pc_uart_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pc_uart_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pc_uart_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pc_uart_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pc_uart_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pc_uart_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pc_uart_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                       //     (terminated)
		.m0_writeresponserequest (),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pc_uart_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                 //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.in_data           (pc_uart_s1_agent_rf_source_data),             //        in.data
		.in_valid          (pc_uart_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (pc_uart_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pc_uart_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pc_uart_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pc_uart_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pc_uart_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pc_uart_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pc_uart_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pc_uart_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                       // (terminated)
		.csr_read          (1'b0),                                        // (terminated)
		.csr_write         (1'b0),                                        // (terminated)
		.csr_readdata      (),                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),        // (terminated)
		.almost_full_data  (),                                            // (terminated)
		.almost_empty_data (),                                            // (terminated)
		.in_empty          (1'b0),                                        // (terminated)
		.out_empty         (),                                            // (terminated)
		.in_error          (1'b0),                                        // (terminated)
		.out_error         (),                                            // (terminated)
		.in_channel        (1'b0),                                        // (terminated)
		.out_channel       ()                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) leds_port_s1_agent (
		.clk                     (clk_clk_clk),                                   //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (leds_port_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (leds_port_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (leds_port_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (leds_port_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (leds_port_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (leds_port_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (leds_port_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (leds_port_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (leds_port_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (leds_port_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (leds_port_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (leds_port_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (leds_port_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (leds_port_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (leds_port_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (leds_port_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                         //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                         //                .valid
		.cp_data                 (cmd_mux_006_src_data),                          //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                   //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                       //                .channel
		.rf_sink_ready           (leds_port_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (leds_port_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (leds_port_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (leds_port_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (leds_port_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (leds_port_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (leds_port_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (leds_port_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (leds_port_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (leds_port_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (leds_port_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (leds_port_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (leds_port_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (leds_port_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (leds_port_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (leds_port_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                         //     (terminated)
		.m0_writeresponserequest (),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) leds_port_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                   //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (leds_port_s1_agent_rf_source_data),             //        in.data
		.in_valid          (leds_port_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (leds_port_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (leds_port_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (leds_port_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (leds_port_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (leds_port_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (leds_port_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (leds_port_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (leds_port_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                         // (terminated)
		.csr_read          (1'b0),                                          // (terminated)
		.csr_write         (1'b0),                                          // (terminated)
		.csr_readdata      (),                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),          // (terminated)
		.almost_full_data  (),                                              // (terminated)
		.almost_empty_data (),                                              // (terminated)
		.in_empty          (1'b0),                                          // (terminated)
		.out_empty         (),                                              // (terminated)
		.in_error          (1'b0),                                          // (terminated)
		.out_error         (),                                              // (terminated)
		.in_channel        (1'b0),                                          // (terminated)
		.out_channel       ()                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) i2c_port_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (i2c_port_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (i2c_port_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (i2c_port_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (i2c_port_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (i2c_port_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (i2c_port_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (i2c_port_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (i2c_port_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (i2c_port_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (i2c_port_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (i2c_port_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (i2c_port_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (i2c_port_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (i2c_port_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (i2c_port_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (i2c_port_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_007_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                      //                .channel
		.rf_sink_ready           (i2c_port_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (i2c_port_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (i2c_port_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (i2c_port_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (i2c_port_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (i2c_port_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (i2c_port_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (i2c_port_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (i2c_port_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (i2c_port_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (i2c_port_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (i2c_port_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (i2c_port_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (i2c_port_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (i2c_port_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (i2c_port_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) i2c_port_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (i2c_port_s1_agent_rf_source_data),             //        in.data
		.in_valid          (i2c_port_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (i2c_port_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (i2c_port_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (i2c_port_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (i2c_port_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (i2c_port_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (i2c_port_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (i2c_port_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (i2c_port_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) laser_driver_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (laser_driver_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (laser_driver_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (laser_driver_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (laser_driver_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (laser_driver_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (laser_driver_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (laser_driver_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (laser_driver_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (laser_driver_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (laser_driver_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (laser_driver_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (laser_driver_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (laser_driver_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (laser_driver_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (laser_driver_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (laser_driver_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                      //                .channel
		.rf_sink_ready           (laser_driver_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (laser_driver_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (laser_driver_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (laser_driver_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (laser_driver_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (laser_driver_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (laser_driver_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (laser_driver_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (laser_driver_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (laser_driver_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (laser_driver_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (laser_driver_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (laser_driver_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (laser_driver_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (laser_driver_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (laser_driver_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) laser_driver_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (laser_driver_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (laser_driver_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (laser_driver_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (laser_driver_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (laser_driver_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (laser_driver_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (laser_driver_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (laser_driver_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (laser_driver_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (laser_driver_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) spi_tdc_avalon_slave_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (spi_tdc_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_tdc_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_tdc_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_tdc_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_tdc_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_tdc_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_tdc_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_tdc_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_tdc_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_tdc_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_tdc_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_tdc_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_tdc_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_tdc_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_tdc_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_tdc_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                               //                .channel
		.rf_sink_ready           (spi_tdc_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_tdc_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_tdc_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_tdc_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_tdc_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_tdc_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_tdc_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_tdc_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_tdc_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_tdc_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (spi_tdc_avalon_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (spi_tdc_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (spi_tdc_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (spi_tdc_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_tdc_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_tdc_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_tdc_avalon_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (spi_tdc_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (spi_tdc_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_tdc_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_tdc_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_tdc_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_tdc_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_tdc_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_tdc_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_tdc_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_tdc_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) pulse_generator_avalon_slave_agent (
		.clk                     (clk_clk_clk),                                                   //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (pulse_generator_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pulse_generator_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pulse_generator_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pulse_generator_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pulse_generator_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pulse_generator_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pulse_generator_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pulse_generator_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pulse_generator_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pulse_generator_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pulse_generator_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pulse_generator_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pulse_generator_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pulse_generator_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pulse_generator_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pulse_generator_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                       //                .channel
		.rf_sink_ready           (pulse_generator_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pulse_generator_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pulse_generator_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pulse_generator_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pulse_generator_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pulse_generator_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pulse_generator_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pulse_generator_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pulse_generator_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pulse_generator_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (pulse_generator_avalon_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (pulse_generator_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (pulse_generator_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (pulse_generator_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pulse_generator_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pulse_generator_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponserequest (),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pulse_generator_avalon_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                   //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (pulse_generator_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pulse_generator_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pulse_generator_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pulse_generator_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pulse_generator_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pulse_generator_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pulse_generator_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pulse_generator_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pulse_generator_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pulse_generator_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) spi_vga_avalon_slave_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (spi_vga_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_vga_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_vga_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_vga_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_vga_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_vga_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_vga_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_vga_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_vga_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_vga_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_vga_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_vga_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_vga_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_vga_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_vga_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_vga_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                               //                .channel
		.rf_sink_ready           (spi_vga_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_vga_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_vga_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_vga_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_vga_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_vga_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_vga_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_vga_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_vga_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_vga_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (spi_vga_avalon_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (spi_vga_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (spi_vga_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (spi_vga_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_vga_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_vga_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_vga_avalon_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (spi_vga_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (spi_vga_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_vga_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_vga_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_vga_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_vga_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_vga_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_vga_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_vga_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_vga_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) rs485_de_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (rs485_de_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (rs485_de_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (rs485_de_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (rs485_de_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (rs485_de_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (rs485_de_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (rs485_de_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (rs485_de_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (rs485_de_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (rs485_de_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (rs485_de_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (rs485_de_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (rs485_de_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (rs485_de_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (rs485_de_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (rs485_de_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_012_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                      //                .channel
		.rf_sink_ready           (rs485_de_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (rs485_de_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (rs485_de_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (rs485_de_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (rs485_de_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (rs485_de_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (rs485_de_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (rs485_de_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (rs485_de_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (rs485_de_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (rs485_de_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (rs485_de_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (rs485_de_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (rs485_de_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (rs485_de_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (rs485_de_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) rs485_de_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (rs485_de_s1_agent_rf_source_data),             //        in.data
		.in_valid          (rs485_de_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (rs485_de_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (rs485_de_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (rs485_de_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (rs485_de_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (rs485_de_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (rs485_de_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (rs485_de_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (rs485_de_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tdc_enable_s1_agent (
		.clk                     (clk_clk_clk),                                    //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (tdc_enable_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tdc_enable_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tdc_enable_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tdc_enable_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tdc_enable_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (tdc_enable_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tdc_enable_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tdc_enable_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (tdc_enable_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tdc_enable_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (tdc_enable_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (tdc_enable_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tdc_enable_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (tdc_enable_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (tdc_enable_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (tdc_enable_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_013_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                        //                .channel
		.rf_sink_ready           (tdc_enable_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tdc_enable_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tdc_enable_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tdc_enable_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tdc_enable_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tdc_enable_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tdc_enable_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tdc_enable_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tdc_enable_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tdc_enable_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (tdc_enable_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tdc_enable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (tdc_enable_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (tdc_enable_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tdc_enable_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tdc_enable_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponserequest (),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tdc_enable_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                    //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (tdc_enable_s1_agent_rf_source_data),             //        in.data
		.in_valid          (tdc_enable_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (tdc_enable_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tdc_enable_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tdc_enable_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tdc_enable_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tdc_enable_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tdc_enable_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tdc_enable_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tdc_enable_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) service_timer_s1_agent (
		.clk                     (clk_clk_clk),                                       //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (service_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (service_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (service_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (service_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (service_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (service_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (service_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (service_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (service_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (service_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (service_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (service_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (service_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (service_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (service_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (service_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_014_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                           //                .channel
		.rf_sink_ready           (service_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (service_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (service_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (service_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (service_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (service_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (service_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (service_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (service_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (service_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (service_timer_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (service_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (service_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (service_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (service_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (service_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponserequest (),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) service_timer_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                       //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (service_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (service_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (service_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (service_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (service_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (service_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (service_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (service_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (service_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (service_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) system_mode_s1_agent (
		.clk                     (clk_clk_clk),                                     //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),      //       clk_reset.reset
		.m0_address              (system_mode_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (system_mode_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (system_mode_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (system_mode_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (system_mode_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (system_mode_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (system_mode_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (system_mode_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (system_mode_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (system_mode_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (system_mode_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (system_mode_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (system_mode_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (system_mode_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (system_mode_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (system_mode_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                           //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                           //                .valid
		.cp_data                 (cmd_mux_015_src_data),                            //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                     //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                         //                .channel
		.rf_sink_ready           (system_mode_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (system_mode_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (system_mode_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (system_mode_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (system_mode_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (system_mode_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (system_mode_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (system_mode_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (system_mode_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (system_mode_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (system_mode_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (system_mode_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (system_mode_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (system_mode_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_mode_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (system_mode_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                           //     (terminated)
		.m0_writeresponserequest (),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_mode_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                     //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),      // clk_reset.reset
		.in_data           (system_mode_s1_agent_rf_source_data),             //        in.data
		.in_valid          (system_mode_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (system_mode_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_mode_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_mode_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_mode_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_mode_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_mode_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_mode_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_mode_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) amp_gain_s1_agent (
		.clk                     (clk_clk_clk),                                  //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (amp_gain_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (amp_gain_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (amp_gain_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (amp_gain_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (amp_gain_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (amp_gain_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (amp_gain_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (amp_gain_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (amp_gain_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (amp_gain_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (amp_gain_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (amp_gain_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (amp_gain_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (amp_gain_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (amp_gain_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (amp_gain_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                        //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                        //                .valid
		.cp_data                 (cmd_mux_016_src_data),                         //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                  //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                      //                .channel
		.rf_sink_ready           (amp_gain_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (amp_gain_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (amp_gain_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (amp_gain_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (amp_gain_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (amp_gain_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (amp_gain_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (amp_gain_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (amp_gain_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (amp_gain_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (amp_gain_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (amp_gain_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (amp_gain_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (amp_gain_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (amp_gain_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (amp_gain_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                        //     (terminated)
		.m0_writeresponserequest (),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) amp_gain_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                  //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (amp_gain_s1_agent_rf_source_data),             //        in.data
		.in_valid          (amp_gain_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (amp_gain_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (amp_gain_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (amp_gain_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (amp_gain_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (amp_gain_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (amp_gain_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (amp_gain_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (amp_gain_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                        // (terminated)
		.csr_read          (1'b0),                                         // (terminated)
		.csr_write         (1'b0),                                         // (terminated)
		.csr_readdata      (),                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),         // (terminated)
		.almost_full_data  (),                                             // (terminated)
		.almost_empty_data (),                                             // (terminated)
		.in_empty          (1'b0),                                         // (terminated)
		.out_empty         (),                                             // (terminated)
		.in_error          (1'b0),                                         // (terminated)
		.out_error         (),                                             // (terminated)
		.in_channel        (1'b0),                                         // (terminated)
		.out_channel       ()                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) apd_overcurrent_s1_agent (
		.clk                     (clk_clk_clk),                                         //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (apd_overcurrent_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (apd_overcurrent_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (apd_overcurrent_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (apd_overcurrent_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (apd_overcurrent_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (apd_overcurrent_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (apd_overcurrent_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (apd_overcurrent_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (apd_overcurrent_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (apd_overcurrent_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (apd_overcurrent_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (apd_overcurrent_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (apd_overcurrent_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (apd_overcurrent_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (apd_overcurrent_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (apd_overcurrent_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_017_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                             //                .channel
		.rf_sink_ready           (apd_overcurrent_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (apd_overcurrent_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (apd_overcurrent_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (apd_overcurrent_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (apd_overcurrent_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (apd_overcurrent_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (apd_overcurrent_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (apd_overcurrent_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (apd_overcurrent_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (apd_overcurrent_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (apd_overcurrent_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (apd_overcurrent_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (apd_overcurrent_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (apd_overcurrent_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (apd_overcurrent_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (apd_overcurrent_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponserequest (),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) apd_overcurrent_s1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                         //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (apd_overcurrent_s1_agent_rf_source_data),             //        in.data
		.in_valid          (apd_overcurrent_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (apd_overcurrent_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (apd_overcurrent_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (apd_overcurrent_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (apd_overcurrent_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (apd_overcurrent_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (apd_overcurrent_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (apd_overcurrent_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (apd_overcurrent_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) spi_apd_avalon_slave_agent (
		.clk                     (clk_clk_clk),                                           //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (spi_apd_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_apd_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_apd_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_apd_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_apd_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_apd_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_apd_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_apd_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_apd_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_apd_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_apd_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_apd_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_apd_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_apd_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_apd_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_apd_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                                 //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                                 //                .valid
		.cp_data                 (cmd_mux_018_src_data),                                  //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                           //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                               //                .channel
		.rf_sink_ready           (spi_apd_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_apd_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_apd_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_apd_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_apd_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_apd_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_apd_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_apd_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_apd_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_apd_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (spi_apd_avalon_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (spi_apd_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (spi_apd_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (spi_apd_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_apd_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_apd_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                 //     (terminated)
		.m0_writeresponserequest (),                                                      //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                   //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_apd_avalon_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                           //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (spi_apd_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (spi_apd_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_apd_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_apd_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_apd_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_apd_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_apd_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_apd_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_apd_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_apd_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) stepper_atten_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                   //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (stepper_atten_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (stepper_atten_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (stepper_atten_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (stepper_atten_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (stepper_atten_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (stepper_atten_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (stepper_atten_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (stepper_atten_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (stepper_atten_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (stepper_atten_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (stepper_atten_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (stepper_atten_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (stepper_atten_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (stepper_atten_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (stepper_atten_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (stepper_atten_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                       //                .channel
		.rf_sink_ready           (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (stepper_atten_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (stepper_atten_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (stepper_atten_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (stepper_atten_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (stepper_atten_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (stepper_atten_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (stepper_atten_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (stepper_atten_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (stepper_atten_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (stepper_atten_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (stepper_atten_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponserequest (),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) stepper_atten_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                   //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (stepper_atten_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (stepper_atten_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (stepper_atten_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (stepper_atten_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (stepper_atten_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (stepper_atten_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) stepper_iris_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (stepper_iris_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (stepper_iris_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (stepper_iris_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (stepper_iris_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (stepper_iris_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (stepper_iris_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (stepper_iris_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (stepper_iris_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (stepper_iris_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (stepper_iris_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (stepper_iris_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (stepper_iris_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (stepper_iris_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (stepper_iris_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (stepper_iris_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (stepper_iris_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                      //                .channel
		.rf_sink_ready           (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (stepper_iris_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (stepper_iris_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (stepper_iris_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (stepper_iris_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (stepper_iris_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (stepper_iris_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (stepper_iris_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (stepper_iris_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (stepper_iris_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (stepper_iris_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (stepper_iris_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) stepper_iris_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (stepper_iris_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (stepper_iris_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (stepper_iris_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (stepper_iris_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (stepper_iris_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (stepper_iris_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) laser_charge_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                  //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                   //       clk_reset.reset
		.m0_address              (laser_charge_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (laser_charge_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (laser_charge_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (laser_charge_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (laser_charge_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (laser_charge_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (laser_charge_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (laser_charge_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (laser_charge_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (laser_charge_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (laser_charge_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (laser_charge_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (laser_charge_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (laser_charge_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (laser_charge_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (laser_charge_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_021_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                                      //                .channel
		.rf_sink_ready           (laser_charge_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (laser_charge_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (laser_charge_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (laser_charge_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (laser_charge_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (laser_charge_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (laser_charge_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (laser_charge_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (laser_charge_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (laser_charge_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (laser_charge_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (laser_charge_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (laser_charge_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (laser_charge_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (laser_charge_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (laser_charge_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponserequest (),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) laser_charge_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                  //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.in_data           (laser_charge_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (laser_charge_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (laser_charge_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (laser_charge_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (laser_charge_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (laser_charge_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (laser_charge_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (laser_charge_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (laser_charge_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (laser_charge_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) tdc_start_pulse_gen_avalon_slave_0_agent (
		.clk                     (clk_clk_clk),                                                         //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                          //       clk_reset.reset
		.m0_address              (tdc_start_pulse_gen_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (tdc_start_pulse_gen_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (tdc_start_pulse_gen_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (tdc_start_pulse_gen_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (tdc_start_pulse_gen_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (tdc_start_pulse_gen_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (tdc_start_pulse_gen_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (tdc_start_pulse_gen_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (tdc_start_pulse_gen_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (tdc_start_pulse_gen_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (tdc_start_pulse_gen_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (tdc_start_pulse_gen_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (tdc_start_pulse_gen_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (tdc_start_pulse_gen_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (tdc_start_pulse_gen_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (tdc_start_pulse_gen_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_022_src_ready),                                               //              cp.ready
		.cp_valid                (cmd_mux_022_src_valid),                                               //                .valid
		.cp_data                 (cmd_mux_022_src_data),                                                //                .data
		.cp_startofpacket        (cmd_mux_022_src_startofpacket),                                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_022_src_endofpacket),                                         //                .endofpacket
		.cp_channel              (cmd_mux_022_src_channel),                                             //                .channel
		.rf_sink_ready           (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (tdc_start_pulse_gen_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                               //     (terminated)
		.m0_writeresponserequest (),                                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                         //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.in_data           (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (tdc_start_pulse_gen_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (tdc_start_pulse_gen_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                               // (terminated)
		.csr_read          (1'b0),                                                                // (terminated)
		.csr_write         (1'b0),                                                                // (terminated)
		.csr_readdata      (),                                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                                // (terminated)
		.almost_full_data  (),                                                                    // (terminated)
		.almost_empty_data (),                                                                    // (terminated)
		.in_empty          (1'b0),                                                                // (terminated)
		.out_empty         (),                                                                    // (terminated)
		.in_error          (1'b0),                                                                // (terminated)
		.out_error         (),                                                                    // (terminated)
		.in_channel        (1'b0),                                                                // (terminated)
		.out_channel       ()                                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sample_recorder_avalon_slave_agent (
		.clk                     (clk_clk_clk),                                                   //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (sample_recorder_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sample_recorder_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sample_recorder_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sample_recorder_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sample_recorder_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (sample_recorder_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sample_recorder_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sample_recorder_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (sample_recorder_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sample_recorder_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (sample_recorder_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (sample_recorder_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sample_recorder_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (sample_recorder_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (sample_recorder_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (sample_recorder_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_023_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_023_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_023_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_023_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_023_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_023_src_channel),                                       //                .channel
		.rf_sink_ready           (sample_recorder_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sample_recorder_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sample_recorder_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sample_recorder_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sample_recorder_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sample_recorder_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sample_recorder_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sample_recorder_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sample_recorder_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sample_recorder_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sample_recorder_avalon_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sample_recorder_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sample_recorder_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sample_recorder_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sample_recorder_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sample_recorder_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponserequest (),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sample_recorder_avalon_slave_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                   //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_data           (sample_recorder_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (sample_recorder_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (sample_recorder_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sample_recorder_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sample_recorder_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sample_recorder_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sample_recorder_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sample_recorder_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sample_recorder_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sample_recorder_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BEGIN_BURST           (71),
		.PKT_SYMBOL_W              (8),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_ADDR_H                (51),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (52),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.PKT_TRANS_READ            (55),
		.PKT_TRANS_LOCK            (56),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_BURSTWRAP_H           (63),
		.PKT_BURSTWRAP_L           (61),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_PROTECTION_H          (86),
		.PKT_PROTECTION_L          (84),
		.PKT_RESPONSE_STATUS_H     (92),
		.PKT_RESPONSE_STATUS_L     (91),
		.PKT_BURST_SIZE_H          (66),
		.PKT_BURST_SIZE_L          (64),
		.PKT_ORI_BURST_SIZE_L      (93),
		.PKT_ORI_BURST_SIZE_H      (95),
		.ST_CHANNEL_W              (25),
		.ST_DATA_W                 (96),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) sample_recorder_avalon_slave_1_agent (
		.clk                     (clk_clk_clk),                                                     //             clk.clk
		.reset                   (ram_cpu_reset1_reset_bridge_in_reset_reset),                      //       clk_reset.reset
		.m0_address              (sample_recorder_avalon_slave_1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (sample_recorder_avalon_slave_1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (sample_recorder_avalon_slave_1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (sample_recorder_avalon_slave_1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (sample_recorder_avalon_slave_1_agent_m0_lock),                    //                .lock
		.m0_readdata             (sample_recorder_avalon_slave_1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (sample_recorder_avalon_slave_1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (sample_recorder_avalon_slave_1_agent_m0_read),                    //                .read
		.m0_waitrequest          (sample_recorder_avalon_slave_1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (sample_recorder_avalon_slave_1_agent_m0_writedata),               //                .writedata
		.m0_write                (sample_recorder_avalon_slave_1_agent_m0_write),                   //                .write
		.rp_endofpacket          (sample_recorder_avalon_slave_1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (sample_recorder_avalon_slave_1_agent_rp_ready),                   //                .ready
		.rp_valid                (sample_recorder_avalon_slave_1_agent_rp_valid),                   //                .valid
		.rp_data                 (sample_recorder_avalon_slave_1_agent_rp_data),                    //                .data
		.rp_startofpacket        (sample_recorder_avalon_slave_1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_024_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_024_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_024_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_024_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_024_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_024_src_channel),                                         //                .channel
		.rf_sink_ready           (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (sample_recorder_avalon_slave_1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (sample_recorder_avalon_slave_1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (sample_recorder_avalon_slave_1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (sample_recorder_avalon_slave_1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (sample_recorder_avalon_slave_1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (sample_recorder_avalon_slave_1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (sample_recorder_avalon_slave_1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (sample_recorder_avalon_slave_1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (sample_recorder_avalon_slave_1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (sample_recorder_avalon_slave_1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (sample_recorder_avalon_slave_1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponserequest (),                                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (97),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) sample_recorder_avalon_slave_1_agent_rsp_fifo (
		.clk               (clk_clk_clk),                                                     //       clk.clk
		.reset             (ram_cpu_reset1_reset_bridge_in_reset_reset),                      // clk_reset.reset
		.in_data           (sample_recorder_avalon_slave_1_agent_rf_source_data),             //        in.data
		.in_valid          (sample_recorder_avalon_slave_1_agent_rf_source_valid),            //          .valid
		.in_ready          (sample_recorder_avalon_slave_1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (sample_recorder_avalon_slave_1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (sample_recorder_avalon_slave_1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (sample_recorder_avalon_slave_1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	rangefinder_sopc_mm_interconnect_0_router router (
		.sink_ready         (cpu_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (cpu_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (cpu_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (cpu_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                   //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_src_ready),                              //       src.ready
		.src_valid          (router_src_valid),                              //          .valid
		.src_data           (router_src_data),                               //          .data
		.src_channel        (router_src_channel),                            //          .channel
		.src_startofpacket  (router_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                         //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (cpu_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (cpu_data_master_agent_cp_valid),          //          .valid
		.sink_data          (cpu_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (cpu_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (cpu_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                    //       src.ready
		.src_valid          (router_001_src_valid),                    //          .valid
		.src_data           (router_001_src_data),                     //          .data
		.src_channel        (router_001_src_channel),                  //          .channel
		.src_startofpacket  (router_001_src_startofpacket),            //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)               //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (cpu_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (cpu_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (cpu_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (cpu_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (cpu_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                  //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_002_src_ready),                         //       src.ready
		.src_valid          (router_002_src_valid),                         //          .valid
		.src_data           (router_002_src_data),                          //          .data
		.src_channel        (router_002_src_channel),                       //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                 //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                    //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_003 router_003 (
		.sink_ready         (ram_cpu_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ram_cpu_s1_agent_rp_valid),                  //          .valid
		.sink_data          (ram_cpu_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (ram_cpu_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ram_cpu_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                       //       src.ready
		.src_valid          (router_003_src_valid),                       //          .valid
		.src_data           (router_003_src_data),                        //          .data
		.src_channel        (router_003_src_channel),                     //          .channel
		.src_startofpacket  (router_003_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (ram_cpu_s2_agent_rp_ready),                  //      sink.ready
		.sink_valid         (ram_cpu_s2_agent_rp_valid),                  //          .valid
		.sink_data          (ram_cpu_s2_agent_rp_data),                   //          .data
		.sink_startofpacket (ram_cpu_s2_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (ram_cpu_s2_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                       //       src.ready
		.src_valid          (router_004_src_valid),                       //          .valid
		.src_data           (router_004_src_data),                        //          .data
		.src_channel        (router_004_src_channel),                     //          .channel
		.src_startofpacket  (router_004_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_005 (
		.sink_ready         (sys_id_control_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sys_id_control_slave_agent_rp_valid),         //          .valid
		.sink_data          (sys_id_control_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sys_id_control_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sys_id_control_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_005_src_ready),                        //       src.ready
		.src_valid          (router_005_src_valid),                        //          .valid
		.src_data           (router_005_src_data),                         //          .data
		.src_channel        (router_005_src_channel),                      //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                   //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_006 (
		.sink_ready         (sys_timer_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (sys_timer_s1_agent_rp_valid),                //          .valid
		.sink_data          (sys_timer_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (sys_timer_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (sys_timer_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                       //       src.ready
		.src_valid          (router_006_src_valid),                       //          .valid
		.src_data           (router_006_src_data),                        //          .data
		.src_channel        (router_006_src_channel),                     //          .channel
		.src_startofpacket  (router_006_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_007 (
		.sink_ready         (pc_uart_s1_agent_rp_ready),                  //      sink.ready
		.sink_valid         (pc_uart_s1_agent_rp_valid),                  //          .valid
		.sink_data          (pc_uart_s1_agent_rp_data),                   //          .data
		.sink_startofpacket (pc_uart_s1_agent_rp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (pc_uart_s1_agent_rp_endofpacket),            //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                       //       src.ready
		.src_valid          (router_007_src_valid),                       //          .valid
		.src_data           (router_007_src_data),                        //          .data
		.src_channel        (router_007_src_channel),                     //          .channel
		.src_startofpacket  (router_007_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_008 (
		.sink_ready         (leds_port_s1_agent_rp_ready),                //      sink.ready
		.sink_valid         (leds_port_s1_agent_rp_valid),                //          .valid
		.sink_data          (leds_port_s1_agent_rp_data),                 //          .data
		.sink_startofpacket (leds_port_s1_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (leds_port_s1_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                       //       src.ready
		.src_valid          (router_008_src_valid),                       //          .valid
		.src_data           (router_008_src_data),                        //          .data
		.src_channel        (router_008_src_channel),                     //          .channel
		.src_startofpacket  (router_008_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_009 (
		.sink_ready         (i2c_port_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (i2c_port_s1_agent_rp_valid),                 //          .valid
		.sink_data          (i2c_port_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (i2c_port_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (i2c_port_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                       //       src.ready
		.src_valid          (router_009_src_valid),                       //          .valid
		.src_data           (router_009_src_data),                        //          .data
		.src_channel        (router_009_src_channel),                     //          .channel
		.src_startofpacket  (router_009_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_010 (
		.sink_ready         (laser_driver_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (laser_driver_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (laser_driver_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (laser_driver_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (laser_driver_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_010_src_ready),                               //       src.ready
		.src_valid          (router_010_src_valid),                               //          .valid
		.src_data           (router_010_src_data),                                //          .data
		.src_channel        (router_010_src_channel),                             //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                          //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_011 (
		.sink_ready         (spi_tdc_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_tdc_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (spi_tdc_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (spi_tdc_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_tdc_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_011_src_ready),                        //       src.ready
		.src_valid          (router_011_src_valid),                        //          .valid
		.src_data           (router_011_src_data),                         //          .data
		.src_channel        (router_011_src_channel),                      //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                   //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_012 (
		.sink_ready         (pulse_generator_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (pulse_generator_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (pulse_generator_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (pulse_generator_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (pulse_generator_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_012_src_ready),                                //       src.ready
		.src_valid          (router_012_src_valid),                                //          .valid
		.src_data           (router_012_src_data),                                 //          .data
		.src_channel        (router_012_src_channel),                              //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                           //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_013 (
		.sink_ready         (spi_vga_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_vga_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (spi_vga_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (spi_vga_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_vga_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_013_src_ready),                        //       src.ready
		.src_valid          (router_013_src_valid),                        //          .valid
		.src_data           (router_013_src_data),                         //          .data
		.src_channel        (router_013_src_channel),                      //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                   //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_014 (
		.sink_ready         (rs485_de_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (rs485_de_s1_agent_rp_valid),                 //          .valid
		.sink_data          (rs485_de_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (rs485_de_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (rs485_de_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                       //       src.ready
		.src_valid          (router_014_src_valid),                       //          .valid
		.src_data           (router_014_src_data),                        //          .data
		.src_channel        (router_014_src_channel),                     //          .channel
		.src_startofpacket  (router_014_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_015 (
		.sink_ready         (tdc_enable_s1_agent_rp_ready),               //      sink.ready
		.sink_valid         (tdc_enable_s1_agent_rp_valid),               //          .valid
		.sink_data          (tdc_enable_s1_agent_rp_data),                //          .data
		.sink_startofpacket (tdc_enable_s1_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (tdc_enable_s1_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                       //       src.ready
		.src_valid          (router_015_src_valid),                       //          .valid
		.src_data           (router_015_src_data),                        //          .data
		.src_channel        (router_015_src_channel),                     //          .channel
		.src_startofpacket  (router_015_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_016 (
		.sink_ready         (service_timer_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (service_timer_s1_agent_rp_valid),            //          .valid
		.sink_data          (service_timer_s1_agent_rp_data),             //          .data
		.sink_startofpacket (service_timer_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (service_timer_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_016_src_ready),                       //       src.ready
		.src_valid          (router_016_src_valid),                       //          .valid
		.src_data           (router_016_src_data),                        //          .data
		.src_channel        (router_016_src_channel),                     //          .channel
		.src_startofpacket  (router_016_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_017 (
		.sink_ready         (system_mode_s1_agent_rp_ready),              //      sink.ready
		.sink_valid         (system_mode_s1_agent_rp_valid),              //          .valid
		.sink_data          (system_mode_s1_agent_rp_data),               //          .data
		.sink_startofpacket (system_mode_s1_agent_rp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (system_mode_s1_agent_rp_endofpacket),        //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                       //       src.ready
		.src_valid          (router_017_src_valid),                       //          .valid
		.src_data           (router_017_src_data),                        //          .data
		.src_channel        (router_017_src_channel),                     //          .channel
		.src_startofpacket  (router_017_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_018 (
		.sink_ready         (amp_gain_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (amp_gain_s1_agent_rp_valid),                 //          .valid
		.sink_data          (amp_gain_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (amp_gain_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (amp_gain_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                       //       src.ready
		.src_valid          (router_018_src_valid),                       //          .valid
		.src_data           (router_018_src_data),                        //          .data
		.src_channel        (router_018_src_channel),                     //          .channel
		.src_startofpacket  (router_018_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_019 (
		.sink_ready         (apd_overcurrent_s1_agent_rp_ready),          //      sink.ready
		.sink_valid         (apd_overcurrent_s1_agent_rp_valid),          //          .valid
		.sink_data          (apd_overcurrent_s1_agent_rp_data),           //          .data
		.sink_startofpacket (apd_overcurrent_s1_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (apd_overcurrent_s1_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                       //       src.ready
		.src_valid          (router_019_src_valid),                       //          .valid
		.src_data           (router_019_src_data),                        //          .data
		.src_channel        (router_019_src_channel),                     //          .channel
		.src_startofpacket  (router_019_src_startofpacket),               //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_020 (
		.sink_ready         (spi_apd_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (spi_apd_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (spi_apd_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (spi_apd_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (spi_apd_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                 //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_020_src_ready),                        //       src.ready
		.src_valid          (router_020_src_valid),                        //          .valid
		.src_data           (router_020_src_data),                         //          .data
		.src_channel        (router_020_src_channel),                      //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                   //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_021 (
		.sink_ready         (stepper_atten_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (stepper_atten_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (stepper_atten_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (stepper_atten_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (stepper_atten_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_021_src_ready),                                //       src.ready
		.src_valid          (router_021_src_valid),                                //          .valid
		.src_data           (router_021_src_data),                                 //          .data
		.src_channel        (router_021_src_channel),                              //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                           //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_022 (
		.sink_ready         (stepper_iris_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (stepper_iris_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (stepper_iris_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (stepper_iris_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (stepper_iris_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_022_src_ready),                               //       src.ready
		.src_valid          (router_022_src_valid),                               //          .valid
		.src_data           (router_022_src_data),                                //          .data
		.src_channel        (router_022_src_channel),                             //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                          //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_023 (
		.sink_ready         (laser_charge_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (laser_charge_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (laser_charge_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (laser_charge_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (laser_charge_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                        //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_023_src_ready),                               //       src.ready
		.src_valid          (router_023_src_valid),                               //          .valid
		.src_data           (router_023_src_data),                                //          .data
		.src_channel        (router_023_src_channel),                             //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                          //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_024 (
		.sink_ready         (tdc_start_pulse_gen_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (tdc_start_pulse_gen_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (tdc_start_pulse_gen_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (tdc_start_pulse_gen_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (tdc_start_pulse_gen_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                               //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),                // clk_reset.reset
		.src_ready          (router_024_src_ready),                                      //       src.ready
		.src_valid          (router_024_src_valid),                                      //          .valid
		.src_data           (router_024_src_data),                                       //          .data
		.src_channel        (router_024_src_channel),                                    //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                                 //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_025 (
		.sink_ready         (sample_recorder_avalon_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (sample_recorder_avalon_slave_agent_rp_valid),         //          .valid
		.sink_data          (sample_recorder_avalon_slave_agent_rp_data),          //          .data
		.sink_startofpacket (sample_recorder_avalon_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sample_recorder_avalon_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                         //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),          // clk_reset.reset
		.src_ready          (router_025_src_ready),                                //       src.ready
		.src_valid          (router_025_src_valid),                                //          .valid
		.src_data           (router_025_src_data),                                 //          .data
		.src_channel        (router_025_src_channel),                              //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                           //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_router_004 router_026 (
		.sink_ready         (sample_recorder_avalon_slave_1_agent_rp_ready),         //      sink.ready
		.sink_valid         (sample_recorder_avalon_slave_1_agent_rp_valid),         //          .valid
		.sink_data          (sample_recorder_avalon_slave_1_agent_rp_data),          //          .data
		.sink_startofpacket (sample_recorder_avalon_slave_1_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (sample_recorder_avalon_slave_1_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_clk_clk),                                           //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset),            // clk_reset.reset
		.src_ready          (router_026_src_ready),                                  //       src.ready
		.src_valid          (router_026_src_valid),                                  //          .valid
		.src_data           (router_026_src_data),                                   //          .data
		.src_channel        (router_026_src_channel),                                //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                             //          .endofpacket
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (25),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) cpu_instruction_master_limiter (
		.clk                    (clk_clk_clk),                                          //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.cmd_sink_ready         (router_src_ready),                                     //  cmd_sink.ready
		.cmd_sink_valid         (router_src_valid),                                     //          .valid
		.cmd_sink_data          (router_src_data),                                      //          .data
		.cmd_sink_channel       (router_src_channel),                                   //          .channel
		.cmd_sink_startofpacket (router_src_startofpacket),                             //          .startofpacket
		.cmd_sink_endofpacket   (router_src_endofpacket),                               //          .endofpacket
		.cmd_src_ready          (cpu_instruction_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_instruction_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_instruction_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_instruction_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_instruction_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_src_ready),                                    //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_src_valid),                                    //          .valid
		.rsp_sink_channel       (rsp_mux_src_channel),                                  //          .channel
		.rsp_sink_data          (rsp_mux_src_data),                                     //          .data
		.rsp_sink_startofpacket (rsp_mux_src_startofpacket),                            //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_src_endofpacket),                              //          .endofpacket
		.rsp_src_ready          (cpu_instruction_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_instruction_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_instruction_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_instruction_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_instruction_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_instruction_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_instruction_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	altera_merlin_traffic_limiter #(
		.PKT_DEST_ID_H             (82),
		.PKT_DEST_ID_L             (78),
		.PKT_SRC_ID_H              (77),
		.PKT_SRC_ID_L              (73),
		.PKT_TRANS_POSTED          (53),
		.PKT_TRANS_WRITE           (54),
		.MAX_OUTSTANDING_RESPONSES (1),
		.PIPELINED                 (0),
		.ST_DATA_W                 (96),
		.ST_CHANNEL_W              (25),
		.VALID_WIDTH               (25),
		.ENFORCE_ORDER             (1),
		.PREVENT_HAZARDS           (0),
		.PKT_BYTE_CNT_H            (60),
		.PKT_BYTE_CNT_L            (58),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.REORDER                   (0)
	) cpu_data_master_limiter (
		.clk                    (clk_clk_clk),                                   //       clk.clk
		.reset                  (cpu_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.cmd_sink_ready         (router_001_src_ready),                          //  cmd_sink.ready
		.cmd_sink_valid         (router_001_src_valid),                          //          .valid
		.cmd_sink_data          (router_001_src_data),                           //          .data
		.cmd_sink_channel       (router_001_src_channel),                        //          .channel
		.cmd_sink_startofpacket (router_001_src_startofpacket),                  //          .startofpacket
		.cmd_sink_endofpacket   (router_001_src_endofpacket),                    //          .endofpacket
		.cmd_src_ready          (cpu_data_master_limiter_cmd_src_ready),         //   cmd_src.ready
		.cmd_src_data           (cpu_data_master_limiter_cmd_src_data),          //          .data
		.cmd_src_channel        (cpu_data_master_limiter_cmd_src_channel),       //          .channel
		.cmd_src_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //          .startofpacket
		.cmd_src_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //          .endofpacket
		.rsp_sink_ready         (rsp_mux_001_src_ready),                         //  rsp_sink.ready
		.rsp_sink_valid         (rsp_mux_001_src_valid),                         //          .valid
		.rsp_sink_channel       (rsp_mux_001_src_channel),                       //          .channel
		.rsp_sink_data          (rsp_mux_001_src_data),                          //          .data
		.rsp_sink_startofpacket (rsp_mux_001_src_startofpacket),                 //          .startofpacket
		.rsp_sink_endofpacket   (rsp_mux_001_src_endofpacket),                   //          .endofpacket
		.rsp_src_ready          (cpu_data_master_limiter_rsp_src_ready),         //   rsp_src.ready
		.rsp_src_valid          (cpu_data_master_limiter_rsp_src_valid),         //          .valid
		.rsp_src_data           (cpu_data_master_limiter_rsp_src_data),          //          .data
		.rsp_src_channel        (cpu_data_master_limiter_rsp_src_channel),       //          .channel
		.rsp_src_startofpacket  (cpu_data_master_limiter_rsp_src_startofpacket), //          .startofpacket
		.rsp_src_endofpacket    (cpu_data_master_limiter_rsp_src_endofpacket),   //          .endofpacket
		.cmd_src_valid          (cpu_data_master_limiter_cmd_valid_data)         // cmd_valid.data
	);

	rangefinder_sopc_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_clk_clk),                                          //        clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset),              //  clk_reset.reset
		.sink_ready         (cpu_instruction_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel       (cpu_instruction_master_limiter_cmd_src_channel),       //           .channel
		.sink_data          (cpu_instruction_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket (cpu_instruction_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket   (cpu_instruction_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid         (cpu_instruction_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready         (cmd_demux_src0_ready),                                 //       src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                 //           .valid
		.src0_data          (cmd_demux_src0_data),                                  //           .data
		.src0_channel       (cmd_demux_src0_channel),                               //           .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                         //           .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket),                           //           .endofpacket
		.src1_ready         (cmd_demux_src1_ready),                                 //       src1.ready
		.src1_valid         (cmd_demux_src1_valid),                                 //           .valid
		.src1_data          (cmd_demux_src1_data),                                  //           .data
		.src1_channel       (cmd_demux_src1_channel),                               //           .channel
		.src1_startofpacket (cmd_demux_src1_startofpacket),                         //           .startofpacket
		.src1_endofpacket   (cmd_demux_src1_endofpacket)                            //           .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                 (clk_clk_clk),                                   //        clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset),       //  clk_reset.reset
		.sink_ready          (cpu_data_master_limiter_cmd_src_ready),         //       sink.ready
		.sink_channel        (cpu_data_master_limiter_cmd_src_channel),       //           .channel
		.sink_data           (cpu_data_master_limiter_cmd_src_data),          //           .data
		.sink_startofpacket  (cpu_data_master_limiter_cmd_src_startofpacket), //           .startofpacket
		.sink_endofpacket    (cpu_data_master_limiter_cmd_src_endofpacket),   //           .endofpacket
		.sink_valid          (cpu_data_master_limiter_cmd_valid_data),        // sink_valid.data
		.src0_ready          (cmd_demux_001_src0_ready),                      //       src0.ready
		.src0_valid          (cmd_demux_001_src0_valid),                      //           .valid
		.src0_data           (cmd_demux_001_src0_data),                       //           .data
		.src0_channel        (cmd_demux_001_src0_channel),                    //           .channel
		.src0_startofpacket  (cmd_demux_001_src0_startofpacket),              //           .startofpacket
		.src0_endofpacket    (cmd_demux_001_src0_endofpacket),                //           .endofpacket
		.src1_ready          (cmd_demux_001_src1_ready),                      //       src1.ready
		.src1_valid          (cmd_demux_001_src1_valid),                      //           .valid
		.src1_data           (cmd_demux_001_src1_data),                       //           .data
		.src1_channel        (cmd_demux_001_src1_channel),                    //           .channel
		.src1_startofpacket  (cmd_demux_001_src1_startofpacket),              //           .startofpacket
		.src1_endofpacket    (cmd_demux_001_src1_endofpacket),                //           .endofpacket
		.src2_ready          (cmd_demux_001_src2_ready),                      //       src2.ready
		.src2_valid          (cmd_demux_001_src2_valid),                      //           .valid
		.src2_data           (cmd_demux_001_src2_data),                       //           .data
		.src2_channel        (cmd_demux_001_src2_channel),                    //           .channel
		.src2_startofpacket  (cmd_demux_001_src2_startofpacket),              //           .startofpacket
		.src2_endofpacket    (cmd_demux_001_src2_endofpacket),                //           .endofpacket
		.src3_ready          (cmd_demux_001_src3_ready),                      //       src3.ready
		.src3_valid          (cmd_demux_001_src3_valid),                      //           .valid
		.src3_data           (cmd_demux_001_src3_data),                       //           .data
		.src3_channel        (cmd_demux_001_src3_channel),                    //           .channel
		.src3_startofpacket  (cmd_demux_001_src3_startofpacket),              //           .startofpacket
		.src3_endofpacket    (cmd_demux_001_src3_endofpacket),                //           .endofpacket
		.src4_ready          (cmd_demux_001_src4_ready),                      //       src4.ready
		.src4_valid          (cmd_demux_001_src4_valid),                      //           .valid
		.src4_data           (cmd_demux_001_src4_data),                       //           .data
		.src4_channel        (cmd_demux_001_src4_channel),                    //           .channel
		.src4_startofpacket  (cmd_demux_001_src4_startofpacket),              //           .startofpacket
		.src4_endofpacket    (cmd_demux_001_src4_endofpacket),                //           .endofpacket
		.src5_ready          (cmd_demux_001_src5_ready),                      //       src5.ready
		.src5_valid          (cmd_demux_001_src5_valid),                      //           .valid
		.src5_data           (cmd_demux_001_src5_data),                       //           .data
		.src5_channel        (cmd_demux_001_src5_channel),                    //           .channel
		.src5_startofpacket  (cmd_demux_001_src5_startofpacket),              //           .startofpacket
		.src5_endofpacket    (cmd_demux_001_src5_endofpacket),                //           .endofpacket
		.src6_ready          (cmd_demux_001_src6_ready),                      //       src6.ready
		.src6_valid          (cmd_demux_001_src6_valid),                      //           .valid
		.src6_data           (cmd_demux_001_src6_data),                       //           .data
		.src6_channel        (cmd_demux_001_src6_channel),                    //           .channel
		.src6_startofpacket  (cmd_demux_001_src6_startofpacket),              //           .startofpacket
		.src6_endofpacket    (cmd_demux_001_src6_endofpacket),                //           .endofpacket
		.src7_ready          (cmd_demux_001_src7_ready),                      //       src7.ready
		.src7_valid          (cmd_demux_001_src7_valid),                      //           .valid
		.src7_data           (cmd_demux_001_src7_data),                       //           .data
		.src7_channel        (cmd_demux_001_src7_channel),                    //           .channel
		.src7_startofpacket  (cmd_demux_001_src7_startofpacket),              //           .startofpacket
		.src7_endofpacket    (cmd_demux_001_src7_endofpacket),                //           .endofpacket
		.src8_ready          (cmd_demux_001_src8_ready),                      //       src8.ready
		.src8_valid          (cmd_demux_001_src8_valid),                      //           .valid
		.src8_data           (cmd_demux_001_src8_data),                       //           .data
		.src8_channel        (cmd_demux_001_src8_channel),                    //           .channel
		.src8_startofpacket  (cmd_demux_001_src8_startofpacket),              //           .startofpacket
		.src8_endofpacket    (cmd_demux_001_src8_endofpacket),                //           .endofpacket
		.src9_ready          (cmd_demux_001_src9_ready),                      //       src9.ready
		.src9_valid          (cmd_demux_001_src9_valid),                      //           .valid
		.src9_data           (cmd_demux_001_src9_data),                       //           .data
		.src9_channel        (cmd_demux_001_src9_channel),                    //           .channel
		.src9_startofpacket  (cmd_demux_001_src9_startofpacket),              //           .startofpacket
		.src9_endofpacket    (cmd_demux_001_src9_endofpacket),                //           .endofpacket
		.src10_ready         (cmd_demux_001_src10_ready),                     //      src10.ready
		.src10_valid         (cmd_demux_001_src10_valid),                     //           .valid
		.src10_data          (cmd_demux_001_src10_data),                      //           .data
		.src10_channel       (cmd_demux_001_src10_channel),                   //           .channel
		.src10_startofpacket (cmd_demux_001_src10_startofpacket),             //           .startofpacket
		.src10_endofpacket   (cmd_demux_001_src10_endofpacket),               //           .endofpacket
		.src11_ready         (cmd_demux_001_src11_ready),                     //      src11.ready
		.src11_valid         (cmd_demux_001_src11_valid),                     //           .valid
		.src11_data          (cmd_demux_001_src11_data),                      //           .data
		.src11_channel       (cmd_demux_001_src11_channel),                   //           .channel
		.src11_startofpacket (cmd_demux_001_src11_startofpacket),             //           .startofpacket
		.src11_endofpacket   (cmd_demux_001_src11_endofpacket),               //           .endofpacket
		.src12_ready         (cmd_demux_001_src12_ready),                     //      src12.ready
		.src12_valid         (cmd_demux_001_src12_valid),                     //           .valid
		.src12_data          (cmd_demux_001_src12_data),                      //           .data
		.src12_channel       (cmd_demux_001_src12_channel),                   //           .channel
		.src12_startofpacket (cmd_demux_001_src12_startofpacket),             //           .startofpacket
		.src12_endofpacket   (cmd_demux_001_src12_endofpacket),               //           .endofpacket
		.src13_ready         (cmd_demux_001_src13_ready),                     //      src13.ready
		.src13_valid         (cmd_demux_001_src13_valid),                     //           .valid
		.src13_data          (cmd_demux_001_src13_data),                      //           .data
		.src13_channel       (cmd_demux_001_src13_channel),                   //           .channel
		.src13_startofpacket (cmd_demux_001_src13_startofpacket),             //           .startofpacket
		.src13_endofpacket   (cmd_demux_001_src13_endofpacket),               //           .endofpacket
		.src14_ready         (cmd_demux_001_src14_ready),                     //      src14.ready
		.src14_valid         (cmd_demux_001_src14_valid),                     //           .valid
		.src14_data          (cmd_demux_001_src14_data),                      //           .data
		.src14_channel       (cmd_demux_001_src14_channel),                   //           .channel
		.src14_startofpacket (cmd_demux_001_src14_startofpacket),             //           .startofpacket
		.src14_endofpacket   (cmd_demux_001_src14_endofpacket),               //           .endofpacket
		.src15_ready         (cmd_demux_001_src15_ready),                     //      src15.ready
		.src15_valid         (cmd_demux_001_src15_valid),                     //           .valid
		.src15_data          (cmd_demux_001_src15_data),                      //           .data
		.src15_channel       (cmd_demux_001_src15_channel),                   //           .channel
		.src15_startofpacket (cmd_demux_001_src15_startofpacket),             //           .startofpacket
		.src15_endofpacket   (cmd_demux_001_src15_endofpacket),               //           .endofpacket
		.src16_ready         (cmd_demux_001_src16_ready),                     //      src16.ready
		.src16_valid         (cmd_demux_001_src16_valid),                     //           .valid
		.src16_data          (cmd_demux_001_src16_data),                      //           .data
		.src16_channel       (cmd_demux_001_src16_channel),                   //           .channel
		.src16_startofpacket (cmd_demux_001_src16_startofpacket),             //           .startofpacket
		.src16_endofpacket   (cmd_demux_001_src16_endofpacket),               //           .endofpacket
		.src17_ready         (cmd_demux_001_src17_ready),                     //      src17.ready
		.src17_valid         (cmd_demux_001_src17_valid),                     //           .valid
		.src17_data          (cmd_demux_001_src17_data),                      //           .data
		.src17_channel       (cmd_demux_001_src17_channel),                   //           .channel
		.src17_startofpacket (cmd_demux_001_src17_startofpacket),             //           .startofpacket
		.src17_endofpacket   (cmd_demux_001_src17_endofpacket),               //           .endofpacket
		.src18_ready         (cmd_demux_001_src18_ready),                     //      src18.ready
		.src18_valid         (cmd_demux_001_src18_valid),                     //           .valid
		.src18_data          (cmd_demux_001_src18_data),                      //           .data
		.src18_channel       (cmd_demux_001_src18_channel),                   //           .channel
		.src18_startofpacket (cmd_demux_001_src18_startofpacket),             //           .startofpacket
		.src18_endofpacket   (cmd_demux_001_src18_endofpacket),               //           .endofpacket
		.src19_ready         (cmd_demux_001_src19_ready),                     //      src19.ready
		.src19_valid         (cmd_demux_001_src19_valid),                     //           .valid
		.src19_data          (cmd_demux_001_src19_data),                      //           .data
		.src19_channel       (cmd_demux_001_src19_channel),                   //           .channel
		.src19_startofpacket (cmd_demux_001_src19_startofpacket),             //           .startofpacket
		.src19_endofpacket   (cmd_demux_001_src19_endofpacket),               //           .endofpacket
		.src20_ready         (cmd_demux_001_src20_ready),                     //      src20.ready
		.src20_valid         (cmd_demux_001_src20_valid),                     //           .valid
		.src20_data          (cmd_demux_001_src20_data),                      //           .data
		.src20_channel       (cmd_demux_001_src20_channel),                   //           .channel
		.src20_startofpacket (cmd_demux_001_src20_startofpacket),             //           .startofpacket
		.src20_endofpacket   (cmd_demux_001_src20_endofpacket),               //           .endofpacket
		.src21_ready         (cmd_demux_001_src21_ready),                     //      src21.ready
		.src21_valid         (cmd_demux_001_src21_valid),                     //           .valid
		.src21_data          (cmd_demux_001_src21_data),                      //           .data
		.src21_channel       (cmd_demux_001_src21_channel),                   //           .channel
		.src21_startofpacket (cmd_demux_001_src21_startofpacket),             //           .startofpacket
		.src21_endofpacket   (cmd_demux_001_src21_endofpacket),               //           .endofpacket
		.src22_ready         (cmd_demux_001_src22_ready),                     //      src22.ready
		.src22_valid         (cmd_demux_001_src22_valid),                     //           .valid
		.src22_data          (cmd_demux_001_src22_data),                      //           .data
		.src22_channel       (cmd_demux_001_src22_channel),                   //           .channel
		.src22_startofpacket (cmd_demux_001_src22_startofpacket),             //           .startofpacket
		.src22_endofpacket   (cmd_demux_001_src22_endofpacket),               //           .endofpacket
		.src23_ready         (cmd_demux_001_src23_ready),                     //      src23.ready
		.src23_valid         (cmd_demux_001_src23_valid),                     //           .valid
		.src23_data          (cmd_demux_001_src23_data),                      //           .data
		.src23_channel       (cmd_demux_001_src23_channel),                   //           .channel
		.src23_startofpacket (cmd_demux_001_src23_startofpacket),             //           .startofpacket
		.src23_endofpacket   (cmd_demux_001_src23_endofpacket)                //           .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                       //       src.ready
		.src_valid           (cmd_mux_src_valid),                       //          .valid
		.src_data            (cmd_mux_src_data),                        //          .data
		.src_channel         (cmd_mux_src_channel),                     //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                    //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                  //          .channel
		.sink0_data          (cmd_demux_src0_data),                     //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),              //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket)           //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                      //          .valid
		.src_data            (cmd_mux_001_src_data),                       //          .data
		.src_channel         (cmd_mux_001_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                       //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                       //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                     //          .channel
		.sink0_data          (cmd_demux_src1_data),                        //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket)                  //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                      //          .valid
		.src_data            (cmd_mux_002_src_data),                       //          .data
		.src_channel         (cmd_mux_002_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src1_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src1_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src1_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src1_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src1_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src1_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                      //          .valid
		.src_data            (cmd_mux_003_src_data),                       //          .data
		.src_channel         (cmd_mux_003_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src2_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src2_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src2_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src2_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src2_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src2_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_004 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                      //          .valid
		.src_data            (cmd_mux_004_src_data),                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src3_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src3_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src3_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src3_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src3_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src3_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_005 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                      //          .valid
		.src_data            (cmd_mux_005_src_data),                       //          .data
		.src_channel         (cmd_mux_005_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src4_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src4_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src4_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src4_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src4_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src4_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_006 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                      //          .valid
		.src_data            (cmd_mux_006_src_data),                       //          .data
		.src_channel         (cmd_mux_006_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src5_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src5_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src5_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src5_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src5_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src5_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_007 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                      //          .valid
		.src_data            (cmd_mux_007_src_data),                       //          .data
		.src_channel         (cmd_mux_007_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src6_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src6_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src6_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src6_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src6_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src6_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_008 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                      //          .valid
		.src_data            (cmd_mux_008_src_data),                       //          .data
		.src_channel         (cmd_mux_008_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src7_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src7_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src7_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src7_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src7_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src7_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_009 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                      //          .valid
		.src_data            (cmd_mux_009_src_data),                       //          .data
		.src_channel         (cmd_mux_009_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src8_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src8_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src8_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src8_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src8_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src8_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_010 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                      //          .valid
		.src_data            (cmd_mux_010_src_data),                       //          .data
		.src_channel         (cmd_mux_010_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src9_ready),                   //     sink0.ready
		.sink0_valid         (cmd_demux_001_src9_valid),                   //          .valid
		.sink0_channel       (cmd_demux_001_src9_channel),                 //          .channel
		.sink0_data          (cmd_demux_001_src9_data),                    //          .data
		.sink0_startofpacket (cmd_demux_001_src9_startofpacket),           //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src9_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_011 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                      //          .valid
		.src_data            (cmd_mux_011_src_data),                       //          .data
		.src_channel         (cmd_mux_011_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src10_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src10_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src10_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src10_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src10_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src10_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_012 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                      //          .valid
		.src_data            (cmd_mux_012_src_data),                       //          .data
		.src_channel         (cmd_mux_012_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src11_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src11_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src11_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src11_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src11_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src11_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_013 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                      //          .valid
		.src_data            (cmd_mux_013_src_data),                       //          .data
		.src_channel         (cmd_mux_013_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src12_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src12_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src12_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src12_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src12_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src12_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_014 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                      //          .valid
		.src_data            (cmd_mux_014_src_data),                       //          .data
		.src_channel         (cmd_mux_014_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src13_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src13_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src13_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src13_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src13_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src13_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_015 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                      //          .valid
		.src_data            (cmd_mux_015_src_data),                       //          .data
		.src_channel         (cmd_mux_015_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src14_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src14_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src14_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src14_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src14_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src14_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_016 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                      //          .valid
		.src_data            (cmd_mux_016_src_data),                       //          .data
		.src_channel         (cmd_mux_016_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src15_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src15_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src15_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src15_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src15_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src15_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_017 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                      //          .valid
		.src_data            (cmd_mux_017_src_data),                       //          .data
		.src_channel         (cmd_mux_017_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src16_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src16_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src16_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src16_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src16_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src16_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_018 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                      //          .valid
		.src_data            (cmd_mux_018_src_data),                       //          .data
		.src_channel         (cmd_mux_018_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src17_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src17_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src17_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src17_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src17_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src17_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_019 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                      //          .valid
		.src_data            (cmd_mux_019_src_data),                       //          .data
		.src_channel         (cmd_mux_019_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src18_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src18_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src18_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src18_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src18_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src18_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_020 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                      //          .valid
		.src_data            (cmd_mux_020_src_data),                       //          .data
		.src_channel         (cmd_mux_020_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src19_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src19_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src19_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src19_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src19_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src19_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_021 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                      //          .valid
		.src_data            (cmd_mux_021_src_data),                       //          .data
		.src_channel         (cmd_mux_021_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src20_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src20_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src20_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src20_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src20_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src20_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_022 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_022_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_022_src_valid),                      //          .valid
		.src_data            (cmd_mux_022_src_data),                       //          .data
		.src_channel         (cmd_mux_022_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_022_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_022_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src21_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src21_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src21_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src21_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src21_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src21_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_023 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_023_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_023_src_valid),                      //          .valid
		.src_data            (cmd_mux_023_src_data),                       //          .data
		.src_channel         (cmd_mux_023_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_023_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_023_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src22_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src22_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src22_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src22_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src22_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src22_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_cmd_mux_001 cmd_mux_024 (
		.clk                 (clk_clk_clk),                                //       clk.clk
		.reset               (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_024_src_ready),                      //       src.ready
		.src_valid           (cmd_mux_024_src_valid),                      //          .valid
		.src_data            (cmd_mux_024_src_data),                       //          .data
		.src_channel         (cmd_mux_024_src_channel),                    //          .channel
		.src_startofpacket   (cmd_mux_024_src_startofpacket),              //          .startofpacket
		.src_endofpacket     (cmd_mux_024_src_endofpacket),                //          .endofpacket
		.sink0_ready         (cmd_demux_001_src23_ready),                  //     sink0.ready
		.sink0_valid         (cmd_demux_001_src23_valid),                  //          .valid
		.sink0_channel       (cmd_demux_001_src23_channel),                //          .channel
		.sink0_data          (cmd_demux_001_src23_data),                   //          .data
		.sink0_startofpacket (cmd_demux_001_src23_startofpacket),          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_001_src23_endofpacket)             //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_clk_clk),                             //       clk.clk
		.reset              (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                    //      sink.ready
		.sink_channel       (router_002_src_channel),                  //          .channel
		.sink_data          (router_002_src_data),                     //          .data
		.sink_startofpacket (router_002_src_startofpacket),            //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),              //          .endofpacket
		.sink_valid         (router_002_src_valid),                    //          .valid
		.src0_ready         (rsp_demux_src0_ready),                    //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                    //          .valid
		.src0_data          (rsp_demux_src0_data),                     //          .data
		.src0_channel       (rsp_demux_src0_channel),                  //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                    //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                    //          .valid
		.src1_data          (rsp_demux_src1_data),                     //          .data
		.src1_channel       (rsp_demux_src1_channel),                  //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),            //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket)               //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                       //      sink.ready
		.sink_channel       (router_003_src_channel),                     //          .channel
		.sink_data          (router_003_src_data),                        //          .data
		.sink_startofpacket (router_003_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_003_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_001_src0_data),                    //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                       //      sink.ready
		.sink_channel       (router_004_src_channel),                     //          .channel
		.sink_data          (router_004_src_data),                        //          .data
		.sink_startofpacket (router_004_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_004_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_002_src0_data),                    //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                       //      sink.ready
		.sink_channel       (router_005_src_channel),                     //          .channel
		.sink_data          (router_005_src_data),                        //          .data
		.sink_startofpacket (router_005_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_005_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_003_src0_data),                    //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_004 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                       //      sink.ready
		.sink_channel       (router_006_src_channel),                     //          .channel
		.sink_data          (router_006_src_data),                        //          .data
		.sink_startofpacket (router_006_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_006_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_004_src0_data),                    //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_005 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                       //      sink.ready
		.sink_channel       (router_007_src_channel),                     //          .channel
		.sink_data          (router_007_src_data),                        //          .data
		.sink_startofpacket (router_007_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_007_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_005_src0_data),                    //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_006 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                       //      sink.ready
		.sink_channel       (router_008_src_channel),                     //          .channel
		.sink_data          (router_008_src_data),                        //          .data
		.sink_startofpacket (router_008_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_008_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_006_src0_data),                    //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_007 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                       //      sink.ready
		.sink_channel       (router_009_src_channel),                     //          .channel
		.sink_data          (router_009_src_data),                        //          .data
		.sink_startofpacket (router_009_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_009_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_007_src0_data),                    //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_008 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                       //      sink.ready
		.sink_channel       (router_010_src_channel),                     //          .channel
		.sink_data          (router_010_src_data),                        //          .data
		.sink_startofpacket (router_010_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_010_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_008_src0_data),                    //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_009 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                       //      sink.ready
		.sink_channel       (router_011_src_channel),                     //          .channel
		.sink_data          (router_011_src_data),                        //          .data
		.sink_startofpacket (router_011_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_011_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_009_src0_data),                    //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_010 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                       //      sink.ready
		.sink_channel       (router_012_src_channel),                     //          .channel
		.sink_data          (router_012_src_data),                        //          .data
		.sink_startofpacket (router_012_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_012_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_010_src0_data),                    //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_011 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                       //      sink.ready
		.sink_channel       (router_013_src_channel),                     //          .channel
		.sink_data          (router_013_src_data),                        //          .data
		.sink_startofpacket (router_013_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_013_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_011_src0_data),                    //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_012 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                       //      sink.ready
		.sink_channel       (router_014_src_channel),                     //          .channel
		.sink_data          (router_014_src_data),                        //          .data
		.sink_startofpacket (router_014_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_014_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_012_src0_data),                    //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_013 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                       //      sink.ready
		.sink_channel       (router_015_src_channel),                     //          .channel
		.sink_data          (router_015_src_data),                        //          .data
		.sink_startofpacket (router_015_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_015_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_013_src0_data),                    //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_014 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                       //      sink.ready
		.sink_channel       (router_016_src_channel),                     //          .channel
		.sink_data          (router_016_src_data),                        //          .data
		.sink_startofpacket (router_016_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_016_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_014_src0_data),                    //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_015 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                       //      sink.ready
		.sink_channel       (router_017_src_channel),                     //          .channel
		.sink_data          (router_017_src_data),                        //          .data
		.sink_startofpacket (router_017_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_017_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_015_src0_data),                    //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_016 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                       //      sink.ready
		.sink_channel       (router_018_src_channel),                     //          .channel
		.sink_data          (router_018_src_data),                        //          .data
		.sink_startofpacket (router_018_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_018_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_016_src0_data),                    //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_017 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                       //      sink.ready
		.sink_channel       (router_019_src_channel),                     //          .channel
		.sink_data          (router_019_src_data),                        //          .data
		.sink_startofpacket (router_019_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_019_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_017_src0_data),                    //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_018 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                       //      sink.ready
		.sink_channel       (router_020_src_channel),                     //          .channel
		.sink_data          (router_020_src_data),                        //          .data
		.sink_startofpacket (router_020_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_020_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_018_src0_data),                    //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_019 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                       //      sink.ready
		.sink_channel       (router_021_src_channel),                     //          .channel
		.sink_data          (router_021_src_data),                        //          .data
		.sink_startofpacket (router_021_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_021_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_019_src0_data),                    //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_020 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                       //      sink.ready
		.sink_channel       (router_022_src_channel),                     //          .channel
		.sink_data          (router_022_src_data),                        //          .data
		.sink_startofpacket (router_022_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_022_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_020_src0_data),                    //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_021 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                       //      sink.ready
		.sink_channel       (router_023_src_channel),                     //          .channel
		.sink_data          (router_023_src_data),                        //          .data
		.sink_startofpacket (router_023_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_023_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_021_src0_data),                    //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_022 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                       //      sink.ready
		.sink_channel       (router_024_src_channel),                     //          .channel
		.sink_data          (router_024_src_data),                        //          .data
		.sink_startofpacket (router_024_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_024_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_022_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_022_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_022_src0_data),                    //          .data
		.src0_channel       (rsp_demux_022_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_022_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_022_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_023 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                       //      sink.ready
		.sink_channel       (router_025_src_channel),                     //          .channel
		.sink_data          (router_025_src_data),                        //          .data
		.sink_startofpacket (router_025_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_025_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_023_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_023_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_023_src0_data),                    //          .data
		.src0_channel       (rsp_demux_023_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_023_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_023_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_demux_001 rsp_demux_024 (
		.clk                (clk_clk_clk),                                //       clk.clk
		.reset              (ram_cpu_reset1_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                       //      sink.ready
		.sink_channel       (router_026_src_channel),                     //          .channel
		.sink_data          (router_026_src_data),                        //          .data
		.sink_startofpacket (router_026_src_startofpacket),               //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                 //          .endofpacket
		.sink_valid         (router_026_src_valid),                       //          .valid
		.src0_ready         (rsp_demux_024_src0_ready),                   //      src0.ready
		.src0_valid         (rsp_demux_024_src0_valid),                   //          .valid
		.src0_data          (rsp_demux_024_src0_data),                    //          .data
		.src0_channel       (rsp_demux_024_src0_channel),                 //          .channel
		.src0_startofpacket (rsp_demux_024_src0_startofpacket),           //          .startofpacket
		.src0_endofpacket   (rsp_demux_024_src0_endofpacket)              //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_clk_clk),                             //       clk.clk
		.reset               (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                       //       src.ready
		.src_valid           (rsp_mux_src_valid),                       //          .valid
		.src_data            (rsp_mux_src_data),                        //          .data
		.src_channel         (rsp_mux_src_channel),                     //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),               //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                 //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                    //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                    //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                  //          .channel
		.sink0_data          (rsp_demux_src0_data),                     //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),            //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket),              //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),              //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                 //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket)           //          .endofpacket
	);

	rangefinder_sopc_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                  (clk_clk_clk),                             //       clk.clk
		.reset                (cpu_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_001_src_ready),                   //       src.ready
		.src_valid            (rsp_mux_001_src_valid),                   //          .valid
		.src_data             (rsp_mux_001_src_data),                    //          .data
		.src_channel          (rsp_mux_001_src_channel),                 //          .channel
		.src_startofpacket    (rsp_mux_001_src_startofpacket),           //          .startofpacket
		.src_endofpacket      (rsp_mux_001_src_endofpacket),             //          .endofpacket
		.sink0_ready          (rsp_demux_src1_ready),                    //     sink0.ready
		.sink0_valid          (rsp_demux_src1_valid),                    //          .valid
		.sink0_channel        (rsp_demux_src1_channel),                  //          .channel
		.sink0_data           (rsp_demux_src1_data),                     //          .data
		.sink0_startofpacket  (rsp_demux_src1_startofpacket),            //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src1_endofpacket),              //          .endofpacket
		.sink1_ready          (rsp_demux_002_src0_ready),                //     sink1.ready
		.sink1_valid          (rsp_demux_002_src0_valid),                //          .valid
		.sink1_channel        (rsp_demux_002_src0_channel),              //          .channel
		.sink1_data           (rsp_demux_002_src0_data),                 //          .data
		.sink1_startofpacket  (rsp_demux_002_src0_startofpacket),        //          .startofpacket
		.sink1_endofpacket    (rsp_demux_002_src0_endofpacket),          //          .endofpacket
		.sink2_ready          (rsp_demux_003_src0_ready),                //     sink2.ready
		.sink2_valid          (rsp_demux_003_src0_valid),                //          .valid
		.sink2_channel        (rsp_demux_003_src0_channel),              //          .channel
		.sink2_data           (rsp_demux_003_src0_data),                 //          .data
		.sink2_startofpacket  (rsp_demux_003_src0_startofpacket),        //          .startofpacket
		.sink2_endofpacket    (rsp_demux_003_src0_endofpacket),          //          .endofpacket
		.sink3_ready          (rsp_demux_004_src0_ready),                //     sink3.ready
		.sink3_valid          (rsp_demux_004_src0_valid),                //          .valid
		.sink3_channel        (rsp_demux_004_src0_channel),              //          .channel
		.sink3_data           (rsp_demux_004_src0_data),                 //          .data
		.sink3_startofpacket  (rsp_demux_004_src0_startofpacket),        //          .startofpacket
		.sink3_endofpacket    (rsp_demux_004_src0_endofpacket),          //          .endofpacket
		.sink4_ready          (rsp_demux_005_src0_ready),                //     sink4.ready
		.sink4_valid          (rsp_demux_005_src0_valid),                //          .valid
		.sink4_channel        (rsp_demux_005_src0_channel),              //          .channel
		.sink4_data           (rsp_demux_005_src0_data),                 //          .data
		.sink4_startofpacket  (rsp_demux_005_src0_startofpacket),        //          .startofpacket
		.sink4_endofpacket    (rsp_demux_005_src0_endofpacket),          //          .endofpacket
		.sink5_ready          (rsp_demux_006_src0_ready),                //     sink5.ready
		.sink5_valid          (rsp_demux_006_src0_valid),                //          .valid
		.sink5_channel        (rsp_demux_006_src0_channel),              //          .channel
		.sink5_data           (rsp_demux_006_src0_data),                 //          .data
		.sink5_startofpacket  (rsp_demux_006_src0_startofpacket),        //          .startofpacket
		.sink5_endofpacket    (rsp_demux_006_src0_endofpacket),          //          .endofpacket
		.sink6_ready          (rsp_demux_007_src0_ready),                //     sink6.ready
		.sink6_valid          (rsp_demux_007_src0_valid),                //          .valid
		.sink6_channel        (rsp_demux_007_src0_channel),              //          .channel
		.sink6_data           (rsp_demux_007_src0_data),                 //          .data
		.sink6_startofpacket  (rsp_demux_007_src0_startofpacket),        //          .startofpacket
		.sink6_endofpacket    (rsp_demux_007_src0_endofpacket),          //          .endofpacket
		.sink7_ready          (rsp_demux_008_src0_ready),                //     sink7.ready
		.sink7_valid          (rsp_demux_008_src0_valid),                //          .valid
		.sink7_channel        (rsp_demux_008_src0_channel),              //          .channel
		.sink7_data           (rsp_demux_008_src0_data),                 //          .data
		.sink7_startofpacket  (rsp_demux_008_src0_startofpacket),        //          .startofpacket
		.sink7_endofpacket    (rsp_demux_008_src0_endofpacket),          //          .endofpacket
		.sink8_ready          (rsp_demux_009_src0_ready),                //     sink8.ready
		.sink8_valid          (rsp_demux_009_src0_valid),                //          .valid
		.sink8_channel        (rsp_demux_009_src0_channel),              //          .channel
		.sink8_data           (rsp_demux_009_src0_data),                 //          .data
		.sink8_startofpacket  (rsp_demux_009_src0_startofpacket),        //          .startofpacket
		.sink8_endofpacket    (rsp_demux_009_src0_endofpacket),          //          .endofpacket
		.sink9_ready          (rsp_demux_010_src0_ready),                //     sink9.ready
		.sink9_valid          (rsp_demux_010_src0_valid),                //          .valid
		.sink9_channel        (rsp_demux_010_src0_channel),              //          .channel
		.sink9_data           (rsp_demux_010_src0_data),                 //          .data
		.sink9_startofpacket  (rsp_demux_010_src0_startofpacket),        //          .startofpacket
		.sink9_endofpacket    (rsp_demux_010_src0_endofpacket),          //          .endofpacket
		.sink10_ready         (rsp_demux_011_src0_ready),                //    sink10.ready
		.sink10_valid         (rsp_demux_011_src0_valid),                //          .valid
		.sink10_channel       (rsp_demux_011_src0_channel),              //          .channel
		.sink10_data          (rsp_demux_011_src0_data),                 //          .data
		.sink10_startofpacket (rsp_demux_011_src0_startofpacket),        //          .startofpacket
		.sink10_endofpacket   (rsp_demux_011_src0_endofpacket),          //          .endofpacket
		.sink11_ready         (rsp_demux_012_src0_ready),                //    sink11.ready
		.sink11_valid         (rsp_demux_012_src0_valid),                //          .valid
		.sink11_channel       (rsp_demux_012_src0_channel),              //          .channel
		.sink11_data          (rsp_demux_012_src0_data),                 //          .data
		.sink11_startofpacket (rsp_demux_012_src0_startofpacket),        //          .startofpacket
		.sink11_endofpacket   (rsp_demux_012_src0_endofpacket),          //          .endofpacket
		.sink12_ready         (rsp_demux_013_src0_ready),                //    sink12.ready
		.sink12_valid         (rsp_demux_013_src0_valid),                //          .valid
		.sink12_channel       (rsp_demux_013_src0_channel),              //          .channel
		.sink12_data          (rsp_demux_013_src0_data),                 //          .data
		.sink12_startofpacket (rsp_demux_013_src0_startofpacket),        //          .startofpacket
		.sink12_endofpacket   (rsp_demux_013_src0_endofpacket),          //          .endofpacket
		.sink13_ready         (rsp_demux_014_src0_ready),                //    sink13.ready
		.sink13_valid         (rsp_demux_014_src0_valid),                //          .valid
		.sink13_channel       (rsp_demux_014_src0_channel),              //          .channel
		.sink13_data          (rsp_demux_014_src0_data),                 //          .data
		.sink13_startofpacket (rsp_demux_014_src0_startofpacket),        //          .startofpacket
		.sink13_endofpacket   (rsp_demux_014_src0_endofpacket),          //          .endofpacket
		.sink14_ready         (rsp_demux_015_src0_ready),                //    sink14.ready
		.sink14_valid         (rsp_demux_015_src0_valid),                //          .valid
		.sink14_channel       (rsp_demux_015_src0_channel),              //          .channel
		.sink14_data          (rsp_demux_015_src0_data),                 //          .data
		.sink14_startofpacket (rsp_demux_015_src0_startofpacket),        //          .startofpacket
		.sink14_endofpacket   (rsp_demux_015_src0_endofpacket),          //          .endofpacket
		.sink15_ready         (rsp_demux_016_src0_ready),                //    sink15.ready
		.sink15_valid         (rsp_demux_016_src0_valid),                //          .valid
		.sink15_channel       (rsp_demux_016_src0_channel),              //          .channel
		.sink15_data          (rsp_demux_016_src0_data),                 //          .data
		.sink15_startofpacket (rsp_demux_016_src0_startofpacket),        //          .startofpacket
		.sink15_endofpacket   (rsp_demux_016_src0_endofpacket),          //          .endofpacket
		.sink16_ready         (rsp_demux_017_src0_ready),                //    sink16.ready
		.sink16_valid         (rsp_demux_017_src0_valid),                //          .valid
		.sink16_channel       (rsp_demux_017_src0_channel),              //          .channel
		.sink16_data          (rsp_demux_017_src0_data),                 //          .data
		.sink16_startofpacket (rsp_demux_017_src0_startofpacket),        //          .startofpacket
		.sink16_endofpacket   (rsp_demux_017_src0_endofpacket),          //          .endofpacket
		.sink17_ready         (rsp_demux_018_src0_ready),                //    sink17.ready
		.sink17_valid         (rsp_demux_018_src0_valid),                //          .valid
		.sink17_channel       (rsp_demux_018_src0_channel),              //          .channel
		.sink17_data          (rsp_demux_018_src0_data),                 //          .data
		.sink17_startofpacket (rsp_demux_018_src0_startofpacket),        //          .startofpacket
		.sink17_endofpacket   (rsp_demux_018_src0_endofpacket),          //          .endofpacket
		.sink18_ready         (rsp_demux_019_src0_ready),                //    sink18.ready
		.sink18_valid         (rsp_demux_019_src0_valid),                //          .valid
		.sink18_channel       (rsp_demux_019_src0_channel),              //          .channel
		.sink18_data          (rsp_demux_019_src0_data),                 //          .data
		.sink18_startofpacket (rsp_demux_019_src0_startofpacket),        //          .startofpacket
		.sink18_endofpacket   (rsp_demux_019_src0_endofpacket),          //          .endofpacket
		.sink19_ready         (rsp_demux_020_src0_ready),                //    sink19.ready
		.sink19_valid         (rsp_demux_020_src0_valid),                //          .valid
		.sink19_channel       (rsp_demux_020_src0_channel),              //          .channel
		.sink19_data          (rsp_demux_020_src0_data),                 //          .data
		.sink19_startofpacket (rsp_demux_020_src0_startofpacket),        //          .startofpacket
		.sink19_endofpacket   (rsp_demux_020_src0_endofpacket),          //          .endofpacket
		.sink20_ready         (rsp_demux_021_src0_ready),                //    sink20.ready
		.sink20_valid         (rsp_demux_021_src0_valid),                //          .valid
		.sink20_channel       (rsp_demux_021_src0_channel),              //          .channel
		.sink20_data          (rsp_demux_021_src0_data),                 //          .data
		.sink20_startofpacket (rsp_demux_021_src0_startofpacket),        //          .startofpacket
		.sink20_endofpacket   (rsp_demux_021_src0_endofpacket),          //          .endofpacket
		.sink21_ready         (rsp_demux_022_src0_ready),                //    sink21.ready
		.sink21_valid         (rsp_demux_022_src0_valid),                //          .valid
		.sink21_channel       (rsp_demux_022_src0_channel),              //          .channel
		.sink21_data          (rsp_demux_022_src0_data),                 //          .data
		.sink21_startofpacket (rsp_demux_022_src0_startofpacket),        //          .startofpacket
		.sink21_endofpacket   (rsp_demux_022_src0_endofpacket),          //          .endofpacket
		.sink22_ready         (rsp_demux_023_src0_ready),                //    sink22.ready
		.sink22_valid         (rsp_demux_023_src0_valid),                //          .valid
		.sink22_channel       (rsp_demux_023_src0_channel),              //          .channel
		.sink22_data          (rsp_demux_023_src0_data),                 //          .data
		.sink22_startofpacket (rsp_demux_023_src0_startofpacket),        //          .startofpacket
		.sink22_endofpacket   (rsp_demux_023_src0_endofpacket),          //          .endofpacket
		.sink23_ready         (rsp_demux_024_src0_ready),                //    sink23.ready
		.sink23_valid         (rsp_demux_024_src0_valid),                //          .valid
		.sink23_channel       (rsp_demux_024_src0_channel),              //          .channel
		.sink23_data          (rsp_demux_024_src0_data),                 //          .data
		.sink23_startofpacket (rsp_demux_024_src0_startofpacket),        //          .startofpacket
		.sink23_endofpacket   (rsp_demux_024_src0_endofpacket)           //          .endofpacket
	);

endmodule
