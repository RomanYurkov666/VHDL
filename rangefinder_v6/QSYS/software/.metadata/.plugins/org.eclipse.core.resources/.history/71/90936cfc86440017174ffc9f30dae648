/*
 * pc_com.c
 *
 *  Created on: 25.05.2017
 *      Author: user
 */


#include "alt_types.h"
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "altera_avalon_uart_regs.h"
#include "pc_com.h"
#include "string.h"
#include <sys/alt_irq.h>
#include "motors.h"
#include "tdc7200.h"
#include "ad8369.h"
#include "max1932.h"
#include "sample_loader.h"
#include "laser_driver.h"
#include "time.h"

volatile int uart_context;
void* uart_context_ptr = (void*)&uart_context;
t_rs485_config com;

void register_uart_interrupt(t_rs485_config *c);
void rs485_init(t_rs485_config *c);
alt_8 integrity_check(alt_u8 *start);
alt_u8 calculate_crc(alt_u8 *msg, alt_u8 size);
void command_handler(alt_u8 *new_cmd);
alt_u8 send_byte_by_uart(unsigned char tx_byte);
alt_u8 send_message2pc(alt_u8 *msg, alt_u8 len);
void set_rs485_driver_dir(alt_u8 dir);
alt_u8 msg_crc(alt_u8 *ptr, alt_u8 len);
alt_u32 simple_delay(alt_u32 value);

#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void uart_rx_interrupt_handler(void* context)
#else
static void uart_rx_interrupt_handler(void* context, alt_u32 id)
#endif
{
	unsigned int status = IORD_ALTERA_AVALON_UART_STATUS(PC_UART_BASE);
	unsigned int rx_data = IORD_ALTERA_AVALON_UART_RXDATA(PC_UART_BASE); //reading and clearing interrupt flag
	if (status&ALTERA_AVALON_UART_STATUS_RRDY_MSK)
	{
		if (com.rx_byte_cnt<(UART_RX_BUF_SIZE-1))
		{
			com.rx_buf[com.rx_byte_cnt]=rx_data;
			com.rx_byte_cnt++;
		}
		else
		{
			com.error=1;
		}
		com.bus_is_busy=1;
		com.last_byte_tick_stamp=get_system_time();
		com.last_byte_timestamp=get_sys_timer_value();
	}
}

void register_uart_interrupt(t_rs485_config *c)
{
	#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
	alt_ic_isr_register(c->controller.interr_id, c->controller.irq, uart_rx_interrupt_handler, uart_context_ptr, 0x0);
	#else
	alt_irq_register(c->controller.irq, uart_context_ptr, uart_rx_interrupt_handler);
	#endif
}


void rs485_init(t_rs485_config *c)
{
	c->controller.base	=			(alt_u32)PC_UART_BASE;
	c->controller.irq	=			(alt_u32)PC_UART_IRQ;
	c->controller.interr_id =		(alt_u32)PC_UART_IRQ_INTERRUPT_CONTROLLER_ID;
	c->controller.speed_divider =	(alt_u32)UART_DIVIDER;
	c->driver_direction = 			reciever_mode;
	c->rx_buf_full = 				0;
	c->error = 						0;
	c->rx_byte_cnt = 				0;
	c->bus_is_busy = 				0;
	c->last_byte_timestamp = 		get_sys_timer_value();
	c->last_byte_tick_stamp = 		get_system_time();
	memset(c->rx_buf,0,sizeof(c->rx_buf));
	register_uart_interrupt(c);
}



void rs485_routine(t_rs485_config *c)
{
	alt_u8 bytes_to_delete = 0; // оличество байт в буфере, которые можно выкинуть. Ћибо уже прочитанные сообщени€, либо хлам.
	alt_16 i = 0;
	alt_8 pack_len = -1;
	alt_16 last_start = -1;
	alt_u32 current_sys_time = get_system_time();
	alt_u32 current_timer_value = get_sys_timer_value();

	if (com.bus_is_busy)
	{
		if ((current_sys_time>com.last_byte_tick_stamp+1)||(current_timer_value>com.last_byte_timestamp+BUS_BUSY_DELAY))
		{
			com.bus_is_busy=0;
		}
		else if (com.last_byte_timestamp>current_timer_value)
		{
			if (current_timer_value + SYS_TIMER_TICK_PERIOD > com.last_byte_timestamp + BUS_BUSY_DELAY)
			com.bus_is_busy=0;
		}
	}

	if (!com.bus_is_busy)
		if (c->rx_byte_cnt>(PC_MIN_MSG_SIZE-1)) //≈сли в буфере вообще есть некоторое количество байт, которые могут составить сообщение
		{
			for (i=0;i<c->rx_byte_cnt-PC_MIN_MSG_SIZE+1;i++) //ѕросматриваем каждый байт с первого и до последнего, который в принципе удален от конца настолько, что может быть началом целого пакета
			{
				if (c->rx_buf[i] == SIGN) //≈сли текущий байт совпал со стартовой сигнатурой
				{
					pack_len = integrity_check(c->rx_buf+i); //ѕровер€ем предполагаемый пакет на целостность
					if (pack_len>0) //≈сли сообщение целое, то передаем его обработчику
					{
						command_handler(c->rx_buf+i);
						bytes_to_delete = i+pack_len;
						i+=pack_len;
					}
					else  //≈сли нет, то провер€ем собралось ли оно вообще
					{
						//¬озможно, что сообщение еще не собралось целиком в буфере. —равниваем длину от текущего байта (старта) до последнего с максимально возможной длиной
						if ((c->rx_byte_cnt-i)>=(c->rx_buf[i+2]+4)) // (c->rx_byte_cnt-i) - —колько байт имеетс€ от текущего байта, до последнего, (c->rx_buf[i+2]+4) - сколько нужно
							{
								if (i+1>bytes_to_delete)
									bytes_to_delete = i+1; //¬ыкидываем все байты до текущего, т.к. сообщение уже обработано либо установлено, что оно кривое
							}
						else if (c->rx_buf[i+2]>PAYLOAD_LEN_MAX) //≈сли число нереальное
							{
								if (i+1>bytes_to_delete)
									bytes_to_delete = i+1; //¬ыкидываем все байты до текущего, т.к. сообщение уже обработано либо установлено, что оно кривое
							}
						//≈сли сообщение может быт корректным (пока не набралось байт чтобы проверить), тогде ничего не удал€ем,
					}
					last_start = i;
				}
				else //≈сли не старт, то обычный байт. ƒо него уже все проверено. Ќужно убедитьс€, что он не кусок потенциально не собранного сообщени€
				{
					if (last_start!=-1) //≈сли до него обнаружилс€ хот€ бы один старт, провер€ем может ли он быть частью сообщени€
					{
						alt_u8 last_dlen = c->rx_buf[last_start+2];
						alt_u8 last_msg_end = last_start+4+last_dlen;
						if (i>last_msg_end) //≈сли этот байт находитс€ за пределами последнего возможного сообщени€, то удал€ем его
							if (i+1>bytes_to_delete)
								bytes_to_delete=i+1;
					}
					else //Ќе было ни одного потенциального старта
					{
						if (i+1>bytes_to_delete)
							bytes_to_delete=i+1;
					}
				}
			}
		}

	if (bytes_to_delete)
	{
		alt_16 i = 0;
		c->rx_byte_cnt=c->rx_byte_cnt-bytes_to_delete;
		//memcpy(c->rx_buf,c->rx_buf+bytes_to_delete,c->rx_byte_cnt);
		for (i=0;i<c->rx_byte_cnt;i++)
			c->rx_buf[i]=c->rx_buf[i+bytes_to_delete];
	}
}

alt_8 integrity_check(alt_u8 *start)
{
	alt_8 pack_len = -1;
	alt_u8 dlen = start[2];
	alt_u8 crc = calculate_crc(start,dlen+3);
	if (crc==start[3+dlen])
		pack_len = 4+dlen;
	return pack_len;
}

alt_u8 calculate_crc(alt_u8 *msg, alt_u8 size)
{
	alt_u8 buffer = 0;
	alt_16 i = 0;
	for (i=0;i<size;i++)
		buffer=buffer^msg[i];
	return buffer;
}

alt_u8 send_byte_by_uart(unsigned char tx_byte)
{
    IOWR_ALTERA_AVALON_UART_TXDATA (PC_UART_BASE, tx_byte);
    while (!(IORD_ALTERA_AVALON_UART_STATUS(PC_UART_BASE)&ALTERA_AVALON_UART_STATUS_TMT_MSK));
    simple_delay(100);
    return 1;
}

alt_u8 send_message2pc(alt_u8 *msg, alt_u8 len)
{
	alt_16 i = 0;
	for (i=0;i<len;i++)
		send_byte_by_uart(msg[i]);
	return 1;
}

void set_rs485_driver_dir(alt_u8 dir)
{
	if (dir) //driver
		IOWR_ALTERA_AVALON_PIO_DATA(RS485_DE_BASE,0x1);
	else //reciever
		IOWR_ALTERA_AVALON_PIO_DATA(RS485_DE_BASE,0x0);
}

alt_u8 msg_crc(alt_u8 *ptr, alt_u8 len)
{
	alt_u8 crc = 0;
	alt_16 i = 0;
	for (i=0;i<len;i++)
		crc=crc^ptr[i];
	return crc;
}

//**************************************************************************************************************
void com_init()
{
	rs485_init(&com);
}

void com_routine()
{
	rs485_routine(&com);
}

void command_handler(alt_u8 *new_cmd)
{
	t_pc_cmd *cmd = (t_pc_cmd*)new_cmd;
	switch (cmd->code)
	{
		case PCCOM_ECHO:
			{
				t_pc_cmd echo;
				echo.sign=0x5B;
				echo.dlen=0;
				echo.code=0x0;
				send_cmd2pc(&echo);
			}
			break;
		case PCCOM_VGA:
			ProcCmd_VGA(cmd);
			break;
		case PCCOM_TDC:
			ProcCmd_TDC(cmd);
			break;
		case PCCOM_SAMPLE_LOADER:
			ProcCmd_SampleLoader(cmd);
			break;
		case PCCOM_TEST_GENERATOR:
			ProcCmd_PulseGen(cmd);
			break;
		case PCCOM_LASER:
			ProcCmd_Laser(cmd);
			break;
		case PCCOM_ACCELEROMETER: break;
		case PCCOM_STEPPER_IRIS:
		case PCCOM_STEPPER_ATTEN:
			ProcCmd_Motor(cmd);
			break;
		case PCCOM_AMPLIFIER: break;
		case PCCOM_APD_SOURCE:
			ProcCmd_APD(cmd);
			break;
		case PCCOM_MODE_SWITCHER:

			 break;
		case PCCOM_DEVICE:
			ProcCmd_Rangefinder(cmd);
			break;
		default: break;
	}
}

alt_u8 send_cmd2pc(t_pc_cmd *cmd)
{
	alt_u8 *ptr = (alt_u8*)cmd;
	alt_u8 dlen = cmd->dlen + 3; //without crc
	//unsigned char crc = msg_crc(ptr,dlen);
	cmd->data[cmd->dlen] = msg_crc(ptr,dlen);
	set_rs485_driver_dir(driver_enable);
	simple_delay(1000);
	send_message2pc(ptr,dlen+1); //+1 for crc
	//send_byte_by_uart(crc);
	simple_delay(1000);
	set_rs485_driver_dir(rec_enable);
	return 1;
}

alt_u32 simple_delay(alt_u32 value)
{
	alt_u32 i = 0;
	alt_u32 b = 0;
	for (i=0;i<value;i++)
	{
		b++;
	}
	return b;
}
