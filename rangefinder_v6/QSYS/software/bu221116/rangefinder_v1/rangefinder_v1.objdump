
rangefinder_v1.elf:     file format elf32-littlenios2
rangefinder_v1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00003b48 memsz 0x00003b48 flags r-x
    LOAD off    0x00004b68 vaddr 0x00003b68 paddr 0x00004208 align 2**12
         filesz 0x000006a0 memsz 0x000006a0 flags rw-
    LOAD off    0x000058a8 vaddr 0x000048a8 paddr 0x000048a8 align 2**12
         filesz 0x00000000 memsz 0x0000044c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003980  000001b8  000001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000030  00003b38  00003b38  00004b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000006a0  00003b68  00004208  00004b68  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000044c  000048a8  000048a8  000058a8  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  00005208  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000670  00000000  00000000  00005230  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0000832f  00000000  00000000  000058a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00002d74  00000000  00000000  0000dbcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00002e2d  00000000  00000000  00010943  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000e40  00000000  00000000  00013770  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001a34  00000000  00000000  000145b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00001664  00000000  00000000  00015fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00017648  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00017678  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00019b88  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  00019b8b  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00019b8e  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00019b8f  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00019b90  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00019b94  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  00019b98  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000007  00000000  00000000  00019b9c  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000007  00000000  00000000  00019ba3  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000007  00000000  00000000  00019baa  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000010  00000000  00000000  00019bb1  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 00000024  00000000  00000000  00019bc1  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000a2c08  00000000  00000000  00019be5  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
000001b8 l    d  .text	00000000 .text
00003b38 l    d  .rodata	00000000 .rodata
00003b68 l    d  .rwdata	00000000 .rwdata
000048a8 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../rangefinder_v1_bsp//obj/HAL/src/crt0.o
00000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 accelerometer.c
00000000 l    df *ABS*	00000000 buttons.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 laser.c
00000000 l    df *ABS*	00000000 leds.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 measurement.c
00000000 l    df *ABS*	00000000 sample_loader.c
00000000 l    df *ABS*	00000000 timer.c
000018d0 l     F .text	00000060 sys_timer_interrupt_handler
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00001ec4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00002028 l     F .text	00000038 alt_dev_reg
00003b68 l     O .rwdata	000000c4 pc_uart
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000020f4 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
000023a8 l     F .text	00000098 altera_avalon_uart_irq
00002440 l     F .text	000000d8 altera_avalon_uart_rxirq
00002518 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
000026a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
000028d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_close.c
00002ad0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00002c2c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00002c58 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002e30 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
00002f68 l     F .text	00000050 alt_get_errno
00002fb8 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00003dd4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
00001fb0 g     F .text	00000078 alt_main
00004a64 g     O .bss	00000100 alt_irq
00004208 g       *ABS*	00000000 __flash_rwdata_start
00000000 g       *ABS*	00000000 __alt_mem_ram_cpu
00000938 g     F .text	00000138 i2c_send_byte
000048bc g     O .bss	00000004 b
00000dd0 g     F .text	00000068 write_command
0000034c g     F .text	00000020 get_x_coord
000048cb g     O .bss	00000001 shift
00009200 g       *ABS*	00000000 __alt_mem_ram_sample_3
00000000  w      *UND*	00000000 __errno
00000cc8 g     F .text	00000084 write_ack
000048a8 g     O .bss	00000002 DATAX
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00001068 g     F .text	0000003c change_axis
000048c0 g     O .bss	00000004 f
00000494 g     F .text	000002b8 read_but
000048f8 g     O .bss	00000004 errno
000048e8 g     O .bss	00000004 alt_argv
000041d4 g     O .rwdata	00000001 leds_status
0000c1d4 g       *ABS*	00000000 _gp
000048c8 g     O .bss	00000001 rigth_blink
00003c54 g     O .rwdata	00000180 alt_fd_list
000033f4 g     F .text	00000090 alt_find_dev
000019dc g     F .text	00000048 sys_timer_stop
00002ef0 g     F .text	00000078 alt_io_redirect
00001200 g     F .text	00000040 sys_init
00003b38 g       *ABS*	00000000 __DTOR_END__
000048b0 g     O .bss	00000004 x_angle
00009500 g       *ABS*	00000000 __alt_mem_ram_sample_0
00000000  w      *UND*	00000000 malloc
00001994 g     F .text	00000048 sys_timer_start
0000364c g     F .text	0000008c alt_icache_flush
000041f0 g     O .rwdata	00000004 alt_max_fd
00009400 g       *ABS*	00000000 __alt_mem_ram_sample_1
00001020 g     F .text	00000048 generate_pulse
0000082c g     F .text	0000008c i2c_send_bit
00004200 g     O .rwdata	00000004 _global_impure_ptr
00004cf4 g       *ABS*	00000000 __bss_end
00001dd4 g     F .text	000000f0 alt_iic_isr_register
000032d0 g     F .text	00000104 alt_tick
000008b8 g     F .text	00000080 i2c_read_bit
000013b8 g     F .text	00000048 start_recording
00002300 g     F .text	000000a8 altera_avalon_uart_init
00001d88 g     F .text	0000004c alt_ic_irq_enabled
00003238 g     F .text	00000098 alt_alarm_stop
000048e0 g     O .bss	00000004 alt_irq_active
000048cd g     O .bss	00000001 blinky_status
000000ec g     F .exceptions	000000cc alt_irq_handler
00003c2c g     O .rwdata	00000028 alt_dev_null
00001240 g     F .text	00000090 mainloop
0000074c g     F .text	00000020 buttons_status
0000076c g     F .text	00000060 i2c_start
00000e38 g     F .text	000000a0 write_command_multiple
00002be8 g     F .text	00000044 alt_dcache_flush_all
00004208 g       *ABS*	00000000 __ram_rwdata_end
000048ca g     O .bss	00000001 direction
000041e8 g     O .rwdata	00000008 alt_dev_list
00003b68 g       *ABS*	00000000 __ram_rodata_end
00004cf4 g       *ABS*	00000000 end
00001b38 g     F .text	0000007c send_uart_n
00002928 g     F .text	000001a8 altera_avalon_uart_write
00001ae4 g     F .text	00000054 send_uart
000048d0 g     O .bss	00000001 i
00003b38 g       *ABS*	00000000 __CTOR_LIST__
00008000 g       *ABS*	00000000 __alt_stack_pointer
00002168 g     F .text	00000088 alt_avalon_timer_sc_init
00002250 g     F .text	00000060 altera_avalon_uart_write_fd
000022b0 g     F .text	00000050 altera_avalon_uart_close_fd
00001ac8 g     F .text	0000001c uart_init
0000395c g     F .text	000001a0 __call_exitprocs
00001488 g     F .text	0000004c reset_memory_master
000001b8 g     F .text	0000004c _start
000048f0 g     O .bss	00000004 _alt_tick_rate
000048d4 g     O .bss	00000001 timer_event_flag
000048cc g     O .bss	00000001 blinky_flag
0000490c g     O .bss	00000030 ram_buffer
000048f4 g     O .bss	00000004 _alt_nticks
0000493c g     O .bss	00000028 signal
00002094 g     F .text	00000060 alt_sys_init
0000184c g     F .text	00000084 get_max
0000382c g     F .text	00000130 __register_exitproc
00003b68 g       *ABS*	00000000 __ram_rwdata_start
00003b38 g       *ABS*	00000000 __ram_rodata_start
000012d0 g     F .text	000000a4 make_measurement
000041d8 g     O .rwdata	00000004 timer_context_ptr
00003598 g     F .text	000000b4 alt_get_fd
00001930 g     F .text	00000064 sys_timer_init
00003724 g     F .text	0000007c memcmp
00004cf4 g       *ABS*	00000000 __alt_stack_base
000048c9 g     O .bss	00000001 left_blink
000007cc g     F .text	00000060 i2c_stop
00000204 g     F .text	00000048 accelerometer_init
000048cf g     O .bss	00000001 counter
00001400 g     F .text	0000001c get_buffer_status
00003484 g     F .text	00000114 alt_find_file
00002ca8 g     F .text	000000a0 alt_dev_llist_insert
000048b8 g     O .bss	00000004 z_angle
000048a8 g       *ABS*	00000000 __bss_start
000011e4 g     F .text	0000001c main
000048ec g     O .bss	00000004 alt_envp
000048fc g     O .bss	00000010 buttons
0000141c g     F .text	0000006c reset_ram_buffers
00004b64 g     O .bss	00000190 _atexit0
000041f4 g     O .rwdata	00000004 alt_errno
00009300 g       *ABS*	00000000 __alt_mem_ram_sample_2
00000c48 g     F .text	00000080 read_ack
00003b38 g       *ABS*	00000000 __CTOR_END__
00003b38 g       *ABS*	00000000 __flash_rodata_start
00003b38 g       *ABS*	00000000 __DTOR_LIST__
00001374 g     F .text	00000044 delay
00000fec g     F .text	00000034 laser_init
00002060 g     F .text	00000034 alt_irq_init
000031d8 g     F .text	00000060 alt_release_fd
00001a88 g     F .text	00000020 reset_timer_event_flag
000036d8 g     F .text	00000014 atexit
00000ed8 g     F .text	00000074 read_command
00000a70 g     F .text	000001d8 i2c_read_byte
00004204 g     O .rwdata	00000004 _impure_ptr
000048e4 g     O .bss	00000004 alt_argc
00002da4 g     F .text	0000005c _do_dtors
00000d90 g     F .text	00000040 i2c_init
00000020 g       .exceptions	00000000 alt_irq_entry
00001aa8 g     F .text	00000020 read_sys_time_ms
000041e0 g     O .rwdata	00000008 alt_fs_list
00009100 g       *ABS*	00000000 __alt_mem_ram_sample_4
00001bb4 g     F .text	00000048 send_com2pc
000048d8 g     O .bss	00000004 sys_abs_time_ms
000048ac g     O .bss	00000002 DATAZ
00000020 g       *ABS*	00000000 __ram_exceptions_start
0000024c g     F .text	00000100 refresh_accelerometer_data
00001bfc g     F .text	00000050 alt_ic_isr_register
00000f4c g     F .text	000000a0 read_word_command
00004208 g       *ABS*	00000000 _edata
000021f0 g     F .text	00000060 altera_avalon_uart_read_fd
00004cf4 g       *ABS*	00000000 _end
00001a68 g     F .text	00000020 check_timer_event
000001b8 g       *ABS*	00000000 __ram_exceptions_end
000048dc g     O .bss	00000004 timer_context
000003ac g     F .text	000000e8 buttons_handler_init
00001ce8 g     F .text	000000a0 alt_ic_irq_disable
000048aa g     O .bss	00000002 DATAY
000033d4 g     F .text	00000020 altera_nios2_qsys_irq_init
000036ec g     F .text	00000038 exit
000048c4 g     O .bss	00000004 flags
00008000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002654 g     F .text	00000054 altera_avalon_uart_close
00003afc g     F .text	0000003c _exit
000048ce g     O .bss	00000001 axis_num
000037a0 g     F .text	0000008c strlen
00003084 g     F .text	00000154 open
00001a24 g     F .text	00000044 register_sys_timer_interrupt
0000038c g     F .text	00000020 get_z_coord
00002e00 g     F .text	00000030 alt_icache_flush_all
00000d4c g     F .text	00000044 i2c_delay
000041dc g     O .rwdata	00000004 alt_priority_mask
00009000 g       *ABS*	00000000 __alt_mem_ram_sample_5
00001c4c g     F .text	0000009c alt_ic_irq_enable
00001504 g     F .text	00000348 refresh_meas_data
00004964 g     O .bss	00000100 sample
000026f8 g     F .text	000001e0 altera_avalon_uart_read
000041f8 g     O .rwdata	00000008 alt_alarm_list
00002d48 g     F .text	0000005c _do_ctors
0000036c g     F .text	00000020 get_y_coord
00002b20 g     F .text	000000c8 close
000048b4 g     O .bss	00000004 y_angle
00001f30 g     F .text	00000080 alt_load
000014d4 g     F .text	00000030 read_abs_counter
000010d0 g     F .text	00000114 leds_driver
00000000  w      *UND*	00000000 free
000010a4 g     F .text	0000002c leds_init



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <_gp+0xffff3e30>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08406e14 	ori	at,at,440
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000ec0 	call	ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000306 	br	98 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  8c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)

00000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  94:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  98:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  9c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  e8:	ef80083a 	eret

000000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  ec:	defff904 	addi	sp,sp,-28
  f0:	dfc00615 	stw	ra,24(sp)
  f4:	df000515 	stw	fp,20(sp)
  f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 100:	0005313a 	rdctl	r2,ipending
 104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 10c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 114:	00800044 	movi	r2,1
 118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 11c:	e0fffb17 	ldw	r3,-20(fp)
 120:	e0bffc17 	ldw	r2,-16(fp)
 124:	1884703a 	and	r2,r3,r2
 128:	10001726 	beq	r2,zero,188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 12c:	00c00034 	movhi	r3,0
 130:	18d29904 	addi	r3,r3,19044
 134:	e0bffd17 	ldw	r2,-12(fp)
 138:	100490fa 	slli	r2,r2,3
 13c:	1885883a 	add	r2,r3,r2
 140:	10c00017 	ldw	r3,0(r2)
 144:	01000034 	movhi	r4,0
 148:	21129904 	addi	r4,r4,19044
 14c:	e0bffd17 	ldw	r2,-12(fp)
 150:	100490fa 	slli	r2,r2,3
 154:	2085883a 	add	r2,r4,r2
 158:	10800104 	addi	r2,r2,4
 15c:	10800017 	ldw	r2,0(r2)
 160:	1009883a 	mov	r4,r2
 164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 16c:	0005313a 	rdctl	r2,ipending
 170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 17c:	e0bffb17 	ldw	r2,-20(fp)
 180:	103fe31e 	bne	r2,zero,110 <_gp+0xffff3f3c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 184:	00000706 	br	1a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 188:	e0bffc17 	ldw	r2,-16(fp)
 18c:	1085883a 	add	r2,r2,r2
 190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 194:	e0bffd17 	ldw	r2,-12(fp)
 198:	10800044 	addi	r2,r2,1
 19c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a0:	003fde06 	br	11c <_gp+0xffff3f48>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 1a4:	e037883a 	mov	sp,fp
 1a8:	dfc00117 	ldw	ra,4(sp)
 1ac:	df000017 	ldw	fp,0(sp)
 1b0:	dec00204 	addi	sp,sp,8
 1b4:	f800283a 	ret

Disassembly of section .text:

000001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     1b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     1bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     1c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     1c4:	00bffd16 	blt	zero,r2,1bc <_gp+0xffff3fe8>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     1c8:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
     1cc:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
     1d0:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     1d4:	d6b07514 	ori	gp,gp,49620
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     1d8:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     1dc:	10922a14 	ori	r2,r2,18600

    movhi r3, %hi(__bss_end)
     1e0:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1e4:	18d33d14 	ori	r3,r3,19700

    beq r2, r3, 1f
     1e8:	10c00326 	beq	r2,r3,1f8 <_start+0x40>

0:
    stw zero, (r2)
     1ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1f4:	10fffd36 	bltu	r2,r3,1ec <_gp+0xffff4018>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1f8:	0001f300 	call	1f30 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1fc:	0001fb00 	call	1fb0 <alt_main>

00000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     200:	003fff06 	br	200 <_gp+0xffff402c>

00000204 <accelerometer_init>:
int y_angle = 0;
int z_angle = 0;


void accelerometer_init()
{
     204:	defffe04 	addi	sp,sp,-8
     208:	dfc00115 	stw	ra,4(sp)
     20c:	df000015 	stw	fp,0(sp)
     210:	d839883a 	mov	fp,sp
	write_command (ACCEL_POW_CTL_REG, 0x08);     //power control - measure
     214:	01000b44 	movi	r4,45
     218:	01400204 	movi	r5,8
     21c:	0000dd00 	call	dd0 <write_command>
	write_command (ACCEL_DATA_FORMAT_REG, 0x08); //data format - full resolution
     220:	01000c44 	movi	r4,49
     224:	01400204 	movi	r5,8
     228:	0000dd00 	call	dd0 <write_command>
	write_command (ACCEL_FIFO_CTL_REG, 0x00); // fifo - bypassed
     22c:	01000e04 	movi	r4,56
     230:	000b883a 	mov	r5,zero
     234:	0000dd00 	call	dd0 <write_command>
}
     238:	e037883a 	mov	sp,fp
     23c:	dfc00117 	ldw	ra,4(sp)
     240:	df000017 	ldw	fp,0(sp)
     244:	dec00204 	addi	sp,sp,8
     248:	f800283a 	ret

0000024c <refresh_accelerometer_data>:

void refresh_accelerometer_data()
{
     24c:	defffd04 	addi	sp,sp,-12
     250:	dfc00215 	stw	ra,8(sp)
     254:	df000115 	stw	fp,4(sp)
     258:	df000104 	addi	fp,sp,4
	unsigned char buf = 0;
     25c:	e03fff05 	stb	zero,-4(fp)

	buf=read_command(ACCEL_DATAX0_REG);
     260:	01000c84 	movi	r4,50
     264:	0000ed80 	call	ed8 <read_command>
     268:	e0bfff05 	stb	r2,-4(fp)
	DATAX=buf;
     26c:	e0bfff03 	ldbu	r2,-4(fp)
     270:	d0a1b50d 	sth	r2,-31020(gp)
	buf=read_command(ACCEL_DATAX1_REG);
     274:	01000cc4 	movi	r4,51
     278:	0000ed80 	call	ed8 <read_command>
     27c:	e0bfff05 	stb	r2,-4(fp)
	DATAX|=(buf<<8)&0xff00;
     280:	e0bfff03 	ldbu	r2,-4(fp)
     284:	1004923a 	slli	r2,r2,8
     288:	1007883a 	mov	r3,r2
     28c:	d0a1b50b 	ldhu	r2,-31020(gp)
     290:	1884b03a 	or	r2,r3,r2
     294:	d0a1b50d 	sth	r2,-31020(gp)
	buf=read_command(ACCEL_DATAY0_REG);
     298:	01000d04 	movi	r4,52
     29c:	0000ed80 	call	ed8 <read_command>
     2a0:	e0bfff05 	stb	r2,-4(fp)
	DATAY=buf;
     2a4:	e0bfff03 	ldbu	r2,-4(fp)
     2a8:	d0a1b58d 	sth	r2,-31018(gp)
	buf=read_command(ACCEL_DATAY1_REG);
     2ac:	01000d44 	movi	r4,53
     2b0:	0000ed80 	call	ed8 <read_command>
     2b4:	e0bfff05 	stb	r2,-4(fp)
	DATAY|=(buf<<8)&0xff00;
     2b8:	e0bfff03 	ldbu	r2,-4(fp)
     2bc:	1004923a 	slli	r2,r2,8
     2c0:	1007883a 	mov	r3,r2
     2c4:	d0a1b58b 	ldhu	r2,-31018(gp)
     2c8:	1884b03a 	or	r2,r3,r2
     2cc:	d0a1b58d 	sth	r2,-31018(gp)
	buf=read_command(ACCEL_DATAZ0_REG);
     2d0:	01000d84 	movi	r4,54
     2d4:	0000ed80 	call	ed8 <read_command>
     2d8:	e0bfff05 	stb	r2,-4(fp)
	DATAZ=buf;
     2dc:	e0bfff03 	ldbu	r2,-4(fp)
     2e0:	d0a1b60d 	sth	r2,-31016(gp)
	buf=read_command(ACCEL_DATAZ1_REG);
     2e4:	01000dc4 	movi	r4,55
     2e8:	0000ed80 	call	ed8 <read_command>
     2ec:	e0bfff05 	stb	r2,-4(fp)
	DATAZ|=(buf<<8)&0xff00;
     2f0:	e0bfff03 	ldbu	r2,-4(fp)
     2f4:	1004923a 	slli	r2,r2,8
     2f8:	1007883a 	mov	r3,r2
     2fc:	d0a1b60b 	ldhu	r2,-31016(gp)
     300:	1884b03a 	or	r2,r3,r2
     304:	d0a1b60d 	sth	r2,-31016(gp)

	x_angle=DATAX&0x1FFF;
     308:	d0a1b50b 	ldhu	r2,-31020(gp)
     30c:	10bfffcc 	andi	r2,r2,65535
     310:	1087ffcc 	andi	r2,r2,8191
     314:	d0a1b715 	stw	r2,-31012(gp)
	y_angle=DATAY&0x1FFF;
     318:	d0a1b58b 	ldhu	r2,-31018(gp)
     31c:	10bfffcc 	andi	r2,r2,65535
     320:	1087ffcc 	andi	r2,r2,8191
     324:	d0a1b815 	stw	r2,-31008(gp)
	z_angle=DATAZ&0x1FFF;
     328:	d0a1b60b 	ldhu	r2,-31016(gp)
     32c:	10bfffcc 	andi	r2,r2,65535
     330:	1087ffcc 	andi	r2,r2,8191
     334:	d0a1b915 	stw	r2,-31004(gp)
}
     338:	e037883a 	mov	sp,fp
     33c:	dfc00117 	ldw	ra,4(sp)
     340:	df000017 	ldw	fp,0(sp)
     344:	dec00204 	addi	sp,sp,8
     348:	f800283a 	ret

0000034c <get_x_coord>:

unsigned short get_x_coord()
{
     34c:	deffff04 	addi	sp,sp,-4
     350:	df000015 	stw	fp,0(sp)
     354:	d839883a 	mov	fp,sp
  return x_angle;
     358:	d0a1b717 	ldw	r2,-31012(gp)
}
     35c:	e037883a 	mov	sp,fp
     360:	df000017 	ldw	fp,0(sp)
     364:	dec00104 	addi	sp,sp,4
     368:	f800283a 	ret

0000036c <get_y_coord>:

unsigned short get_y_coord()
{
     36c:	deffff04 	addi	sp,sp,-4
     370:	df000015 	stw	fp,0(sp)
     374:	d839883a 	mov	fp,sp
  return y_angle;
     378:	d0a1b817 	ldw	r2,-31008(gp)
}
     37c:	e037883a 	mov	sp,fp
     380:	df000017 	ldw	fp,0(sp)
     384:	dec00104 	addi	sp,sp,4
     388:	f800283a 	ret

0000038c <get_z_coord>:

unsigned short get_z_coord()
{
     38c:	deffff04 	addi	sp,sp,-4
     390:	df000015 	stw	fp,0(sp)
     394:	d839883a 	mov	fp,sp
  return z_angle;
     398:	d0a1b917 	ldw	r2,-31004(gp)
}
     39c:	e037883a 	mov	sp,fp
     3a0:	df000017 	ldw	fp,0(sp)
     3a4:	dec00104 	addi	sp,sp,4
     3a8:	f800283a 	ret

000003ac <buttons_handler_init>:
struct buttons_data *b;



void buttons_handler_init()
{
     3ac:	deffff04 	addi	sp,sp,-4
     3b0:	df000015 	stw	fp,0(sp)
     3b4:	d839883a 	mov	fp,sp
	f=&flags;
     3b8:	d0a1bc04 	addi	r2,gp,-30992
     3bc:	d0a1bb15 	stw	r2,-30996(gp)
	b=&buttons;
     3c0:	00800034 	movhi	r2,0
     3c4:	10923f04 	addi	r2,r2,18684
     3c8:	d0a1ba15 	stw	r2,-31000(gp)

    f->but_0_negedge=0;
     3cc:	d0a1bb17 	ldw	r2,-30996(gp)
     3d0:	11000003 	ldbu	r4,0(r2)
     3d4:	00ffff84 	movi	r3,-2
     3d8:	20c6703a 	and	r3,r4,r3
     3dc:	10c00005 	stb	r3,0(r2)
    f->but_0_posedge=0;
     3e0:	d0a1bb17 	ldw	r2,-30996(gp)
     3e4:	11000003 	ldbu	r4,0(r2)
     3e8:	00ffff44 	movi	r3,-3
     3ec:	20c6703a 	and	r3,r4,r3
     3f0:	10c00005 	stb	r3,0(r2)
    f->but_1_negedge=0;
     3f4:	d0a1bb17 	ldw	r2,-30996(gp)
     3f8:	11000003 	ldbu	r4,0(r2)
     3fc:	00fffdc4 	movi	r3,-9
     400:	20c6703a 	and	r3,r4,r3
     404:	10c00005 	stb	r3,0(r2)
    f->but_1_posedge=0;
     408:	d0a1bb17 	ldw	r2,-30996(gp)
     40c:	11000003 	ldbu	r4,0(r2)
     410:	00fffbc4 	movi	r3,-17
     414:	20c6703a 	and	r3,r4,r3
     418:	10c00005 	stb	r3,0(r2)
    //f->sys_timer=0;

    b->but0_posedge_cnt=0;
     41c:	d0a1ba17 	ldw	r2,-31000(gp)
     420:	10000005 	stb	zero,0(r2)
    b->but0_negedge_cnt=0;
     424:	d0a1ba17 	ldw	r2,-31000(gp)
     428:	10000045 	stb	zero,1(r2)
    b->but0_posedge_en=0;
     42c:	d0a1ba17 	ldw	r2,-31000(gp)
     430:	11000303 	ldbu	r4,12(r2)
     434:	00ffff84 	movi	r3,-2
     438:	20c6703a 	and	r3,r4,r3
     43c:	10c00305 	stb	r3,12(r2)
    b->but0_negedge_en=1;
     440:	d0a1ba17 	ldw	r2,-31000(gp)
     444:	10c00303 	ldbu	r3,12(r2)
     448:	18c00094 	ori	r3,r3,2
     44c:	10c00305 	stb	r3,12(r2)

    b->but1_posedge_cnt=0;
     450:	d0a1ba17 	ldw	r2,-31000(gp)
     454:	10000085 	stb	zero,2(r2)
    b->but1_negedge_cnt=0;
     458:	d0a1ba17 	ldw	r2,-31000(gp)
     45c:	100000c5 	stb	zero,3(r2)
    b->but1_posedge_en=0;
     460:	d0a1ba17 	ldw	r2,-31000(gp)
     464:	11000303 	ldbu	r4,12(r2)
     468:	00fffec4 	movi	r3,-5
     46c:	20c6703a 	and	r3,r4,r3
     470:	10c00305 	stb	r3,12(r2)
    b->but1_negedge_en=1;
     474:	d0a1ba17 	ldw	r2,-31000(gp)
     478:	10c00303 	ldbu	r3,12(r2)
     47c:	18c00214 	ori	r3,r3,8
     480:	10c00305 	stb	r3,12(r2)
}
     484:	e037883a 	mov	sp,fp
     488:	df000017 	ldw	fp,0(sp)
     48c:	dec00104 	addi	sp,sp,4
     490:	f800283a 	ret

00000494 <read_but>:

void read_but()
{
     494:	defffd04 	addi	sp,sp,-12
     498:	dfc00215 	stw	ra,8(sp)
     49c:	df000115 	stw	fp,4(sp)
     4a0:	df000104 	addi	fp,sp,4
	unsigned int sys_time = 0;
     4a4:	e03fff15 	stw	zero,-4(fp)
	sys_time = read_sys_time_ms();
     4a8:	0001aa80 	call	1aa8 <read_sys_time_ms>
     4ac:	e0bfff15 	stw	r2,-4(fp)

    if (BUT0)
     4b0:	00a5c814 	movui	r2,38688
     4b4:	10800037 	ldwio	r2,0(r2)
     4b8:	1080004c 	andi	r2,r2,1
     4bc:	10002226 	beq	r2,zero,548 <read_but+0xb4>
      {
        b->but0_negedge_cnt=0;
     4c0:	d0a1ba17 	ldw	r2,-31000(gp)
     4c4:	10000045 	stb	zero,1(r2)
        if (b->but0_posedge_en)
     4c8:	d0a1ba17 	ldw	r2,-31000(gp)
     4cc:	10800317 	ldw	r2,12(r2)
     4d0:	1080004c 	andi	r2,r2,1
     4d4:	10001826 	beq	r2,zero,538 <read_but+0xa4>
        {
            b->but0_posedge_cnt++;
     4d8:	d0a1ba17 	ldw	r2,-31000(gp)
     4dc:	10c00003 	ldbu	r3,0(r2)
     4e0:	18c00044 	addi	r3,r3,1
     4e4:	10c00005 	stb	r3,0(r2)
            if (b->but0_posedge_cnt==16) {b->but0_posedge_cnt=0; f->but_0_posedge=1; b->but0_posedge_en=0; b->but0_negedge_en=1;}
     4e8:	d0a1ba17 	ldw	r2,-31000(gp)
     4ec:	10800003 	ldbu	r2,0(r2)
     4f0:	10803fcc 	andi	r2,r2,255
     4f4:	10800418 	cmpnei	r2,r2,16
     4f8:	10000f1e 	bne	r2,zero,538 <read_but+0xa4>
     4fc:	d0a1ba17 	ldw	r2,-31000(gp)
     500:	10000005 	stb	zero,0(r2)
     504:	d0a1bb17 	ldw	r2,-30996(gp)
     508:	10c00003 	ldbu	r3,0(r2)
     50c:	18c00094 	ori	r3,r3,2
     510:	10c00005 	stb	r3,0(r2)
     514:	d0a1ba17 	ldw	r2,-31000(gp)
     518:	11000303 	ldbu	r4,12(r2)
     51c:	00ffff84 	movi	r3,-2
     520:	20c6703a 	and	r3,r4,r3
     524:	10c00305 	stb	r3,12(r2)
     528:	d0a1ba17 	ldw	r2,-31000(gp)
     52c:	10c00303 	ldbu	r3,12(r2)
     530:	18c00094 	ori	r3,r3,2
     534:	10c00305 	stb	r3,12(r2)
        }
        b->but0_last_pressed_time=sys_time;
     538:	d0a1ba17 	ldw	r2,-31000(gp)
     53c:	e0ffff17 	ldw	r3,-4(fp)
     540:	10c00115 	stw	r3,4(r2)
     544:	00002b06 	br	5f4 <read_but+0x160>
      }
    else
     {
       b->but0_posedge_cnt=0;
     548:	d0a1ba17 	ldw	r2,-31000(gp)
     54c:	10000005 	stb	zero,0(r2)
       if (b->but0_negedge_en)
     550:	d0a1ba17 	ldw	r2,-31000(gp)
     554:	10800317 	ldw	r2,12(r2)
     558:	1080008c 	andi	r2,r2,2
     55c:	10001826 	beq	r2,zero,5c0 <read_but+0x12c>
        {
            b->but0_negedge_cnt++;
     560:	d0a1ba17 	ldw	r2,-31000(gp)
     564:	10c00043 	ldbu	r3,1(r2)
     568:	18c00044 	addi	r3,r3,1
     56c:	10c00045 	stb	r3,1(r2)
            if (b->but0_negedge_cnt==16) {b->but0_negedge_cnt=0; f->but_0_negedge=1; b->but0_negedge_en=0; b->but0_posedge_en=1;}
     570:	d0a1ba17 	ldw	r2,-31000(gp)
     574:	10800043 	ldbu	r2,1(r2)
     578:	10803fcc 	andi	r2,r2,255
     57c:	10800418 	cmpnei	r2,r2,16
     580:	10000f1e 	bne	r2,zero,5c0 <read_but+0x12c>
     584:	d0a1ba17 	ldw	r2,-31000(gp)
     588:	10000045 	stb	zero,1(r2)
     58c:	d0a1bb17 	ldw	r2,-30996(gp)
     590:	10c00003 	ldbu	r3,0(r2)
     594:	18c00054 	ori	r3,r3,1
     598:	10c00005 	stb	r3,0(r2)
     59c:	d0a1ba17 	ldw	r2,-31000(gp)
     5a0:	11000303 	ldbu	r4,12(r2)
     5a4:	00ffff44 	movi	r3,-3
     5a8:	20c6703a 	and	r3,r4,r3
     5ac:	10c00305 	stb	r3,12(r2)
     5b0:	d0a1ba17 	ldw	r2,-31000(gp)
     5b4:	10c00303 	ldbu	r3,12(r2)
     5b8:	18c00054 	ori	r3,r3,1
     5bc:	10c00305 	stb	r3,12(r2)
        }
       if ((sys_time-b->but0_last_pressed_time)>LONG_PRESS_TIME_MS) {f->but_0_long_pressed=1; b->but0_last_pressed_time=sys_time;}
     5c0:	d0a1ba17 	ldw	r2,-31000(gp)
     5c4:	10800117 	ldw	r2,4(r2)
     5c8:	e0ffff17 	ldw	r3,-4(fp)
     5cc:	1885c83a 	sub	r2,r3,r2
     5d0:	10827170 	cmpltui	r2,r2,2501
     5d4:	1000071e 	bne	r2,zero,5f4 <read_but+0x160>
     5d8:	d0a1bb17 	ldw	r2,-30996(gp)
     5dc:	10c00003 	ldbu	r3,0(r2)
     5e0:	18c00114 	ori	r3,r3,4
     5e4:	10c00005 	stb	r3,0(r2)
     5e8:	d0a1ba17 	ldw	r2,-31000(gp)
     5ec:	e0ffff17 	ldw	r3,-4(fp)
     5f0:	10c00115 	stw	r3,4(r2)
     }

    if (BUT1)
     5f4:	00a5c814 	movui	r2,38688
     5f8:	10800037 	ldwio	r2,0(r2)
     5fc:	1080008c 	andi	r2,r2,2
     600:	10002226 	beq	r2,zero,68c <read_but+0x1f8>
      {
        b->but1_negedge_cnt=0;
     604:	d0a1ba17 	ldw	r2,-31000(gp)
     608:	100000c5 	stb	zero,3(r2)
        if (b->but1_posedge_en)
     60c:	d0a1ba17 	ldw	r2,-31000(gp)
     610:	10800317 	ldw	r2,12(r2)
     614:	1080010c 	andi	r2,r2,4
     618:	10001826 	beq	r2,zero,67c <read_but+0x1e8>
        {
            b->but1_posedge_cnt++;
     61c:	d0a1ba17 	ldw	r2,-31000(gp)
     620:	10c00083 	ldbu	r3,2(r2)
     624:	18c00044 	addi	r3,r3,1
     628:	10c00085 	stb	r3,2(r2)
            if (b->but1_posedge_cnt==16) {b->but1_posedge_cnt=0; f->but_1_posedge=1; b->but1_posedge_en=0; b->but1_negedge_en=1;}
     62c:	d0a1ba17 	ldw	r2,-31000(gp)
     630:	10800083 	ldbu	r2,2(r2)
     634:	10803fcc 	andi	r2,r2,255
     638:	10800418 	cmpnei	r2,r2,16
     63c:	10000f1e 	bne	r2,zero,67c <read_but+0x1e8>
     640:	d0a1ba17 	ldw	r2,-31000(gp)
     644:	10000085 	stb	zero,2(r2)
     648:	d0a1bb17 	ldw	r2,-30996(gp)
     64c:	10c00003 	ldbu	r3,0(r2)
     650:	18c00414 	ori	r3,r3,16
     654:	10c00005 	stb	r3,0(r2)
     658:	d0a1ba17 	ldw	r2,-31000(gp)
     65c:	11000303 	ldbu	r4,12(r2)
     660:	00fffec4 	movi	r3,-5
     664:	20c6703a 	and	r3,r4,r3
     668:	10c00305 	stb	r3,12(r2)
     66c:	d0a1ba17 	ldw	r2,-31000(gp)
     670:	10c00303 	ldbu	r3,12(r2)
     674:	18c00214 	ori	r3,r3,8
     678:	10c00305 	stb	r3,12(r2)
        }
        b->but1_last_pressed_time=sys_time;
     67c:	d0a1ba17 	ldw	r2,-31000(gp)
     680:	e0ffff17 	ldw	r3,-4(fp)
     684:	10c00215 	stw	r3,8(r2)
     688:	00002b06 	br	738 <read_but+0x2a4>
      }
    else
     {
       b->but1_posedge_cnt=0;
     68c:	d0a1ba17 	ldw	r2,-31000(gp)
     690:	10000085 	stb	zero,2(r2)
       if (b->but1_negedge_en)
     694:	d0a1ba17 	ldw	r2,-31000(gp)
     698:	10800317 	ldw	r2,12(r2)
     69c:	1080020c 	andi	r2,r2,8
     6a0:	10001826 	beq	r2,zero,704 <read_but+0x270>
        {
            b->but1_negedge_cnt++;
     6a4:	d0a1ba17 	ldw	r2,-31000(gp)
     6a8:	10c000c3 	ldbu	r3,3(r2)
     6ac:	18c00044 	addi	r3,r3,1
     6b0:	10c000c5 	stb	r3,3(r2)
            if (b->but1_negedge_cnt==16) {b->but1_negedge_cnt=0; f->but_1_negedge=1; b->but1_negedge_en=0; b->but1_posedge_en=1;}
     6b4:	d0a1ba17 	ldw	r2,-31000(gp)
     6b8:	108000c3 	ldbu	r2,3(r2)
     6bc:	10803fcc 	andi	r2,r2,255
     6c0:	10800418 	cmpnei	r2,r2,16
     6c4:	10000f1e 	bne	r2,zero,704 <read_but+0x270>
     6c8:	d0a1ba17 	ldw	r2,-31000(gp)
     6cc:	100000c5 	stb	zero,3(r2)
     6d0:	d0a1bb17 	ldw	r2,-30996(gp)
     6d4:	10c00003 	ldbu	r3,0(r2)
     6d8:	18c00214 	ori	r3,r3,8
     6dc:	10c00005 	stb	r3,0(r2)
     6e0:	d0a1ba17 	ldw	r2,-31000(gp)
     6e4:	11000303 	ldbu	r4,12(r2)
     6e8:	00fffdc4 	movi	r3,-9
     6ec:	20c6703a 	and	r3,r4,r3
     6f0:	10c00305 	stb	r3,12(r2)
     6f4:	d0a1ba17 	ldw	r2,-31000(gp)
     6f8:	10c00303 	ldbu	r3,12(r2)
     6fc:	18c00114 	ori	r3,r3,4
     700:	10c00305 	stb	r3,12(r2)
        }
       if ((sys_time-b->but1_last_pressed_time)>LONG_PRESS_TIME_MS) {f->but_1_long_pressed=1; b->but1_last_pressed_time=sys_time;}
     704:	d0a1ba17 	ldw	r2,-31000(gp)
     708:	10800217 	ldw	r2,8(r2)
     70c:	e0ffff17 	ldw	r3,-4(fp)
     710:	1885c83a 	sub	r2,r3,r2
     714:	10827170 	cmpltui	r2,r2,2501
     718:	1000071e 	bne	r2,zero,738 <read_but+0x2a4>
     71c:	d0a1bb17 	ldw	r2,-30996(gp)
     720:	10c00003 	ldbu	r3,0(r2)
     724:	18c00814 	ori	r3,r3,32
     728:	10c00005 	stb	r3,0(r2)
     72c:	d0a1ba17 	ldw	r2,-31000(gp)
     730:	e0ffff17 	ldw	r3,-4(fp)
     734:	10c00215 	stw	r3,8(r2)
     }
}
     738:	e037883a 	mov	sp,fp
     73c:	dfc00117 	ldw	ra,4(sp)
     740:	df000017 	ldw	fp,0(sp)
     744:	dec00204 	addi	sp,sp,8
     748:	f800283a 	ret

0000074c <buttons_status>:

struct flags_info* buttons_status()
{
     74c:	deffff04 	addi	sp,sp,-4
     750:	df000015 	stw	fp,0(sp)
     754:	d839883a 	mov	fp,sp
   return f;
     758:	d0a1bb17 	ldw	r2,-30996(gp)
}
     75c:	e037883a 	mov	sp,fp
     760:	df000017 	ldw	fp,0(sp)
     764:	dec00104 	addi	sp,sp,4
     768:	f800283a 	ret

0000076c <i2c_start>:
unsigned char i2c_delay(unsigned int delay);



void i2c_start()
{
     76c:	defffe04 	addi	sp,sp,-8
     770:	dfc00115 	stw	ra,4(sp)
     774:	df000015 	stw	fp,0(sp)
     778:	d839883a 	mov	fp,sp
    SCL_SET;       //SCL=1;
     77c:	00c00044 	movi	r3,1
     780:	00a5ac14 	movui	r2,38576
     784:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     788:	01000304 	movi	r4,12
     78c:	0000d4c0 	call	d4c <i2c_delay>
    SDA_RESET;     //SDA=0;
     790:	00c000c4 	movi	r3,3
     794:	00a5a914 	movui	r2,38564
     798:	10c00035 	stwio	r3,0(r2)
    i2c_delay(2*I2C_SPEED);
     79c:	01000604 	movi	r4,24
     7a0:	0000d4c0 	call	d4c <i2c_delay>
    SCL_RESET;     //SCL=0;
     7a4:	00c00044 	movi	r3,1
     7a8:	00a5ad14 	movui	r2,38580
     7ac:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     7b0:	01000304 	movi	r4,12
     7b4:	0000d4c0 	call	d4c <i2c_delay>
}
     7b8:	e037883a 	mov	sp,fp
     7bc:	dfc00117 	ldw	ra,4(sp)
     7c0:	df000017 	ldw	fp,0(sp)
     7c4:	dec00204 	addi	sp,sp,8
     7c8:	f800283a 	ret

000007cc <i2c_stop>:

void i2c_stop()
{
     7cc:	defffe04 	addi	sp,sp,-8
     7d0:	dfc00115 	stw	ra,4(sp)
     7d4:	df000015 	stw	fp,0(sp)
     7d8:	d839883a 	mov	fp,sp
	SDA_WRITE_MODE;   //TRISBbits.TRISB5=0;
     7dc:	00c000c4 	movi	r3,3
     7e0:	00a5a914 	movui	r2,38564
     7e4:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     7e8:	01000304 	movi	r4,12
     7ec:	0000d4c0 	call	d4c <i2c_delay>
    SCL_SET;         //SCL=1;
     7f0:	00c00044 	movi	r3,1
     7f4:	00a5ac14 	movui	r2,38576
     7f8:	10c00035 	stwio	r3,0(r2)
    i2c_delay(2*I2C_SPEED);
     7fc:	01000604 	movi	r4,24
     800:	0000d4c0 	call	d4c <i2c_delay>
    SDA_SET;         //SDA=1;
     804:	00c00044 	movi	r3,1
     808:	00a5a914 	movui	r2,38564
     80c:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     810:	01000304 	movi	r4,12
     814:	0000d4c0 	call	d4c <i2c_delay>
}
     818:	e037883a 	mov	sp,fp
     81c:	dfc00117 	ldw	ra,4(sp)
     820:	df000017 	ldw	fp,0(sp)
     824:	dec00204 	addi	sp,sp,8
     828:	f800283a 	ret

0000082c <i2c_send_bit>:

void i2c_send_bit(unsigned char send_bit)
{
     82c:	defffd04 	addi	sp,sp,-12
     830:	dfc00215 	stw	ra,8(sp)
     834:	df000115 	stw	fp,4(sp)
     838:	df000104 	addi	fp,sp,4
     83c:	2005883a 	mov	r2,r4
     840:	e0bfff05 	stb	r2,-4(fp)
	SDA_READ_MODE;   //TRISBbits.TRISB5=0; //output
     844:	00c00044 	movi	r3,1
     848:	00a5a914 	movui	r2,38564
     84c:	10c00035 	stwio	r3,0(r2)
    if (send_bit) SDA_SET; else SDA_RESET; //SDA=(send_bit)?1:0;
     850:	e0bfff03 	ldbu	r2,-4(fp)
     854:	10000426 	beq	r2,zero,868 <i2c_send_bit+0x3c>
     858:	00c00044 	movi	r3,1
     85c:	00a5a914 	movui	r2,38564
     860:	10c00035 	stwio	r3,0(r2)
     864:	00000306 	br	874 <i2c_send_bit+0x48>
     868:	00c000c4 	movi	r3,3
     86c:	00a5a914 	movui	r2,38564
     870:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     874:	01000304 	movi	r4,12
     878:	0000d4c0 	call	d4c <i2c_delay>
    SCL_SET;        //SCL=1;
     87c:	00c00044 	movi	r3,1
     880:	00a5ac14 	movui	r2,38576
     884:	10c00035 	stwio	r3,0(r2)
    i2c_delay(2*I2C_SPEED);
     888:	01000604 	movi	r4,24
     88c:	0000d4c0 	call	d4c <i2c_delay>
    SCL_RESET;      //SCL=0;
     890:	00c00044 	movi	r3,1
     894:	00a5ad14 	movui	r2,38580
     898:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     89c:	01000304 	movi	r4,12
     8a0:	0000d4c0 	call	d4c <i2c_delay>
}
     8a4:	e037883a 	mov	sp,fp
     8a8:	dfc00117 	ldw	ra,4(sp)
     8ac:	df000017 	ldw	fp,0(sp)
     8b0:	dec00204 	addi	sp,sp,8
     8b4:	f800283a 	ret

000008b8 <i2c_read_bit>:

unsigned char i2c_read_bit()
{
     8b8:	defffd04 	addi	sp,sp,-12
     8bc:	dfc00215 	stw	ra,8(sp)
     8c0:	df000115 	stw	fp,4(sp)
     8c4:	df000104 	addi	fp,sp,4
   unsigned char read_bit;
   SDA_READ_MODE;    //LATBbits.LATB5=1; //Z
     8c8:	00c00044 	movi	r3,1
     8cc:	00a5a914 	movui	r2,38564
     8d0:	10c00035 	stwio	r3,0(r2)
   i2c_delay(I2C_SPEED);
     8d4:	01000304 	movi	r4,12
     8d8:	0000d4c0 	call	d4c <i2c_delay>
   SCL_SET;          //SCL=1;
     8dc:	00c00044 	movi	r3,1
     8e0:	00a5ac14 	movui	r2,38576
     8e4:	10c00035 	stwio	r3,0(r2)
   i2c_delay(I2C_SPEED);
     8e8:	01000304 	movi	r4,12
     8ec:	0000d4c0 	call	d4c <i2c_delay>
   read_bit=SDA;   //read_bit=PORTBbits.RB5;
     8f0:	00a5a814 	movui	r2,38560
     8f4:	10800037 	ldwio	r2,0(r2)
     8f8:	1080008c 	andi	r2,r2,2
     8fc:	1004c03a 	cmpne	r2,r2,zero
     900:	e0bfff05 	stb	r2,-4(fp)
   i2c_delay(I2C_SPEED);
     904:	01000304 	movi	r4,12
     908:	0000d4c0 	call	d4c <i2c_delay>
   SCL_RESET;      //SCL=0;
     90c:	00c00044 	movi	r3,1
     910:	00a5ad14 	movui	r2,38580
     914:	10c00035 	stwio	r3,0(r2)
   i2c_delay(I2C_SPEED);
     918:	01000304 	movi	r4,12
     91c:	0000d4c0 	call	d4c <i2c_delay>
   return read_bit;
     920:	e0bfff03 	ldbu	r2,-4(fp)
}
     924:	e037883a 	mov	sp,fp
     928:	dfc00117 	ldw	ra,4(sp)
     92c:	df000017 	ldw	fp,0(sp)
     930:	dec00204 	addi	sp,sp,8
     934:	f800283a 	ret

00000938 <i2c_send_byte>:

unsigned char i2c_send_byte(unsigned char send_byte)
{
     938:	defffc04 	addi	sp,sp,-16
     93c:	dfc00315 	stw	ra,12(sp)
     940:	df000215 	stw	fp,8(sp)
     944:	df000204 	addi	fp,sp,8
     948:	2005883a 	mov	r2,r4
     94c:	e0bfff05 	stb	r2,-4(fp)
    unsigned char i;
    for (i=0;i<8;i++)
     950:	e03ffe05 	stb	zero,-8(fp)
     954:	00003d06 	br	a4c <i2c_send_byte+0x114>
    {
        switch(i)
     958:	e0bffe03 	ldbu	r2,-8(fp)
     95c:	10c00228 	cmpgeui	r3,r2,8
     960:	1800371e 	bne	r3,zero,a40 <i2c_send_byte+0x108>
     964:	1085883a 	add	r2,r2,r2
     968:	1087883a 	add	r3,r2,r2
     96c:	00800034 	movhi	r2,0
     970:	10826004 	addi	r2,r2,2432
     974:	1885883a 	add	r2,r3,r2
     978:	10800017 	ldw	r2,0(r2)
     97c:	1000683a 	jmp	r2
     980:	000009a0 	cmpeqi	zero,zero,38
     984:	000009b4 	movhi	zero,38
     988:	000009c8 	cmpgei	zero,zero,39
     98c:	000009dc 	xori	zero,zero,39
     990:	000009f0 	cmpltui	zero,zero,39
     994:	00000a04 	movi	zero,40
     998:	00000a18 	cmpnei	zero,zero,40
     99c:	00000a2c 	andhi	zero,zero,40
        {
            case 0: {i2c_send_bit(send_byte&BIT7);} break;
     9a0:	e0bfff03 	ldbu	r2,-4(fp)
     9a4:	1080200c 	andi	r2,r2,128
     9a8:	1009883a 	mov	r4,r2
     9ac:	000082c0 	call	82c <i2c_send_bit>
     9b0:	00002306 	br	a40 <i2c_send_byte+0x108>
            case 1: {i2c_send_bit(send_byte&BIT6);} break;
     9b4:	e0bfff03 	ldbu	r2,-4(fp)
     9b8:	1080100c 	andi	r2,r2,64
     9bc:	1009883a 	mov	r4,r2
     9c0:	000082c0 	call	82c <i2c_send_bit>
     9c4:	00001e06 	br	a40 <i2c_send_byte+0x108>
            case 2: {i2c_send_bit(send_byte&BIT5);} break;
     9c8:	e0bfff03 	ldbu	r2,-4(fp)
     9cc:	1080080c 	andi	r2,r2,32
     9d0:	1009883a 	mov	r4,r2
     9d4:	000082c0 	call	82c <i2c_send_bit>
     9d8:	00001906 	br	a40 <i2c_send_byte+0x108>
            case 3: {i2c_send_bit(send_byte&BIT4);} break;
     9dc:	e0bfff03 	ldbu	r2,-4(fp)
     9e0:	1080040c 	andi	r2,r2,16
     9e4:	1009883a 	mov	r4,r2
     9e8:	000082c0 	call	82c <i2c_send_bit>
     9ec:	00001406 	br	a40 <i2c_send_byte+0x108>
            case 4: {i2c_send_bit(send_byte&BIT3);} break;
     9f0:	e0bfff03 	ldbu	r2,-4(fp)
     9f4:	1080020c 	andi	r2,r2,8
     9f8:	1009883a 	mov	r4,r2
     9fc:	000082c0 	call	82c <i2c_send_bit>
     a00:	00000f06 	br	a40 <i2c_send_byte+0x108>
            case 5: {i2c_send_bit(send_byte&BIT2);} break;
     a04:	e0bfff03 	ldbu	r2,-4(fp)
     a08:	1080010c 	andi	r2,r2,4
     a0c:	1009883a 	mov	r4,r2
     a10:	000082c0 	call	82c <i2c_send_bit>
     a14:	00000a06 	br	a40 <i2c_send_byte+0x108>
            case 6: {i2c_send_bit(send_byte&BIT1);} break;
     a18:	e0bfff03 	ldbu	r2,-4(fp)
     a1c:	1080008c 	andi	r2,r2,2
     a20:	1009883a 	mov	r4,r2
     a24:	000082c0 	call	82c <i2c_send_bit>
     a28:	00000506 	br	a40 <i2c_send_byte+0x108>
            case 7: {i2c_send_bit(send_byte&BIT0);} break;
     a2c:	e0bfff03 	ldbu	r2,-4(fp)
     a30:	1080004c 	andi	r2,r2,1
     a34:	1009883a 	mov	r4,r2
     a38:	000082c0 	call	82c <i2c_send_bit>
     a3c:	0001883a 	nop
}

unsigned char i2c_send_byte(unsigned char send_byte)
{
    unsigned char i;
    for (i=0;i<8;i++)
     a40:	e0bffe03 	ldbu	r2,-8(fp)
     a44:	10800044 	addi	r2,r2,1
     a48:	e0bffe05 	stb	r2,-8(fp)
     a4c:	e0bffe03 	ldbu	r2,-8(fp)
     a50:	10800230 	cmpltui	r2,r2,8
     a54:	103fc01e 	bne	r2,zero,958 <_gp+0xffff4784>
            case 5: {i2c_send_bit(send_byte&BIT2);} break;
            case 6: {i2c_send_bit(send_byte&BIT1);} break;
            case 7: {i2c_send_bit(send_byte&BIT0);} break;
        }
    }
    return 1;
     a58:	00800044 	movi	r2,1
}
     a5c:	e037883a 	mov	sp,fp
     a60:	dfc00117 	ldw	ra,4(sp)
     a64:	df000017 	ldw	fp,0(sp)
     a68:	dec00204 	addi	sp,sp,8
     a6c:	f800283a 	ret

00000a70 <i2c_read_byte>:

unsigned char i2c_read_byte()
{
     a70:	defffd04 	addi	sp,sp,-12
     a74:	dfc00215 	stw	ra,8(sp)
     a78:	df000115 	stw	fp,4(sp)
     a7c:	df000104 	addi	fp,sp,4
    unsigned char i;
    unsigned char read_byte=0;
     a80:	e03fff45 	stb	zero,-3(fp)
    for (i=0;i<8;i++)
     a84:	e03fff05 	stb	zero,-4(fp)
     a88:	00006306 	br	c18 <i2c_read_byte+0x1a8>
    {
        switch(i)
     a8c:	e0bfff03 	ldbu	r2,-4(fp)
     a90:	10c00228 	cmpgeui	r3,r2,8
     a94:	18005d1e 	bne	r3,zero,c0c <i2c_read_byte+0x19c>
     a98:	1085883a 	add	r2,r2,r2
     a9c:	1087883a 	add	r3,r2,r2
     aa0:	00800034 	movhi	r2,0
     aa4:	1082ad04 	addi	r2,r2,2740
     aa8:	1885883a 	add	r2,r3,r2
     aac:	10800017 	ldw	r2,0(r2)
     ab0:	1000683a 	jmp	r2
     ab4:	00000ad4 	movui	zero,43
     ab8:	00000afc 	xorhi	zero,zero,43
     abc:	00000b24 	muli	zero,zero,44
     ac0:	00000b4c 	andi	zero,zero,45
     ac4:	00000b74 	movhi	zero,45
     ac8:	00000b9c 	xori	zero,zero,46
     acc:	00000bc4 	movi	zero,47
     ad0:	00000bec 	andhi	zero,zero,47
        {
            case 0: { read_byte|=(i2c_read_bit())?BIT7:0; } break;
     ad4:	00008b80 	call	8b8 <i2c_read_bit>
     ad8:	10803fcc 	andi	r2,r2,255
     adc:	10000226 	beq	r2,zero,ae8 <i2c_read_byte+0x78>
     ae0:	00bfe004 	movi	r2,-128
     ae4:	00000106 	br	aec <i2c_read_byte+0x7c>
     ae8:	0005883a 	mov	r2,zero
     aec:	e0ffff43 	ldbu	r3,-3(fp)
     af0:	10c4b03a 	or	r2,r2,r3
     af4:	e0bfff45 	stb	r2,-3(fp)
     af8:	00004406 	br	c0c <i2c_read_byte+0x19c>
            case 1: { read_byte|=(i2c_read_bit())?BIT6:0; } break;
     afc:	00008b80 	call	8b8 <i2c_read_bit>
     b00:	10803fcc 	andi	r2,r2,255
     b04:	10000226 	beq	r2,zero,b10 <i2c_read_byte+0xa0>
     b08:	00801004 	movi	r2,64
     b0c:	00000106 	br	b14 <i2c_read_byte+0xa4>
     b10:	0005883a 	mov	r2,zero
     b14:	e0ffff43 	ldbu	r3,-3(fp)
     b18:	10c4b03a 	or	r2,r2,r3
     b1c:	e0bfff45 	stb	r2,-3(fp)
     b20:	00003a06 	br	c0c <i2c_read_byte+0x19c>
            case 2: { read_byte|=(i2c_read_bit())?BIT5:0; } break;
     b24:	00008b80 	call	8b8 <i2c_read_bit>
     b28:	10803fcc 	andi	r2,r2,255
     b2c:	10000226 	beq	r2,zero,b38 <i2c_read_byte+0xc8>
     b30:	00800804 	movi	r2,32
     b34:	00000106 	br	b3c <i2c_read_byte+0xcc>
     b38:	0005883a 	mov	r2,zero
     b3c:	e0ffff43 	ldbu	r3,-3(fp)
     b40:	10c4b03a 	or	r2,r2,r3
     b44:	e0bfff45 	stb	r2,-3(fp)
     b48:	00003006 	br	c0c <i2c_read_byte+0x19c>
            case 3: { read_byte|=(i2c_read_bit())?BIT4:0; } break;
     b4c:	00008b80 	call	8b8 <i2c_read_bit>
     b50:	10803fcc 	andi	r2,r2,255
     b54:	10000226 	beq	r2,zero,b60 <i2c_read_byte+0xf0>
     b58:	00800404 	movi	r2,16
     b5c:	00000106 	br	b64 <i2c_read_byte+0xf4>
     b60:	0005883a 	mov	r2,zero
     b64:	e0ffff43 	ldbu	r3,-3(fp)
     b68:	10c4b03a 	or	r2,r2,r3
     b6c:	e0bfff45 	stb	r2,-3(fp)
     b70:	00002606 	br	c0c <i2c_read_byte+0x19c>
            case 4: { read_byte|=(i2c_read_bit())?BIT3:0; } break;
     b74:	00008b80 	call	8b8 <i2c_read_bit>
     b78:	10803fcc 	andi	r2,r2,255
     b7c:	10000226 	beq	r2,zero,b88 <i2c_read_byte+0x118>
     b80:	00800204 	movi	r2,8
     b84:	00000106 	br	b8c <i2c_read_byte+0x11c>
     b88:	0005883a 	mov	r2,zero
     b8c:	e0ffff43 	ldbu	r3,-3(fp)
     b90:	10c4b03a 	or	r2,r2,r3
     b94:	e0bfff45 	stb	r2,-3(fp)
     b98:	00001c06 	br	c0c <i2c_read_byte+0x19c>
            case 5: { read_byte|=(i2c_read_bit())?BIT2:0; } break;
     b9c:	00008b80 	call	8b8 <i2c_read_bit>
     ba0:	10803fcc 	andi	r2,r2,255
     ba4:	10000226 	beq	r2,zero,bb0 <i2c_read_byte+0x140>
     ba8:	00800104 	movi	r2,4
     bac:	00000106 	br	bb4 <i2c_read_byte+0x144>
     bb0:	0005883a 	mov	r2,zero
     bb4:	e0ffff43 	ldbu	r3,-3(fp)
     bb8:	10c4b03a 	or	r2,r2,r3
     bbc:	e0bfff45 	stb	r2,-3(fp)
     bc0:	00001206 	br	c0c <i2c_read_byte+0x19c>
            case 6: { read_byte|=(i2c_read_bit())?BIT1:0; } break;
     bc4:	00008b80 	call	8b8 <i2c_read_bit>
     bc8:	10803fcc 	andi	r2,r2,255
     bcc:	10000226 	beq	r2,zero,bd8 <i2c_read_byte+0x168>
     bd0:	00800084 	movi	r2,2
     bd4:	00000106 	br	bdc <i2c_read_byte+0x16c>
     bd8:	0005883a 	mov	r2,zero
     bdc:	e0ffff43 	ldbu	r3,-3(fp)
     be0:	10c4b03a 	or	r2,r2,r3
     be4:	e0bfff45 	stb	r2,-3(fp)
     be8:	00000806 	br	c0c <i2c_read_byte+0x19c>
            case 7: { read_byte|=(i2c_read_bit())?BIT0:0; } break;
     bec:	00008b80 	call	8b8 <i2c_read_bit>
     bf0:	10803fcc 	andi	r2,r2,255
     bf4:	1004c03a 	cmpne	r2,r2,zero
     bf8:	1007883a 	mov	r3,r2
     bfc:	e0bfff43 	ldbu	r2,-3(fp)
     c00:	1884b03a 	or	r2,r3,r2
     c04:	e0bfff45 	stb	r2,-3(fp)
     c08:	0001883a 	nop

unsigned char i2c_read_byte()
{
    unsigned char i;
    unsigned char read_byte=0;
    for (i=0;i<8;i++)
     c0c:	e0bfff03 	ldbu	r2,-4(fp)
     c10:	10800044 	addi	r2,r2,1
     c14:	e0bfff05 	stb	r2,-4(fp)
     c18:	e0bfff03 	ldbu	r2,-4(fp)
     c1c:	10800230 	cmpltui	r2,r2,8
     c20:	103f9a1e 	bne	r2,zero,a8c <_gp+0xffff48b8>
            case 5: { read_byte|=(i2c_read_bit())?BIT2:0; } break;
            case 6: { read_byte|=(i2c_read_bit())?BIT1:0; } break;
            case 7: { read_byte|=(i2c_read_bit())?BIT0:0; } break;
        }
    }
    SDA_READ_MODE;    //TRISBbits.TRISB5=0;
     c24:	00c00044 	movi	r3,1
     c28:	00a5a914 	movui	r2,38564
     c2c:	10c00035 	stwio	r3,0(r2)
    return read_byte;
     c30:	e0bfff43 	ldbu	r2,-3(fp)
}
     c34:	e037883a 	mov	sp,fp
     c38:	dfc00117 	ldw	ra,4(sp)
     c3c:	df000017 	ldw	fp,0(sp)
     c40:	dec00204 	addi	sp,sp,8
     c44:	f800283a 	ret

00000c48 <read_ack>:

unsigned char read_ack()
{
     c48:	defffd04 	addi	sp,sp,-12
     c4c:	dfc00215 	stw	ra,8(sp)
     c50:	df000115 	stw	fp,4(sp)
     c54:	df000104 	addi	fp,sp,4
    unsigned char ack;
    SDA_READ_MODE; //LATBbits.LATB5=1; //input
     c58:	00c00044 	movi	r3,1
     c5c:	00a5a914 	movui	r2,38564
     c60:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     c64:	01000304 	movi	r4,12
     c68:	0000d4c0 	call	d4c <i2c_delay>
    SCL_SET;       //SCL=1;
     c6c:	00c00044 	movi	r3,1
     c70:	00a5ac14 	movui	r2,38576
     c74:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     c78:	01000304 	movi	r4,12
     c7c:	0000d4c0 	call	d4c <i2c_delay>
    ack=SDA;      //PORTBbits.RB5;
     c80:	00a5a814 	movui	r2,38560
     c84:	10800037 	ldwio	r2,0(r2)
     c88:	1080008c 	andi	r2,r2,2
     c8c:	1004c03a 	cmpne	r2,r2,zero
     c90:	e0bfff05 	stb	r2,-4(fp)
    i2c_delay(I2C_SPEED);
     c94:	01000304 	movi	r4,12
     c98:	0000d4c0 	call	d4c <i2c_delay>
    SCL_RESET;     //SCL=0;
     c9c:	00c00044 	movi	r3,1
     ca0:	00a5ad14 	movui	r2,38580
     ca4:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     ca8:	01000304 	movi	r4,12
     cac:	0000d4c0 	call	d4c <i2c_delay>
    //TRISBbits.TRISB5=0; //output
    return ack;
     cb0:	e0bfff03 	ldbu	r2,-4(fp)
}
     cb4:	e037883a 	mov	sp,fp
     cb8:	dfc00117 	ldw	ra,4(sp)
     cbc:	df000017 	ldw	fp,0(sp)
     cc0:	dec00204 	addi	sp,sp,8
     cc4:	f800283a 	ret

00000cc8 <write_ack>:

unsigned char write_ack(unsigned char ack)
{
     cc8:	defffd04 	addi	sp,sp,-12
     ccc:	dfc00215 	stw	ra,8(sp)
     cd0:	df000115 	stw	fp,4(sp)
     cd4:	df000104 	addi	fp,sp,4
     cd8:	2005883a 	mov	r2,r4
     cdc:	e0bfff05 	stb	r2,-4(fp)
    //TRISBbits.TRISB5=0; //output
    if (ack) SDA_SET; else SDA_RESET;   //SDA=(ack)?0:1;
     ce0:	e0bfff03 	ldbu	r2,-4(fp)
     ce4:	10000426 	beq	r2,zero,cf8 <write_ack+0x30>
     ce8:	00c00044 	movi	r3,1
     cec:	00a5a914 	movui	r2,38564
     cf0:	10c00035 	stwio	r3,0(r2)
     cf4:	00000306 	br	d04 <write_ack+0x3c>
     cf8:	00c000c4 	movi	r3,3
     cfc:	00a5a914 	movui	r2,38564
     d00:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     d04:	01000304 	movi	r4,12
     d08:	0000d4c0 	call	d4c <i2c_delay>
    SCL_SET;    //SCL=1;
     d0c:	00c00044 	movi	r3,1
     d10:	00a5ac14 	movui	r2,38576
     d14:	10c00035 	stwio	r3,0(r2)
    i2c_delay(2*I2C_SPEED);
     d18:	01000604 	movi	r4,24
     d1c:	0000d4c0 	call	d4c <i2c_delay>
    SCL_RESET;    //SCL=0;
     d20:	00c00044 	movi	r3,1
     d24:	00a5ad14 	movui	r2,38580
     d28:	10c00035 	stwio	r3,0(r2)
    i2c_delay(I2C_SPEED);
     d2c:	01000304 	movi	r4,12
     d30:	0000d4c0 	call	d4c <i2c_delay>
    //TRISBbits.TRISB5=1; //input
    return ack;
     d34:	e0bfff03 	ldbu	r2,-4(fp)
}
     d38:	e037883a 	mov	sp,fp
     d3c:	dfc00117 	ldw	ra,4(sp)
     d40:	df000017 	ldw	fp,0(sp)
     d44:	dec00204 	addi	sp,sp,8
     d48:	f800283a 	ret

00000d4c <i2c_delay>:

unsigned char i2c_delay(unsigned int delay)
{
     d4c:	defffd04 	addi	sp,sp,-12
     d50:	df000215 	stw	fp,8(sp)
     d54:	df000204 	addi	fp,sp,8
     d58:	e13fff15 	stw	r4,-4(fp)
    int i;
    for (i=delay;i>0;i--) {}
     d5c:	e0bfff17 	ldw	r2,-4(fp)
     d60:	e0bffe15 	stw	r2,-8(fp)
     d64:	00000306 	br	d74 <i2c_delay+0x28>
     d68:	e0bffe17 	ldw	r2,-8(fp)
     d6c:	10bfffc4 	addi	r2,r2,-1
     d70:	e0bffe15 	stw	r2,-8(fp)
     d74:	e0bffe17 	ldw	r2,-8(fp)
     d78:	00bffb16 	blt	zero,r2,d68 <_gp+0xffff4b94>
    return 1;
     d7c:	00800044 	movi	r2,1
}
     d80:	e037883a 	mov	sp,fp
     d84:	df000017 	ldw	fp,0(sp)
     d88:	dec00104 	addi	sp,sp,4
     d8c:	f800283a 	ret

00000d90 <i2c_init>:

void i2c_init()
{
     d90:	deffff04 	addi	sp,sp,-4
     d94:	df000015 	stw	fp,0(sp)
     d98:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_CLEAR_BITS(I2C_PORT_BASE, BIT1); //Output 0 - on SDA
     d9c:	00c00084 	movi	r3,2
     da0:	00a5ad14 	movui	r2,38580
     da4:	10c00035 	stwio	r3,0(r2)
    SDA_SET;   //SDA=1;
     da8:	00c00044 	movi	r3,1
     dac:	00a5a914 	movui	r2,38564
     db0:	10c00035 	stwio	r3,0(r2)
    SCL_SET;   //SCL=1;
     db4:	00c00044 	movi	r3,1
     db8:	00a5ac14 	movui	r2,38576
     dbc:	10c00035 	stwio	r3,0(r2)
}
     dc0:	e037883a 	mov	sp,fp
     dc4:	df000017 	ldw	fp,0(sp)
     dc8:	dec00104 	addi	sp,sp,4
     dcc:	f800283a 	ret

00000dd0 <write_command>:

void write_command (unsigned char reg_addr, unsigned char data)
{
     dd0:	defffc04 	addi	sp,sp,-16
     dd4:	dfc00315 	stw	ra,12(sp)
     dd8:	df000215 	stw	fp,8(sp)
     ddc:	df000204 	addi	fp,sp,8
     de0:	2007883a 	mov	r3,r4
     de4:	2805883a 	mov	r2,r5
     de8:	e0fffe05 	stb	r3,-8(fp)
     dec:	e0bfff05 	stb	r2,-4(fp)
   i2c_start();
     df0:	000076c0 	call	76c <i2c_start>
   i2c_send_byte(I2C_ACCEL_ADDR_WR);
     df4:	01000e84 	movi	r4,58
     df8:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     dfc:	0000c480 	call	c48 <read_ack>
   i2c_send_byte(reg_addr);
     e00:	e0bffe03 	ldbu	r2,-8(fp)
     e04:	1009883a 	mov	r4,r2
     e08:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     e0c:	0000c480 	call	c48 <read_ack>
   i2c_send_byte(data);
     e10:	e0bfff03 	ldbu	r2,-4(fp)
     e14:	1009883a 	mov	r4,r2
     e18:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     e1c:	0000c480 	call	c48 <read_ack>
   i2c_stop();
     e20:	00007cc0 	call	7cc <i2c_stop>
}
     e24:	e037883a 	mov	sp,fp
     e28:	dfc00117 	ldw	ra,4(sp)
     e2c:	df000017 	ldw	fp,0(sp)
     e30:	dec00204 	addi	sp,sp,8
     e34:	f800283a 	ret

00000e38 <write_command_multiple>:

void write_command_multiple (unsigned char reg_addr, unsigned char *data, unsigned char size)
{
     e38:	defffa04 	addi	sp,sp,-24
     e3c:	dfc00515 	stw	ra,20(sp)
     e40:	df000415 	stw	fp,16(sp)
     e44:	df000404 	addi	fp,sp,16
     e48:	2007883a 	mov	r3,r4
     e4c:	e17ffe15 	stw	r5,-8(fp)
     e50:	3005883a 	mov	r2,r6
     e54:	e0fffd05 	stb	r3,-12(fp)
     e58:	e0bfff05 	stb	r2,-4(fp)
   unsigned char i = 0;
     e5c:	e03ffc05 	stb	zero,-16(fp)
   i2c_start();
     e60:	000076c0 	call	76c <i2c_start>
   i2c_send_byte(I2C_ACCEL_ADDR_WR);
     e64:	01000e84 	movi	r4,58
     e68:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     e6c:	0000c480 	call	c48 <read_ack>
   i2c_send_byte(reg_addr);
     e70:	e0bffd03 	ldbu	r2,-12(fp)
     e74:	1009883a 	mov	r4,r2
     e78:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     e7c:	0000c480 	call	c48 <read_ack>
   for (i=0;i<size;i++)
     e80:	e03ffc05 	stb	zero,-16(fp)
     e84:	00000b06 	br	eb4 <write_command_multiple+0x7c>
   {
   i2c_send_byte(data[i]);
     e88:	e0bffc03 	ldbu	r2,-16(fp)
     e8c:	e0fffe17 	ldw	r3,-8(fp)
     e90:	1885883a 	add	r2,r3,r2
     e94:	10800003 	ldbu	r2,0(r2)
     e98:	10803fcc 	andi	r2,r2,255
     e9c:	1009883a 	mov	r4,r2
     ea0:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     ea4:	0000c480 	call	c48 <read_ack>
   i2c_start();
   i2c_send_byte(I2C_ACCEL_ADDR_WR);
   read_ack();
   i2c_send_byte(reg_addr);
   read_ack();
   for (i=0;i<size;i++)
     ea8:	e0bffc03 	ldbu	r2,-16(fp)
     eac:	10800044 	addi	r2,r2,1
     eb0:	e0bffc05 	stb	r2,-16(fp)
     eb4:	e0fffc03 	ldbu	r3,-16(fp)
     eb8:	e0bfff03 	ldbu	r2,-4(fp)
     ebc:	18bff236 	bltu	r3,r2,e88 <_gp+0xffff4cb4>
   {
   i2c_send_byte(data[i]);
   read_ack();
   }
   i2c_stop();
     ec0:	00007cc0 	call	7cc <i2c_stop>
}
     ec4:	e037883a 	mov	sp,fp
     ec8:	dfc00117 	ldw	ra,4(sp)
     ecc:	df000017 	ldw	fp,0(sp)
     ed0:	dec00204 	addi	sp,sp,8
     ed4:	f800283a 	ret

00000ed8 <read_command>:

unsigned char read_command (unsigned char reg_addr)
{
     ed8:	defffc04 	addi	sp,sp,-16
     edc:	dfc00315 	stw	ra,12(sp)
     ee0:	df000215 	stw	fp,8(sp)
     ee4:	df000204 	addi	fp,sp,8
     ee8:	2005883a 	mov	r2,r4
     eec:	e0bfff05 	stb	r2,-4(fp)
   unsigned char buf_data;
   i2c_start();
     ef0:	000076c0 	call	76c <i2c_start>
   i2c_send_byte(I2C_ACCEL_ADDR_WR);
     ef4:	01000e84 	movi	r4,58
     ef8:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     efc:	0000c480 	call	c48 <read_ack>
   i2c_send_byte(reg_addr);
     f00:	e0bfff03 	ldbu	r2,-4(fp)
     f04:	1009883a 	mov	r4,r2
     f08:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     f0c:	0000c480 	call	c48 <read_ack>
   i2c_start();
     f10:	000076c0 	call	76c <i2c_start>
   i2c_send_byte(I2C_ACCEL_ADDR_RD);
     f14:	01000ec4 	movi	r4,59
     f18:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     f1c:	0000c480 	call	c48 <read_ack>
   buf_data=i2c_read_byte();
     f20:	0000a700 	call	a70 <i2c_read_byte>
     f24:	e0bffe05 	stb	r2,-8(fp)
   write_ack(1);
     f28:	01000044 	movi	r4,1
     f2c:	0000cc80 	call	cc8 <write_ack>
   i2c_stop();
     f30:	00007cc0 	call	7cc <i2c_stop>
   return buf_data;
     f34:	e0bffe03 	ldbu	r2,-8(fp)
}
     f38:	e037883a 	mov	sp,fp
     f3c:	dfc00117 	ldw	ra,4(sp)
     f40:	df000017 	ldw	fp,0(sp)
     f44:	dec00204 	addi	sp,sp,8
     f48:	f800283a 	ret

00000f4c <read_word_command>:

unsigned short read_word_command (unsigned char reg_addr)
{
     f4c:	defffc04 	addi	sp,sp,-16
     f50:	dfc00315 	stw	ra,12(sp)
     f54:	df000215 	stw	fp,8(sp)
     f58:	df000204 	addi	fp,sp,8
     f5c:	2005883a 	mov	r2,r4
     f60:	e0bfff05 	stb	r2,-4(fp)
   unsigned short buf_data;
   unsigned char msb,lsb;
   i2c_start();
     f64:	000076c0 	call	76c <i2c_start>
   i2c_send_byte(I2C_ACCEL_ADDR_WR);
     f68:	01000e84 	movi	r4,58
     f6c:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     f70:	0000c480 	call	c48 <read_ack>
   i2c_send_byte(reg_addr);
     f74:	e0bfff03 	ldbu	r2,-4(fp)
     f78:	1009883a 	mov	r4,r2
     f7c:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     f80:	0000c480 	call	c48 <read_ack>
   i2c_start();
     f84:	000076c0 	call	76c <i2c_start>
   i2c_send_byte(I2C_ACCEL_ADDR_RD);
     f88:	01000ec4 	movi	r4,59
     f8c:	00009380 	call	938 <i2c_send_byte>
   read_ack();
     f90:	0000c480 	call	c48 <read_ack>
   msb=i2c_read_byte();
     f94:	0000a700 	call	a70 <i2c_read_byte>
     f98:	e0bffe05 	stb	r2,-8(fp)
   write_ack(1);
     f9c:	01000044 	movi	r4,1
     fa0:	0000cc80 	call	cc8 <write_ack>
   lsb=i2c_read_byte();
     fa4:	0000a700 	call	a70 <i2c_read_byte>
     fa8:	e0bffe45 	stb	r2,-7(fp)
   write_ack(0);
     fac:	0009883a 	mov	r4,zero
     fb0:	0000cc80 	call	cc8 <write_ack>
   i2c_stop();
     fb4:	00007cc0 	call	7cc <i2c_stop>
   buf_data=(msb<<8)&0xff00;
     fb8:	e0bffe03 	ldbu	r2,-8(fp)
     fbc:	1004923a 	slli	r2,r2,8
     fc0:	e0bffe8d 	sth	r2,-6(fp)
   buf_data|=lsb;
     fc4:	e0fffe43 	ldbu	r3,-7(fp)
     fc8:	e0bffe8b 	ldhu	r2,-6(fp)
     fcc:	1884b03a 	or	r2,r3,r2
     fd0:	e0bffe8d 	sth	r2,-6(fp)
   return buf_data;
     fd4:	e0bffe8b 	ldhu	r2,-6(fp)
}
     fd8:	e037883a 	mov	sp,fp
     fdc:	dfc00117 	ldw	ra,4(sp)
     fe0:	df000017 	ldw	fp,0(sp)
     fe4:	dec00204 	addi	sp,sp,8
     fe8:	f800283a 	ret

00000fec <laser_init>:
//01: Start by CPU (with delay), strobe length equivalent to "pulse length"
//10: Start by CPU (with delay), stop after external comparator signal (strobe length is limited by "pulse length");
//11: Start by CPU (with delay), stop after external comparator signal (with delay)

void laser_init()
{
     fec:	deffff04 	addi	sp,sp,-4
     ff0:	df000015 	stw	fp,0(sp)
     ff4:	d839883a 	mov	fp,sp
	IOWR(LASER_DRIVER_BASE,2,10);
     ff8:	00c00284 	movi	r3,10
     ffc:	00a59214 	movui	r2,38472
    1000:	10c00035 	stwio	r3,0(r2)
	IOWR(LASER_DRIVER_BASE,3,2);
    1004:	00c00084 	movi	r3,2
    1008:	00a59314 	movui	r2,38476
    100c:	10c00035 	stwio	r3,0(r2)
}
    1010:	e037883a 	mov	sp,fp
    1014:	df000017 	ldw	fp,0(sp)
    1018:	dec00104 	addi	sp,sp,4
    101c:	f800283a 	ret

00001020 <generate_pulse>:

void generate_pulse(unsigned short tpulse)
{
    1020:	defffe04 	addi	sp,sp,-8
    1024:	df000115 	stw	fp,4(sp)
    1028:	df000104 	addi	fp,sp,4
    102c:	2005883a 	mov	r2,r4
    1030:	e0bfff0d 	sth	r2,-4(fp)
   //mode - 0b01 control[2:1]
   IOWR(LASER_DRIVER_BASE,PULSE_LENGTH,tpulse);
    1034:	e0ffff0b 	ldhu	r3,-4(fp)
    1038:	00a59214 	movui	r2,38472
    103c:	10c00035 	stwio	r3,0(r2)
   IOWR(LASER_DRIVER_BASE,PULSE_DELAY,0);
    1040:	0007883a 	mov	r3,zero
    1044:	00a59314 	movui	r2,38476
    1048:	10c00035 	stwio	r3,0(r2)
   IOWR(LASER_DRIVER_BASE,DRIVER_CONTROL,0x3);
    104c:	00c000c4 	movi	r3,3
    1050:	00a59014 	movui	r2,38464
    1054:	10c00035 	stwio	r3,0(r2)
}
    1058:	e037883a 	mov	sp,fp
    105c:	df000017 	ldw	fp,0(sp)
    1060:	dec00104 	addi	sp,sp,4
    1064:	f800283a 	ret

00001068 <change_axis>:

unsigned char counter = 0;
#define PERIOD 100

void change_axis()
{
    1068:	deffff04 	addi	sp,sp,-4
    106c:	df000015 	stw	fp,0(sp)
    1070:	d839883a 	mov	fp,sp
	axis_num++;
    1074:	d0a1be83 	ldbu	r2,-30982(gp)
    1078:	10800044 	addi	r2,r2,1
    107c:	d0a1be85 	stb	r2,-30982(gp)
	if (axis_num>2) axis_num=0;
    1080:	d0a1be83 	ldbu	r2,-30982(gp)
    1084:	10803fcc 	andi	r2,r2,255
    1088:	108000f0 	cmpltui	r2,r2,3
    108c:	1000011e 	bne	r2,zero,1094 <change_axis+0x2c>
    1090:	d021be85 	stb	zero,-30982(gp)
}
    1094:	e037883a 	mov	sp,fp
    1098:	df000017 	ldw	fp,0(sp)
    109c:	dec00104 	addi	sp,sp,4
    10a0:	f800283a 	ret

000010a4 <leds_init>:

void leds_init()
{
    10a4:	deffff04 	addi	sp,sp,-4
    10a8:	df000015 	stw	fp,0(sp)
    10ac:	d839883a 	mov	fp,sp
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PORT_BASE, leds_status);
    10b0:	d0a00003 	ldbu	r2,-32768(gp)
    10b4:	10c03fcc 	andi	r3,r2,255
    10b8:	00a5b014 	movui	r2,38592
    10bc:	10c00035 	stwio	r3,0(r2)
}
    10c0:	e037883a 	mov	sp,fp
    10c4:	df000017 	ldw	fp,0(sp)
    10c8:	dec00104 	addi	sp,sp,4
    10cc:	f800283a 	ret

000010d0 <leds_driver>:

void leds_driver()
{
    10d0:	defffd04 	addi	sp,sp,-12
    10d4:	dfc00215 	stw	ra,8(sp)
    10d8:	df000115 	stw	fp,4(sp)
    10dc:	df000104 	addi	fp,sp,4
	unsigned short coordinate = 0;
    10e0:	e03fff0d 	sth	zero,-4(fp)
	unsigned char shift = 0;
    10e4:	e03fff85 	stb	zero,-2(fp)

	switch (axis_num)
    10e8:	d0a1be83 	ldbu	r2,-30982(gp)
    10ec:	10803fcc 	andi	r2,r2,255
    10f0:	10c00060 	cmpeqi	r3,r2,1
    10f4:	1800061e 	bne	r3,zero,1110 <leds_driver+0x40>
    10f8:	10c000a0 	cmpeqi	r3,r2,2
    10fc:	1800071e 	bne	r3,zero,111c <leds_driver+0x4c>
    1100:	1000091e 	bne	r2,zero,1128 <leds_driver+0x58>
	{
	case 0: coordinate=get_x_coord(); break;
    1104:	000034c0 	call	34c <get_x_coord>
    1108:	e0bfff0d 	sth	r2,-4(fp)
    110c:	00000606 	br	1128 <leds_driver+0x58>
	case 1: coordinate=get_y_coord(); break;
    1110:	000036c0 	call	36c <get_y_coord>
    1114:	e0bfff0d 	sth	r2,-4(fp)
    1118:	00000306 	br	1128 <leds_driver+0x58>
	case 2: coordinate=get_z_coord(); break;
    111c:	000038c0 	call	38c <get_z_coord>
    1120:	e0bfff0d 	sth	r2,-4(fp)
    1124:	0001883a 	nop
	}

	coordinate=(coordinate>>5)&0xFF;
    1128:	e0bfff0b 	ldhu	r2,-4(fp)
    112c:	1004d17a 	srli	r2,r2,5
    1130:	10803fcc 	andi	r2,r2,255
    1134:	e0bfff0d 	sth	r2,-4(fp)

	direction=(coordinate&BIT7)?0:1; //if negative direction = 0
    1138:	e0bfff0b 	ldhu	r2,-4(fp)
    113c:	1080200c 	andi	r2,r2,128
    1140:	1005003a 	cmpeq	r2,r2,zero
    1144:	d0a1bd85 	stb	r2,-30986(gp)
	coordinate=(direction)?(coordinate&0xff):((~coordinate)&0xff); //if negative - inverse
    1148:	d0a1bd83 	ldbu	r2,-30986(gp)
    114c:	10803fcc 	andi	r2,r2,255
    1150:	10000326 	beq	r2,zero,1160 <leds_driver+0x90>
    1154:	e0bfff0b 	ldhu	r2,-4(fp)
    1158:	10803fcc 	andi	r2,r2,255
    115c:	00000306 	br	116c <leds_driver+0x9c>
    1160:	e0bfff0b 	ldhu	r2,-4(fp)
    1164:	0084303a 	nor	r2,zero,r2
    1168:	10803fcc 	andi	r2,r2,255
    116c:	e0bfff0d 	sth	r2,-4(fp)
	shift=(coordinate>>1)&0x7;
    1170:	e0bfff0b 	ldhu	r2,-4(fp)
    1174:	1004d07a 	srli	r2,r2,1
    1178:	108001cc 	andi	r2,r2,7
    117c:	e0bfff85 	stb	r2,-2(fp)
	leds_status=(direction)?((BIT3|BIT4)<<shift):((BIT3|BIT4)>>shift);
    1180:	d0a1bd83 	ldbu	r2,-30986(gp)
    1184:	10803fcc 	andi	r2,r2,255
    1188:	10000426 	beq	r2,zero,119c <leds_driver+0xcc>
    118c:	e0bfff83 	ldbu	r2,-2(fp)
    1190:	00c00604 	movi	r3,24
    1194:	1884983a 	sll	r2,r3,r2
    1198:	00000306 	br	11a8 <leds_driver+0xd8>
    119c:	e0bfff83 	ldbu	r2,-2(fp)
    11a0:	00c00604 	movi	r3,24
    11a4:	1885d83a 	sra	r2,r3,r2
    11a8:	d0a00005 	stb	r2,-32768(gp)
	blinky_flag=((coordinate>>1)>3);
    11ac:	e0bfff0b 	ldhu	r2,-4(fp)
    11b0:	1004d07a 	srli	r2,r2,1
    11b4:	10bfffcc 	andi	r2,r2,65535
    11b8:	10800128 	cmpgeui	r2,r2,4
    11bc:	d0a1be05 	stb	r2,-30984(gp)

	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PORT_BASE, leds_status);
    11c0:	d0a00003 	ldbu	r2,-32768(gp)
    11c4:	10c03fcc 	andi	r3,r2,255
    11c8:	00a5b014 	movui	r2,38592
    11cc:	10c00035 	stwio	r3,0(r2)
}
    11d0:	e037883a 	mov	sp,fp
    11d4:	dfc00117 	ldw	ra,4(sp)
    11d8:	df000017 	ldw	fp,0(sp)
    11dc:	dec00204 	addi	sp,sp,8
    11e0:	f800283a 	ret

000011e4 <main>:
void mainloop();

unsigned char i = 0;

int main ()
{
    11e4:	defffe04 	addi	sp,sp,-8
    11e8:	dfc00115 	stw	ra,4(sp)
    11ec:	df000015 	stw	fp,0(sp)
    11f0:	d839883a 	mov	fp,sp
   sys_init();
    11f4:	00012000 	call	1200 <sys_init>
   while (1) mainloop();
    11f8:	00012400 	call	1240 <mainloop>
    11fc:	003ffe06 	br	11f8 <_gp+0xffff5024>

00001200 <sys_init>:
   return 0;
}

void sys_init()
{
    1200:	defffe04 	addi	sp,sp,-8
    1204:	dfc00115 	stw	ra,4(sp)
    1208:	df000015 	stw	fp,0(sp)
    120c:	d839883a 	mov	fp,sp
	//Modules
	sys_timer_init();
    1210:	00019300 	call	1930 <sys_timer_init>
	sys_timer_start();
    1214:	00019940 	call	1994 <sys_timer_start>
	i2c_init();
    1218:	0000d900 	call	d90 <i2c_init>
	start_recording(10);
    121c:	01000284 	movi	r4,10
    1220:	00013b80 	call	13b8 <start_recording>
	leds_init();
    1224:	00010a40 	call	10a4 <leds_init>
	//Devices
	accelerometer_init();
    1228:	00002040 	call	204 <accelerometer_init>
}
    122c:	e037883a 	mov	sp,fp
    1230:	dfc00117 	ldw	ra,4(sp)
    1234:	df000017 	ldw	fp,0(sp)
    1238:	dec00204 	addi	sp,sp,8
    123c:	f800283a 	ret

00001240 <mainloop>:

void mainloop()
{
    1240:	defffe04 	addi	sp,sp,-8
    1244:	dfc00115 	stw	ra,4(sp)
    1248:	df000015 	stw	fp,0(sp)
    124c:	d839883a 	mov	fp,sp
	if (check_timer_event()) //system_period - 1ms
    1250:	0001a680 	call	1a68 <check_timer_event>
    1254:	10803fcc 	andi	r2,r2,255
    1258:	10000426 	beq	r2,zero,126c <mainloop+0x2c>
	{
		reset_timer_event_flag();
    125c:	0001a880 	call	1a88 <reset_timer_event_flag>
		refresh_accelerometer_data();
    1260:	000024c0 	call	24c <refresh_accelerometer_data>
		leds_driver();
    1264:	00010d00 	call	10d0 <leds_driver>
		read_but();
    1268:	00004940 	call	494 <read_but>
	    //generate_pulse(i++);
	}
   if (buttons_status()->but_0_negedge)
    126c:	000074c0 	call	74c <buttons_status>
    1270:	10800017 	ldw	r2,0(r2)
    1274:	1080004c 	andi	r2,r2,1
    1278:	10000526 	beq	r2,zero,1290 <mainloop+0x50>
   {
	   buttons_status()->but_0_negedge=0;
    127c:	000074c0 	call	74c <buttons_status>
    1280:	11000003 	ldbu	r4,0(r2)
    1284:	00ffff84 	movi	r3,-2
    1288:	20c6703a 	and	r3,r4,r3
    128c:	10c00005 	stb	r3,0(r2)
   }
   if (buttons_status()->but_1_negedge)
    1290:	000074c0 	call	74c <buttons_status>
    1294:	10800017 	ldw	r2,0(r2)
    1298:	1080020c 	andi	r2,r2,8
    129c:	10000726 	beq	r2,zero,12bc <mainloop+0x7c>
   {
	  buttons_status()->but_1_negedge=0;
    12a0:	000074c0 	call	74c <buttons_status>
    12a4:	11000003 	ldbu	r4,0(r2)
    12a8:	00fffdc4 	movi	r3,-9
    12ac:	20c6703a 	and	r3,r4,r3
    12b0:	10c00005 	stb	r3,0(r2)
      change_axis();
    12b4:	00010680 	call	1068 <change_axis>
      make_measurement();
    12b8:	00012d00 	call	12d0 <make_measurement>
   }
}
    12bc:	e037883a 	mov	sp,fp
    12c0:	dfc00117 	ldw	ra,4(sp)
    12c4:	df000017 	ldw	fp,0(sp)
    12c8:	dec00204 	addi	sp,sp,8
    12cc:	f800283a 	ret

000012d0 <make_measurement>:
//6,671e-5s = 66,71usec
//66,71usec/5ns = 13342 counts
void delay(unsigned int time);

void make_measurement()
{
    12d0:	defffc04 	addi	sp,sp,-16
    12d4:	dfc00315 	stw	ra,12(sp)
    12d8:	df000215 	stw	fp,8(sp)
    12dc:	df000204 	addi	fp,sp,8
	unsigned int start_time=read_sys_time_ms();
    12e0:	0001aa80 	call	1aa8 <read_sys_time_ms>
    12e4:	e0bfff15 	stw	r2,-4(fp)
	unsigned char wait = 1;
    12e8:	00800044 	movi	r2,1
    12ec:	e0bffe05 	stb	r2,-8(fp)
	reset_ram_buffers(); //reset buffers and prepair for measurement
    12f0:	000141c0 	call	141c <reset_ram_buffers>
	start_recording(WRITING_DELAY_COUNTS); //start signal recording
    12f4:	01000104 	movi	r4,4
    12f8:	00013b80 	call	13b8 <start_recording>
	generate_pulse(LASER_PULSE_COUNTS); //generate start pulse
    12fc:	01000104 	movi	r4,4
    1300:	00010200 	call	1020 <generate_pulse>
	delay(100);
    1304:	01001904 	movi	r4,100
    1308:	00013740 	call	1374 <delay>
	generate_pulse(LASER_PULSE_COUNTS); //generate stop pulse
    130c:	01000104 	movi	r4,4
    1310:	00010200 	call	1020 <generate_pulse>
	delay(500);
    1314:	01007d04 	movi	r4,500
    1318:	00013740 	call	1374 <delay>
	generate_pulse(LASER_PULSE_COUNTS); //generate stop pulse
    131c:	01000104 	movi	r4,4
    1320:	00010200 	call	1020 <generate_pulse>
    while (wait)
    1324:	00000b06 	br	1354 <make_measurement+0x84>
    {
    	if (read_abs_counter()>13342)
    1328:	00014d40 	call	14d4 <read_abs_counter>
    132c:	10bfffcc 	andi	r2,r2,65535
    1330:	108d07f0 	cmpltui	r2,r2,13343
    1334:	1000021e 	bne	r2,zero,1340 <make_measurement+0x70>
    		wait=0;
    1338:	e03ffe05 	stb	zero,-8(fp)
    133c:	00000506 	br	1354 <make_measurement+0x84>
    	else if (read_sys_time_ms()>(start_time+2))
    1340:	0001aa80 	call	1aa8 <read_sys_time_ms>
    1344:	e0ffff17 	ldw	r3,-4(fp)
    1348:	18c00084 	addi	r3,r3,2
    134c:	1880012e 	bgeu	r3,r2,1354 <make_measurement+0x84>
    		wait=0;
    1350:	e03ffe05 	stb	zero,-8(fp)
	generate_pulse(LASER_PULSE_COUNTS); //generate start pulse
	delay(100);
	generate_pulse(LASER_PULSE_COUNTS); //generate stop pulse
	delay(500);
	generate_pulse(LASER_PULSE_COUNTS); //generate stop pulse
    while (wait)
    1354:	e0bffe03 	ldbu	r2,-8(fp)
    1358:	103ff31e 	bne	r2,zero,1328 <_gp+0xffff5154>
    	if (read_abs_counter()>13342)
    		wait=0;
    	else if (read_sys_time_ms()>(start_time+2))
    		wait=0;
    }
    refresh_meas_data();
    135c:	00015040 	call	1504 <refresh_meas_data>
}
    1360:	e037883a 	mov	sp,fp
    1364:	dfc00117 	ldw	ra,4(sp)
    1368:	df000017 	ldw	fp,0(sp)
    136c:	dec00204 	addi	sp,sp,8
    1370:	f800283a 	ret

00001374 <delay>:

void delay(unsigned int time)
{
    1374:	defffd04 	addi	sp,sp,-12
    1378:	df000215 	stw	fp,8(sp)
    137c:	df000204 	addi	fp,sp,8
    1380:	e13fff15 	stw	r4,-4(fp)
	unsigned int i = 0;
    1384:	e03ffe15 	stw	zero,-8(fp)
	for (i=0;i<time;i++) {}
    1388:	e03ffe15 	stw	zero,-8(fp)
    138c:	00000306 	br	139c <delay+0x28>
    1390:	e0bffe17 	ldw	r2,-8(fp)
    1394:	10800044 	addi	r2,r2,1
    1398:	e0bffe15 	stw	r2,-8(fp)
    139c:	e0fffe17 	ldw	r3,-8(fp)
    13a0:	e0bfff17 	ldw	r2,-4(fp)
    13a4:	18bffa36 	bltu	r3,r2,1390 <_gp+0xffff51bc>
}
    13a8:	e037883a 	mov	sp,fp
    13ac:	df000017 	ldw	fp,0(sp)
    13b0:	dec00104 	addi	sp,sp,4
    13b4:	f800283a 	ret

000013b8 <start_recording>:
struct echo_signal_data signal;

unsigned char get_max (unsigned char *sample, unsigned char length);

void start_recording(unsigned char rec_delay)
{
    13b8:	defffd04 	addi	sp,sp,-12
    13bc:	df000215 	stw	fp,8(sp)
    13c0:	df000204 	addi	fp,sp,8
    13c4:	2005883a 	mov	r2,r4
    13c8:	e0bfff05 	stb	r2,-4(fp)
	unsigned short ctrl = rec_delay;
    13cc:	e0bfff03 	ldbu	r2,-4(fp)
    13d0:	e0bffe0d 	sth	r2,-8(fp)
	ctrl=(ctrl<<1)|BIT0;
    13d4:	e0bffe0b 	ldhu	r2,-8(fp)
    13d8:	1085883a 	add	r2,r2,r2
    13dc:	10800054 	ori	r2,r2,1
    13e0:	e0bffe0d 	sth	r2,-8(fp)
	IOWR(SAMPLE_LOADER_BASE,CONTROL_REG,ctrl);
    13e4:	e0fffe0b 	ldhu	r3,-8(fp)
    13e8:	00a58014 	movui	r2,38400
    13ec:	10c00035 	stwio	r3,0(r2)
}
    13f0:	e037883a 	mov	sp,fp
    13f4:	df000017 	ldw	fp,0(sp)
    13f8:	dec00104 	addi	sp,sp,4
    13fc:	f800283a 	ret

00001400 <get_buffer_status>:

unsigned int get_buffer_status()
{
    1400:	deffff04 	addi	sp,sp,-4
    1404:	df000015 	stw	fp,0(sp)
    1408:	d839883a 	mov	fp,sp

}
    140c:	e037883a 	mov	sp,fp
    1410:	df000017 	ldw	fp,0(sp)
    1414:	dec00104 	addi	sp,sp,4
    1418:	f800283a 	ret

0000141c <reset_ram_buffers>:

void reset_ram_buffers()
{
    141c:	defffe04 	addi	sp,sp,-8
    1420:	df000115 	stw	fp,4(sp)
    1424:	df000104 	addi	fp,sp,4
   unsigned int i = 0;
    1428:	e03fff15 	stw	zero,-4(fp)
   IOWR(SAMPLE_LOADER_BASE,CONTROL_REG,0x3f<<9);
    142c:	00df8004 	movi	r3,32256
    1430:	00a58014 	movui	r2,38400
    1434:	10c00035 	stwio	r3,0(r2)
   for (i=0;i<256;i++) sample[i]=0;
    1438:	e03fff15 	stw	zero,-4(fp)
    143c:	00000806 	br	1460 <reset_ram_buffers+0x44>
    1440:	00c00034 	movhi	r3,0
    1444:	18d25904 	addi	r3,r3,18788
    1448:	e0bfff17 	ldw	r2,-4(fp)
    144c:	1885883a 	add	r2,r3,r2
    1450:	10000005 	stb	zero,0(r2)
    1454:	e0bfff17 	ldw	r2,-4(fp)
    1458:	10800044 	addi	r2,r2,1
    145c:	e0bfff15 	stw	r2,-4(fp)
    1460:	e0bfff17 	ldw	r2,-4(fp)
    1464:	10804030 	cmpltui	r2,r2,256
    1468:	103ff51e 	bne	r2,zero,1440 <_gp+0xffff526c>
   IOWR(SAMPLE_LOADER_BASE,CONTROL_REG,0);
    146c:	0007883a 	mov	r3,zero
    1470:	00a58014 	movui	r2,38400
    1474:	10c00035 	stwio	r3,0(r2)
}
    1478:	e037883a 	mov	sp,fp
    147c:	df000017 	ldw	fp,0(sp)
    1480:	dec00104 	addi	sp,sp,4
    1484:	f800283a 	ret

00001488 <reset_memory_master>:

void reset_memory_master (unsigned char buf_num)
{
    1488:	defffd04 	addi	sp,sp,-12
    148c:	df000215 	stw	fp,8(sp)
    1490:	df000204 	addi	fp,sp,8
    1494:	2005883a 	mov	r2,r4
    1498:	e0bfff05 	stb	r2,-4(fp)
   unsigned int reg_buf = 0;
    149c:	e03ffe15 	stw	zero,-8(fp)
   reg_buf=IORD(SAMPLE_LOADER_BASE,CONTROL_REG);
    14a0:	00a58014 	movui	r2,38400
    14a4:	10800037 	ldwio	r2,0(r2)
    14a8:	e0bffe15 	stw	r2,-8(fp)
   reg_buf&=(BIT0<<buf_num);
    14ac:	e0bfff03 	ldbu	r2,-4(fp)
    14b0:	00c00044 	movi	r3,1
    14b4:	1884983a 	sll	r2,r3,r2
    14b8:	e0fffe17 	ldw	r3,-8(fp)
    14bc:	1884703a 	and	r2,r3,r2
    14c0:	e0bffe15 	stw	r2,-8(fp)
}
    14c4:	e037883a 	mov	sp,fp
    14c8:	df000017 	ldw	fp,0(sp)
    14cc:	dec00104 	addi	sp,sp,4
    14d0:	f800283a 	ret

000014d4 <read_abs_counter>:

unsigned short read_abs_counter()
{
    14d4:	defffe04 	addi	sp,sp,-8
    14d8:	df000115 	stw	fp,4(sp)
    14dc:	df000104 	addi	fp,sp,4
	unsigned short buf = 0;
    14e0:	e03fff0d 	sth	zero,-4(fp)
	buf=IORD(SAMPLE_LOADER_BASE,ABS_CNT_REG);
    14e4:	00a58214 	movui	r2,38408
    14e8:	10800037 	ldwio	r2,0(r2)
    14ec:	e0bfff0d 	sth	r2,-4(fp)
	return buf;
    14f0:	e0bfff0b 	ldhu	r2,-4(fp)
}
    14f4:	e037883a 	mov	sp,fp
    14f8:	df000017 	ldw	fp,0(sp)
    14fc:	dec00104 	addi	sp,sp,4
    1500:	f800283a 	ret

00001504 <refresh_meas_data>:

void refresh_meas_data()
{
    1504:	defff904 	addi	sp,sp,-28
    1508:	dfc00615 	stw	ra,24(sp)
    150c:	df000515 	stw	fp,20(sp)
    1510:	dc000415 	stw	r16,16(sp)
    1514:	df000404 	addi	fp,sp,16
   unsigned int buf = 0;
    1518:	e03ffe15 	stw	zero,-8(fp)
   unsigned char i = 0;
    151c:	e03ffc05 	stb	zero,-16(fp)
   unsigned int j = 0;
    1520:	e03ffd15 	stw	zero,-12(fp)
   unsigned int word = 0;
    1524:	e03fff15 	stw	zero,-4(fp)
   for (i=0;i<6;i++)
    1528:	e03ffc05 	stb	zero,-16(fp)
    152c:	0000be06 	br	1828 <refresh_meas_data+0x324>
   {
	   buf = IORD(SAMPLE_LOADER_BASE,(START_RAM+i));
    1530:	e0bffc03 	ldbu	r2,-16(fp)
    1534:	108000c4 	addi	r2,r2,3
    1538:	1085883a 	add	r2,r2,r2
    153c:	1085883a 	add	r2,r2,r2
    1540:	1007883a 	mov	r3,r2
    1544:	00a58014 	movui	r2,38400
    1548:	1885883a 	add	r2,r3,r2
    154c:	10800037 	ldwio	r2,0(r2)
    1550:	e0bffe15 	stw	r2,-8(fp)
	   ram_buffer[i].ram_ptr=buf&0xff;
    1554:	e0bffc03 	ldbu	r2,-16(fp)
    1558:	e0fffe17 	ldw	r3,-8(fp)
    155c:	01000034 	movhi	r4,0
    1560:	21124304 	addi	r4,r4,18700
    1564:	100490fa 	slli	r2,r2,3
    1568:	2085883a 	add	r2,r4,r2
    156c:	10c000c5 	stb	r3,3(r2)
	   buf=buf>>8;
    1570:	e0bffe17 	ldw	r2,-8(fp)
    1574:	1004d23a 	srli	r2,r2,8
    1578:	e0bffe15 	stw	r2,-8(fp)
	   ram_buffer[i].stop_detected=buf&BIT0;
    157c:	e0bffc03 	ldbu	r2,-16(fp)
    1580:	e0fffe17 	ldw	r3,-8(fp)
    1584:	18c0004c 	andi	r3,r3,1
    1588:	01000034 	movhi	r4,0
    158c:	21124304 	addi	r4,r4,18700
    1590:	100490fa 	slli	r2,r2,3
    1594:	2085883a 	add	r2,r4,r2
    1598:	10800104 	addi	r2,r2,4
    159c:	18c0004c 	andi	r3,r3,1
    15a0:	18c7883a 	add	r3,r3,r3
    15a4:	11400003 	ldbu	r5,0(r2)
    15a8:	013fff44 	movi	r4,-3
    15ac:	2908703a 	and	r4,r5,r4
    15b0:	20c6b03a 	or	r3,r4,r3
    15b4:	10c00005 	stb	r3,0(r2)
	   buf=buf>>1;
    15b8:	e0bffe17 	ldw	r2,-8(fp)
    15bc:	1004d07a 	srli	r2,r2,1
    15c0:	e0bffe15 	stw	r2,-8(fp)
	   ram_buffer[i].buffer_full=buf&BIT0;
    15c4:	e0bffc03 	ldbu	r2,-16(fp)
    15c8:	e0fffe17 	ldw	r3,-8(fp)
    15cc:	18c0004c 	andi	r3,r3,1
    15d0:	01000034 	movhi	r4,0
    15d4:	21124304 	addi	r4,r4,18700
    15d8:	100490fa 	slli	r2,r2,3
    15dc:	2085883a 	add	r2,r4,r2
    15e0:	10800104 	addi	r2,r2,4
    15e4:	18c0004c 	andi	r3,r3,1
    15e8:	11400003 	ldbu	r5,0(r2)
    15ec:	013fff84 	movi	r4,-2
    15f0:	2908703a 	and	r4,r5,r4
    15f4:	20c6b03a 	or	r3,r4,r3
    15f8:	10c00005 	stb	r3,0(r2)
	   buf=buf>>1;
    15fc:	e0bffe17 	ldw	r2,-8(fp)
    1600:	1004d07a 	srli	r2,r2,1
    1604:	e0bffe15 	stw	r2,-8(fp)
	   ram_buffer[i].sample_size=buf&0xff;
    1608:	e0bffc03 	ldbu	r2,-16(fp)
    160c:	e0fffe17 	ldw	r3,-8(fp)
    1610:	01000034 	movhi	r4,0
    1614:	21124304 	addi	r4,r4,18700
    1618:	100490fa 	slli	r2,r2,3
    161c:	2085883a 	add	r2,r4,r2
    1620:	10c00085 	stb	r3,2(r2)
	   buf=buf>>8;
    1624:	e0bffe17 	ldw	r2,-8(fp)
    1628:	1004d23a 	srli	r2,r2,8
    162c:	e0bffe15 	stw	r2,-8(fp)
	   ram_buffer[i].pulse_abs_coord=buf&0x1fff;
    1630:	e0bffc03 	ldbu	r2,-16(fp)
    1634:	e0fffe17 	ldw	r3,-8(fp)
    1638:	18c7ffcc 	andi	r3,r3,8191
    163c:	01000034 	movhi	r4,0
    1640:	21124304 	addi	r4,r4,18700
    1644:	100490fa 	slli	r2,r2,3
    1648:	2085883a 	add	r2,r4,r2
    164c:	10c0000d 	sth	r3,0(r2)
	   //signal data
	   signal.pulse[i].abs_position=ram_buffer[i].pulse_abs_coord;
    1650:	e0bffc03 	ldbu	r2,-16(fp)
    1654:	e0fffc03 	ldbu	r3,-16(fp)
    1658:	01000034 	movhi	r4,0
    165c:	21124304 	addi	r4,r4,18700
    1660:	180690fa 	slli	r3,r3,3
    1664:	20c7883a 	add	r3,r4,r3
    1668:	18c0000b 	ldhu	r3,0(r3)
    166c:	01000034 	movhi	r4,0
    1670:	21124f04 	addi	r4,r4,18748
    1674:	108001a4 	muli	r2,r2,6
    1678:	2085883a 	add	r2,r4,r2
    167c:	10800104 	addi	r2,r2,4
    1680:	10c0000d 	sth	r3,0(r2)
	   if (ram_buffer[i].stop_detected)
    1684:	e0bffc03 	ldbu	r2,-16(fp)
    1688:	00c00034 	movhi	r3,0
    168c:	18d24304 	addi	r3,r3,18700
    1690:	100490fa 	slli	r2,r2,3
    1694:	1885883a 	add	r2,r3,r2
    1698:	10800104 	addi	r2,r2,4
    169c:	10800017 	ldw	r2,0(r2)
    16a0:	1004d07a 	srli	r2,r2,1
    16a4:	1080004c 	andi	r2,r2,1
    16a8:	10803fcc 	andi	r2,r2,255
    16ac:	10005b26 	beq	r2,zero,181c <refresh_meas_data+0x318>
	   {
		   for (j=0;j<64;j++)
    16b0:	e03ffd15 	stw	zero,-12(fp)
    16b4:	00003406 	br	1788 <refresh_meas_data+0x284>
			   {
			   word=IORD(RAM_SAMPLE_0_BASE-(0x100*i),j);
    16b8:	e0bffd17 	ldw	r2,-12(fp)
    16bc:	1085883a 	add	r2,r2,r2
    16c0:	1085883a 	add	r2,r2,r2
    16c4:	1007883a 	mov	r3,r2
    16c8:	e0bffc03 	ldbu	r2,-16(fp)
    16cc:	10bfc024 	muli	r2,r2,-256
    16d0:	1887883a 	add	r3,r3,r2
    16d4:	00a54014 	movui	r2,38144
    16d8:	1885883a 	add	r2,r3,r2
    16dc:	10800037 	ldwio	r2,0(r2)
    16e0:	e0bfff15 	stw	r2,-4(fp)
			   sample[j*4]=word&0xff;
    16e4:	e0bffd17 	ldw	r2,-12(fp)
    16e8:	1085883a 	add	r2,r2,r2
    16ec:	1085883a 	add	r2,r2,r2
    16f0:	e0ffff17 	ldw	r3,-4(fp)
    16f4:	01000034 	movhi	r4,0
    16f8:	21125904 	addi	r4,r4,18788
    16fc:	2085883a 	add	r2,r4,r2
    1700:	10c00005 	stb	r3,0(r2)
			   sample[j*4+1]=(word>>8)&0xff;
    1704:	e0bffd17 	ldw	r2,-12(fp)
    1708:	1085883a 	add	r2,r2,r2
    170c:	1085883a 	add	r2,r2,r2
    1710:	10800044 	addi	r2,r2,1
    1714:	e0ffff17 	ldw	r3,-4(fp)
    1718:	1806d23a 	srli	r3,r3,8
    171c:	01000034 	movhi	r4,0
    1720:	21125904 	addi	r4,r4,18788
    1724:	2085883a 	add	r2,r4,r2
    1728:	10c00005 	stb	r3,0(r2)
			   sample[j*4+2]=(word>>16)&0xff;
    172c:	e0bffd17 	ldw	r2,-12(fp)
    1730:	1085883a 	add	r2,r2,r2
    1734:	1085883a 	add	r2,r2,r2
    1738:	10800084 	addi	r2,r2,2
    173c:	e0ffff17 	ldw	r3,-4(fp)
    1740:	1806d43a 	srli	r3,r3,16
    1744:	01000034 	movhi	r4,0
    1748:	21125904 	addi	r4,r4,18788
    174c:	2085883a 	add	r2,r4,r2
    1750:	10c00005 	stb	r3,0(r2)
			   sample[j*4+3]=(word>>24)&0xff;
    1754:	e0bffd17 	ldw	r2,-12(fp)
    1758:	1085883a 	add	r2,r2,r2
    175c:	1085883a 	add	r2,r2,r2
    1760:	108000c4 	addi	r2,r2,3
    1764:	e0ffff17 	ldw	r3,-4(fp)
    1768:	1806d63a 	srli	r3,r3,24
    176c:	01000034 	movhi	r4,0
    1770:	21125904 	addi	r4,r4,18788
    1774:	2085883a 	add	r2,r4,r2
    1778:	10c00005 	stb	r3,0(r2)
	   ram_buffer[i].pulse_abs_coord=buf&0x1fff;
	   //signal data
	   signal.pulse[i].abs_position=ram_buffer[i].pulse_abs_coord;
	   if (ram_buffer[i].stop_detected)
	   {
		   for (j=0;j<64;j++)
    177c:	e0bffd17 	ldw	r2,-12(fp)
    1780:	10800044 	addi	r2,r2,1
    1784:	e0bffd15 	stw	r2,-12(fp)
    1788:	e0bffd17 	ldw	r2,-12(fp)
    178c:	10801030 	cmpltui	r2,r2,64
    1790:	103fc91e 	bne	r2,zero,16b8 <_gp+0xffff54e4>
			   sample[j*4]=word&0xff;
			   sample[j*4+1]=(word>>8)&0xff;
			   sample[j*4+2]=(word>>16)&0xff;
			   sample[j*4+3]=(word>>24)&0xff;
			   }
		   signal.pulse[i].amplitude=get_max(sample,ram_buffer[i].sample_size);
    1794:	e43ffc03 	ldbu	r16,-16(fp)
    1798:	e0bffc03 	ldbu	r2,-16(fp)
    179c:	00c00034 	movhi	r3,0
    17a0:	18d24304 	addi	r3,r3,18700
    17a4:	100490fa 	slli	r2,r2,3
    17a8:	1885883a 	add	r2,r3,r2
    17ac:	10800083 	ldbu	r2,2(r2)
    17b0:	10803fcc 	andi	r2,r2,255
    17b4:	01000034 	movhi	r4,0
    17b8:	21125904 	addi	r4,r4,18788
    17bc:	100b883a 	mov	r5,r2
    17c0:	000184c0 	call	184c <get_max>
    17c4:	01000034 	movhi	r4,0
    17c8:	21124f04 	addi	r4,r4,18748
    17cc:	80c001a4 	muli	r3,r16,6
    17d0:	20c7883a 	add	r3,r4,r3
    17d4:	18c00104 	addi	r3,r3,4
    17d8:	18800085 	stb	r2,2(r3)
		   signal.pulse[i].detected=ram_buffer[i].stop_detected;
    17dc:	e0bffc03 	ldbu	r2,-16(fp)
    17e0:	e0fffc03 	ldbu	r3,-16(fp)
    17e4:	01000034 	movhi	r4,0
    17e8:	21124304 	addi	r4,r4,18700
    17ec:	180690fa 	slli	r3,r3,3
    17f0:	20c7883a 	add	r3,r4,r3
    17f4:	18c00104 	addi	r3,r3,4
    17f8:	18c00017 	ldw	r3,0(r3)
    17fc:	1806d07a 	srli	r3,r3,1
    1800:	18c0004c 	andi	r3,r3,1
    1804:	01000034 	movhi	r4,0
    1808:	21124f04 	addi	r4,r4,18748
    180c:	108001a4 	muli	r2,r2,6
    1810:	2085883a 	add	r2,r4,r2
    1814:	10800204 	addi	r2,r2,8
    1818:	10c00005 	stb	r3,0(r2)
{
   unsigned int buf = 0;
   unsigned char i = 0;
   unsigned int j = 0;
   unsigned int word = 0;
   for (i=0;i<6;i++)
    181c:	e0bffc03 	ldbu	r2,-16(fp)
    1820:	10800044 	addi	r2,r2,1
    1824:	e0bffc05 	stb	r2,-16(fp)
    1828:	e0bffc03 	ldbu	r2,-16(fp)
    182c:	108001b0 	cmpltui	r2,r2,6
    1830:	103f3f1e 	bne	r2,zero,1530 <_gp+0xffff535c>
			   }
		   signal.pulse[i].amplitude=get_max(sample,ram_buffer[i].sample_size);
		   signal.pulse[i].detected=ram_buffer[i].stop_detected;
	   }
   }
}
    1834:	e037883a 	mov	sp,fp
    1838:	dfc00217 	ldw	ra,8(sp)
    183c:	df000117 	ldw	fp,4(sp)
    1840:	dc000017 	ldw	r16,0(sp)
    1844:	dec00304 	addi	sp,sp,12
    1848:	f800283a 	ret

0000184c <get_max>:

unsigned char get_max (unsigned char *sample, unsigned char length)
{
    184c:	defffb04 	addi	sp,sp,-20
    1850:	df000415 	stw	fp,16(sp)
    1854:	df000404 	addi	fp,sp,16
    1858:	e13ffe15 	stw	r4,-8(fp)
    185c:	2805883a 	mov	r2,r5
    1860:	e0bfff05 	stb	r2,-4(fp)
  unsigned int i = 0;
    1864:	e03ffc15 	stw	zero,-16(fp)
  unsigned char max = 0;
    1868:	e03ffd05 	stb	zero,-12(fp)
  for (i=0;i<length;i++)
    186c:	e03ffc15 	stw	zero,-16(fp)
    1870:	00000f06 	br	18b0 <get_max+0x64>
	  if (sample[i]>max) max=sample[i];
    1874:	e0fffe17 	ldw	r3,-8(fp)
    1878:	e0bffc17 	ldw	r2,-16(fp)
    187c:	1885883a 	add	r2,r3,r2
    1880:	10800003 	ldbu	r2,0(r2)
    1884:	10803fcc 	andi	r2,r2,255
    1888:	e0fffd03 	ldbu	r3,-12(fp)
    188c:	1880052e 	bgeu	r3,r2,18a4 <get_max+0x58>
    1890:	e0fffe17 	ldw	r3,-8(fp)
    1894:	e0bffc17 	ldw	r2,-16(fp)
    1898:	1885883a 	add	r2,r3,r2
    189c:	10800003 	ldbu	r2,0(r2)
    18a0:	e0bffd05 	stb	r2,-12(fp)

unsigned char get_max (unsigned char *sample, unsigned char length)
{
  unsigned int i = 0;
  unsigned char max = 0;
  for (i=0;i<length;i++)
    18a4:	e0bffc17 	ldw	r2,-16(fp)
    18a8:	10800044 	addi	r2,r2,1
    18ac:	e0bffc15 	stw	r2,-16(fp)
    18b0:	e0bfff03 	ldbu	r2,-4(fp)
    18b4:	e0fffc17 	ldw	r3,-16(fp)
    18b8:	18bfee36 	bltu	r3,r2,1874 <_gp+0xffff56a0>
	  if (sample[i]>max) max=sample[i];
  return max;
    18bc:	e0bffd03 	ldbu	r2,-12(fp)
}
    18c0:	e037883a 	mov	sp,fp
    18c4:	df000017 	ldw	fp,0(sp)
    18c8:	dec00104 	addi	sp,sp,4
    18cc:	f800283a 	ret

000018d0 <sys_timer_interrupt_handler>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void sys_timer_interrupt_handler(void* context)
#else
static void sys_timer_interrupt_handler(void* context, alt_u32 id)
#endif
{
    18d0:	defffd04 	addi	sp,sp,-12
    18d4:	df000215 	stw	fp,8(sp)
    18d8:	df000204 	addi	fp,sp,8
    18dc:	e13fff15 	stw	r4,-4(fp)
	unsigned short status = 0;
    18e0:	e03ffe0d 	sth	zero,-8(fp)
	timer_context_ptr = (volatile int*) context;
    18e4:	e0bfff17 	ldw	r2,-4(fp)
    18e8:	d0a00115 	stw	r2,-32764(gp)
	status=IORD_ALTERA_AVALON_TIMER_STATUS(SYS_TIMER_BASE);
    18ec:	00a5c014 	movui	r2,38656
    18f0:	10800037 	ldwio	r2,0(r2)
    18f4:	e0bffe0d 	sth	r2,-8(fp)
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_TIMER_BASE, status&(~ALTERA_AVALON_TIMER_CONTROL_ITO_MSK));
    18f8:	e0fffe0b 	ldhu	r3,-8(fp)
    18fc:	00bfff84 	movi	r2,-2
    1900:	1886703a 	and	r3,r3,r2
    1904:	00a5c014 	movui	r2,38656
    1908:	10c00035 	stwio	r3,0(r2)
	timer_event_flag=1;
    190c:	00800044 	movi	r2,1
    1910:	d0a1c005 	stb	r2,-30976(gp)
	sys_abs_time_ms++;
    1914:	d0a1c117 	ldw	r2,-30972(gp)
    1918:	10800044 	addi	r2,r2,1
    191c:	d0a1c115 	stw	r2,-30972(gp)
}
    1920:	e037883a 	mov	sp,fp
    1924:	df000017 	ldw	fp,0(sp)
    1928:	dec00104 	addi	sp,sp,4
    192c:	f800283a 	ret

00001930 <sys_timer_init>:

void sys_timer_init()
{
    1930:	defffe04 	addi	sp,sp,-8
    1934:	dfc00115 	stw	ra,4(sp)
    1938:	df000015 	stw	fp,0(sp)
    193c:	d839883a 	mov	fp,sp
	register_sys_timer_interrupt(); //registration of interrupt
    1940:	0001a240 	call	1a24 <register_sys_timer_interrupt>
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
    1944:	00c00204 	movi	r3,8
    1948:	00a5c114 	movui	r2,38660
    194c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(SYS_TIMER_BASE,0);
    1950:	0007883a 	mov	r3,zero
    1954:	00a5c014 	movui	r2,38656
    1958:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_TIMER_BASE, ALTERA_AVALON_TIMER_CONTROL_ITO_MSK|ALTERA_AVALON_TIMER_CONTROL_CONT_MSK);
    195c:	00c000c4 	movi	r3,3
    1960:	00a5c114 	movui	r2,38660
    1964:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIOD_0(SYS_TIMER_BASE, TIMER_PERIOD&0xFFFF);
    1968:	00c23544 	movi	r3,2261
    196c:	00a5c214 	movui	r2,38664
    1970:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIOD_1(SYS_TIMER_BASE, (TIMER_PERIOD>>16)&0xFFFF);
    1974:	00c00084 	movi	r3,2
    1978:	00a5c314 	movui	r2,38668
    197c:	10c00035 	stwio	r3,0(r2)
}
    1980:	e037883a 	mov	sp,fp
    1984:	dfc00117 	ldw	ra,4(sp)
    1988:	df000017 	ldw	fp,0(sp)
    198c:	dec00204 	addi	sp,sp,8
    1990:	f800283a 	ret

00001994 <sys_timer_start>:

void sys_timer_start()
{
    1994:	defffe04 	addi	sp,sp,-8
    1998:	df000115 	stw	fp,4(sp)
    199c:	df000104 	addi	fp,sp,4
	unsigned short buf = 0;
    19a0:	e03fff0d 	sth	zero,-4(fp)
	buf=IORD_ALTERA_AVALON_TIMER_CONTROL(SYS_TIMER_BASE);
    19a4:	00a5c114 	movui	r2,38660
    19a8:	10800037 	ldwio	r2,0(r2)
    19ac:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_TIMER_BASE, (buf|ALTERA_AVALON_TIMER_CONTROL_START_MSK)&(~ALTERA_AVALON_TIMER_CONTROL_STOP_MSK));
    19b0:	e0bfff0b 	ldhu	r2,-4(fp)
    19b4:	10800114 	ori	r2,r2,4
    19b8:	10ffffcc 	andi	r3,r2,65535
    19bc:	00bffdc4 	movi	r2,-9
    19c0:	1886703a 	and	r3,r3,r2
    19c4:	00a5c114 	movui	r2,38660
    19c8:	10c00035 	stwio	r3,0(r2)

}
    19cc:	e037883a 	mov	sp,fp
    19d0:	df000017 	ldw	fp,0(sp)
    19d4:	dec00104 	addi	sp,sp,4
    19d8:	f800283a 	ret

000019dc <sys_timer_stop>:

void sys_timer_stop()
{
    19dc:	defffe04 	addi	sp,sp,-8
    19e0:	df000115 	stw	fp,4(sp)
    19e4:	df000104 	addi	fp,sp,4
	unsigned short buf = 0;
    19e8:	e03fff0d 	sth	zero,-4(fp)
	buf=IORD_ALTERA_AVALON_TIMER_CONTROL(SYS_TIMER_BASE);
    19ec:	00a5c114 	movui	r2,38660
    19f0:	10800037 	ldwio	r2,0(r2)
    19f4:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(SYS_TIMER_BASE, (buf|ALTERA_AVALON_TIMER_CONTROL_STOP_MSK)&(~ALTERA_AVALON_TIMER_CONTROL_START_MSK));
    19f8:	e0bfff0b 	ldhu	r2,-4(fp)
    19fc:	10800214 	ori	r2,r2,8
    1a00:	10ffffcc 	andi	r3,r2,65535
    1a04:	00bffec4 	movi	r2,-5
    1a08:	1886703a 	and	r3,r3,r2
    1a0c:	00a5c114 	movui	r2,38660
    1a10:	10c00035 	stwio	r3,0(r2)
}
    1a14:	e037883a 	mov	sp,fp
    1a18:	df000017 	ldw	fp,0(sp)
    1a1c:	dec00104 	addi	sp,sp,4
    1a20:	f800283a 	ret

00001a24 <register_sys_timer_interrupt>:

void register_sys_timer_interrupt()
{
    1a24:	defffd04 	addi	sp,sp,-12
    1a28:	dfc00215 	stw	ra,8(sp)
    1a2c:	df000115 	stw	fp,4(sp)
    1a30:	df000104 	addi	fp,sp,4
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
alt_ic_isr_register(SYS_TIMER_IRQ_INTERRUPT_CONTROLLER_ID, SYS_TIMER_IRQ,
    1a34:	d0a00117 	ldw	r2,-32764(gp)
    1a38:	d8000015 	stw	zero,0(sp)
    1a3c:	0009883a 	mov	r4,zero
    1a40:	000b883a 	mov	r5,zero
    1a44:	01800034 	movhi	r6,0
    1a48:	31863404 	addi	r6,r6,6352
    1a4c:	100f883a 	mov	r7,r2
    1a50:	0001bfc0 	call	1bfc <alt_ic_isr_register>
		sys_timer_interrupt_handler, timer_context_ptr, 0x0);
#else
  alt_irq_register(SYS_TIMER_IRQ, timer_context_ptr,
		  sys_timer_interrupt_handler);
#endif
}
    1a54:	e037883a 	mov	sp,fp
    1a58:	dfc00117 	ldw	ra,4(sp)
    1a5c:	df000017 	ldw	fp,0(sp)
    1a60:	dec00204 	addi	sp,sp,8
    1a64:	f800283a 	ret

00001a68 <check_timer_event>:

unsigned char check_timer_event()
{
    1a68:	deffff04 	addi	sp,sp,-4
    1a6c:	df000015 	stw	fp,0(sp)
    1a70:	d839883a 	mov	fp,sp
  return timer_event_flag;
    1a74:	d0a1c003 	ldbu	r2,-30976(gp)
}
    1a78:	e037883a 	mov	sp,fp
    1a7c:	df000017 	ldw	fp,0(sp)
    1a80:	dec00104 	addi	sp,sp,4
    1a84:	f800283a 	ret

00001a88 <reset_timer_event_flag>:

void reset_timer_event_flag()
{
    1a88:	deffff04 	addi	sp,sp,-4
    1a8c:	df000015 	stw	fp,0(sp)
    1a90:	d839883a 	mov	fp,sp
	timer_event_flag=0;
    1a94:	d021c005 	stb	zero,-30976(gp)
}
    1a98:	e037883a 	mov	sp,fp
    1a9c:	df000017 	ldw	fp,0(sp)
    1aa0:	dec00104 	addi	sp,sp,4
    1aa4:	f800283a 	ret

00001aa8 <read_sys_time_ms>:

unsigned int read_sys_time_ms()
{
    1aa8:	deffff04 	addi	sp,sp,-4
    1aac:	df000015 	stw	fp,0(sp)
    1ab0:	d839883a 	mov	fp,sp
   return sys_abs_time_ms;
    1ab4:	d0a1c117 	ldw	r2,-30972(gp)
}
    1ab8:	e037883a 	mov	sp,fp
    1abc:	df000017 	ldw	fp,0(sp)
    1ac0:	dec00104 	addi	sp,sp,4
    1ac4:	f800283a 	ret

00001ac8 <uart_init>:
#define CPU_FREQ     133333333
#define PC_UART_SPEED   115200
#define PC_UART_DIVIDER ((CPU_FREQ/PC_UART_SPEED)+1)

void uart_init()
{
    1ac8:	deffff04 	addi	sp,sp,-4
    1acc:	df000015 	stw	fp,0(sp)
    1ad0:	d839883a 	mov	fp,sp

}
    1ad4:	e037883a 	mov	sp,fp
    1ad8:	df000017 	ldw	fp,0(sp)
    1adc:	dec00104 	addi	sp,sp,4
    1ae0:	f800283a 	ret

00001ae4 <send_uart>:

int send_uart(unsigned char byte, unsigned long base)
{
    1ae4:	defffd04 	addi	sp,sp,-12
    1ae8:	df000215 	stw	fp,8(sp)
    1aec:	df000204 	addi	fp,sp,8
    1af0:	2005883a 	mov	r2,r4
    1af4:	e17fff15 	stw	r5,-4(fp)
    1af8:	e0bffe05 	stb	r2,-8(fp)
    IOWR_ALTERA_AVALON_UART_TXDATA (base, byte);
    1afc:	e0bfff17 	ldw	r2,-4(fp)
    1b00:	10800104 	addi	r2,r2,4
    1b04:	e0fffe03 	ldbu	r3,-8(fp)
    1b08:	10c00035 	stwio	r3,0(r2)
    while (!(IORD_ALTERA_AVALON_UART_STATUS(base)&ALTERA_AVALON_UART_STATUS_TMT_MSK));
    1b0c:	0001883a 	nop
    1b10:	e0bfff17 	ldw	r2,-4(fp)
    1b14:	10800204 	addi	r2,r2,8
    1b18:	10800037 	ldwio	r2,0(r2)
    1b1c:	1080080c 	andi	r2,r2,32
    1b20:	103ffb26 	beq	r2,zero,1b10 <_gp+0xffff593c>
    return 1;
    1b24:	00800044 	movi	r2,1
}
    1b28:	e037883a 	mov	sp,fp
    1b2c:	df000017 	ldw	fp,0(sp)
    1b30:	dec00104 	addi	sp,sp,4
    1b34:	f800283a 	ret

00001b38 <send_uart_n>:

int send_uart_n(unsigned char *msg, unsigned char length, unsigned long base)
{
    1b38:	defffa04 	addi	sp,sp,-24
    1b3c:	dfc00515 	stw	ra,20(sp)
    1b40:	df000415 	stw	fp,16(sp)
    1b44:	df000404 	addi	fp,sp,16
    1b48:	e13ffd15 	stw	r4,-12(fp)
    1b4c:	2805883a 	mov	r2,r5
    1b50:	e1bfff15 	stw	r6,-4(fp)
    1b54:	e0bffe05 	stb	r2,-8(fp)
	unsigned char i=0;
    1b58:	e03ffc05 	stb	zero,-16(fp)
	for (i=0;i<length;i++) send_uart(msg[i], base);
    1b5c:	e03ffc05 	stb	zero,-16(fp)
    1b60:	00000b06 	br	1b90 <send_uart_n+0x58>
    1b64:	e0bffc03 	ldbu	r2,-16(fp)
    1b68:	e0fffd17 	ldw	r3,-12(fp)
    1b6c:	1885883a 	add	r2,r3,r2
    1b70:	10800003 	ldbu	r2,0(r2)
    1b74:	10803fcc 	andi	r2,r2,255
    1b78:	1009883a 	mov	r4,r2
    1b7c:	e17fff17 	ldw	r5,-4(fp)
    1b80:	0001ae40 	call	1ae4 <send_uart>
    1b84:	e0bffc03 	ldbu	r2,-16(fp)
    1b88:	10800044 	addi	r2,r2,1
    1b8c:	e0bffc05 	stb	r2,-16(fp)
    1b90:	e0fffc03 	ldbu	r3,-16(fp)
    1b94:	e0bffe03 	ldbu	r2,-8(fp)
    1b98:	18bff236 	bltu	r3,r2,1b64 <_gp+0xffff5990>
    return 1;
    1b9c:	00800044 	movi	r2,1
}
    1ba0:	e037883a 	mov	sp,fp
    1ba4:	dfc00117 	ldw	ra,4(sp)
    1ba8:	df000017 	ldw	fp,0(sp)
    1bac:	dec00204 	addi	sp,sp,8
    1bb0:	f800283a 	ret

00001bb4 <send_com2pc>:

int send_com2pc (unsigned char *msg, unsigned char length)
{
    1bb4:	defffc04 	addi	sp,sp,-16
    1bb8:	dfc00315 	stw	ra,12(sp)
    1bbc:	df000215 	stw	fp,8(sp)
    1bc0:	df000204 	addi	fp,sp,8
    1bc4:	e13ffe15 	stw	r4,-8(fp)
    1bc8:	2805883a 	mov	r2,r5
    1bcc:	e0bfff05 	stb	r2,-4(fp)
	send_uart_n(msg,length,PC_UART_BASE);
    1bd0:	e0bfff03 	ldbu	r2,-4(fp)
    1bd4:	e13ffe17 	ldw	r4,-8(fp)
    1bd8:	100b883a 	mov	r5,r2
    1bdc:	01a5b814 	movui	r6,38624
    1be0:	0001b380 	call	1b38 <send_uart_n>
	return 1;
    1be4:	00800044 	movi	r2,1
}
    1be8:	e037883a 	mov	sp,fp
    1bec:	dfc00117 	ldw	ra,4(sp)
    1bf0:	df000017 	ldw	fp,0(sp)
    1bf4:	dec00204 	addi	sp,sp,8
    1bf8:	f800283a 	ret

00001bfc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1bfc:	defff904 	addi	sp,sp,-28
    1c00:	dfc00615 	stw	ra,24(sp)
    1c04:	df000515 	stw	fp,20(sp)
    1c08:	df000504 	addi	fp,sp,20
    1c0c:	e13ffc15 	stw	r4,-16(fp)
    1c10:	e17ffd15 	stw	r5,-12(fp)
    1c14:	e1bffe15 	stw	r6,-8(fp)
    1c18:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1c1c:	e0800217 	ldw	r2,8(fp)
    1c20:	d8800015 	stw	r2,0(sp)
    1c24:	e13ffc17 	ldw	r4,-16(fp)
    1c28:	e17ffd17 	ldw	r5,-12(fp)
    1c2c:	e1bffe17 	ldw	r6,-8(fp)
    1c30:	e1ffff17 	ldw	r7,-4(fp)
    1c34:	0001dd40 	call	1dd4 <alt_iic_isr_register>
}  
    1c38:	e037883a 	mov	sp,fp
    1c3c:	dfc00117 	ldw	ra,4(sp)
    1c40:	df000017 	ldw	fp,0(sp)
    1c44:	dec00204 	addi	sp,sp,8
    1c48:	f800283a 	ret

00001c4c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1c4c:	defff904 	addi	sp,sp,-28
    1c50:	df000615 	stw	fp,24(sp)
    1c54:	df000604 	addi	fp,sp,24
    1c58:	e13ffe15 	stw	r4,-8(fp)
    1c5c:	e17fff15 	stw	r5,-4(fp)
    1c60:	e0bfff17 	ldw	r2,-4(fp)
    1c64:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1c68:	0005303a 	rdctl	r2,status
    1c6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1c70:	e0fffb17 	ldw	r3,-20(fp)
    1c74:	00bfff84 	movi	r2,-2
    1c78:	1884703a 	and	r2,r3,r2
    1c7c:	1001703a 	wrctl	status,r2
  
  return context;
    1c80:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1c84:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    1c88:	e0bffa17 	ldw	r2,-24(fp)
    1c8c:	00c00044 	movi	r3,1
    1c90:	1884983a 	sll	r2,r3,r2
    1c94:	1007883a 	mov	r3,r2
    1c98:	00800034 	movhi	r2,0
    1c9c:	10923804 	addi	r2,r2,18656
    1ca0:	10800017 	ldw	r2,0(r2)
    1ca4:	1886b03a 	or	r3,r3,r2
    1ca8:	00800034 	movhi	r2,0
    1cac:	10923804 	addi	r2,r2,18656
    1cb0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1cb4:	00800034 	movhi	r2,0
    1cb8:	10923804 	addi	r2,r2,18656
    1cbc:	10800017 	ldw	r2,0(r2)
    1cc0:	100170fa 	wrctl	ienable,r2
    1cc4:	e0bffc17 	ldw	r2,-16(fp)
    1cc8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ccc:	e0bffd17 	ldw	r2,-12(fp)
    1cd0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1cd4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
    1cd8:	e037883a 	mov	sp,fp
    1cdc:	df000017 	ldw	fp,0(sp)
    1ce0:	dec00104 	addi	sp,sp,4
    1ce4:	f800283a 	ret

00001ce8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    1ce8:	defff904 	addi	sp,sp,-28
    1cec:	df000615 	stw	fp,24(sp)
    1cf0:	df000604 	addi	fp,sp,24
    1cf4:	e13ffe15 	stw	r4,-8(fp)
    1cf8:	e17fff15 	stw	r5,-4(fp)
    1cfc:	e0bfff17 	ldw	r2,-4(fp)
    1d00:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1d04:	0005303a 	rdctl	r2,status
    1d08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1d0c:	e0fffb17 	ldw	r3,-20(fp)
    1d10:	00bfff84 	movi	r2,-2
    1d14:	1884703a 	and	r2,r3,r2
    1d18:	1001703a 	wrctl	status,r2
  
  return context;
    1d1c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1d20:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    1d24:	e0bffa17 	ldw	r2,-24(fp)
    1d28:	00c00044 	movi	r3,1
    1d2c:	1884983a 	sll	r2,r3,r2
    1d30:	0084303a 	nor	r2,zero,r2
    1d34:	1007883a 	mov	r3,r2
    1d38:	00800034 	movhi	r2,0
    1d3c:	10923804 	addi	r2,r2,18656
    1d40:	10800017 	ldw	r2,0(r2)
    1d44:	1886703a 	and	r3,r3,r2
    1d48:	00800034 	movhi	r2,0
    1d4c:	10923804 	addi	r2,r2,18656
    1d50:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1d54:	00800034 	movhi	r2,0
    1d58:	10923804 	addi	r2,r2,18656
    1d5c:	10800017 	ldw	r2,0(r2)
    1d60:	100170fa 	wrctl	ienable,r2
    1d64:	e0bffc17 	ldw	r2,-16(fp)
    1d68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1d6c:	e0bffd17 	ldw	r2,-12(fp)
    1d70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1d74:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
    1d78:	e037883a 	mov	sp,fp
    1d7c:	df000017 	ldw	fp,0(sp)
    1d80:	dec00104 	addi	sp,sp,4
    1d84:	f800283a 	ret

00001d88 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    1d88:	defffc04 	addi	sp,sp,-16
    1d8c:	df000315 	stw	fp,12(sp)
    1d90:	df000304 	addi	fp,sp,12
    1d94:	e13ffe15 	stw	r4,-8(fp)
    1d98:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1d9c:	000530fa 	rdctl	r2,ienable
    1da0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1da4:	e0bfff17 	ldw	r2,-4(fp)
    1da8:	00c00044 	movi	r3,1
    1dac:	1884983a 	sll	r2,r3,r2
    1db0:	1007883a 	mov	r3,r2
    1db4:	e0bffd17 	ldw	r2,-12(fp)
    1db8:	1884703a 	and	r2,r3,r2
    1dbc:	1004c03a 	cmpne	r2,r2,zero
    1dc0:	10803fcc 	andi	r2,r2,255
}
    1dc4:	e037883a 	mov	sp,fp
    1dc8:	df000017 	ldw	fp,0(sp)
    1dcc:	dec00104 	addi	sp,sp,4
    1dd0:	f800283a 	ret

00001dd4 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1dd4:	defff504 	addi	sp,sp,-44
    1dd8:	dfc00a15 	stw	ra,40(sp)
    1ddc:	df000915 	stw	fp,36(sp)
    1de0:	df000904 	addi	fp,sp,36
    1de4:	e13ffc15 	stw	r4,-16(fp)
    1de8:	e17ffd15 	stw	r5,-12(fp)
    1dec:	e1bffe15 	stw	r6,-8(fp)
    1df0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    1df4:	00bffa84 	movi	r2,-22
    1df8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1dfc:	e0bffd17 	ldw	r2,-12(fp)
    1e00:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1e04:	e0bff817 	ldw	r2,-32(fp)
    1e08:	10800808 	cmpgei	r2,r2,32
    1e0c:	1000271e 	bne	r2,zero,1eac <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1e10:	0005303a 	rdctl	r2,status
    1e14:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1e18:	e0fffa17 	ldw	r3,-24(fp)
    1e1c:	00bfff84 	movi	r2,-2
    1e20:	1884703a 	and	r2,r3,r2
    1e24:	1001703a 	wrctl	status,r2
  
  return context;
    1e28:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1e2c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
    1e30:	00c00034 	movhi	r3,0
    1e34:	18d29904 	addi	r3,r3,19044
    1e38:	e0bff817 	ldw	r2,-32(fp)
    1e3c:	100490fa 	slli	r2,r2,3
    1e40:	1885883a 	add	r2,r3,r2
    1e44:	e0fffe17 	ldw	r3,-8(fp)
    1e48:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    1e4c:	00c00034 	movhi	r3,0
    1e50:	18d29904 	addi	r3,r3,19044
    1e54:	e0bff817 	ldw	r2,-32(fp)
    1e58:	100490fa 	slli	r2,r2,3
    1e5c:	1885883a 	add	r2,r3,r2
    1e60:	10800104 	addi	r2,r2,4
    1e64:	e0ffff17 	ldw	r3,-4(fp)
    1e68:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1e6c:	e0bffe17 	ldw	r2,-8(fp)
    1e70:	10000526 	beq	r2,zero,1e88 <alt_iic_isr_register+0xb4>
    1e74:	e0bff817 	ldw	r2,-32(fp)
    1e78:	e13ffc17 	ldw	r4,-16(fp)
    1e7c:	100b883a 	mov	r5,r2
    1e80:	0001c4c0 	call	1c4c <alt_ic_irq_enable>
    1e84:	00000406 	br	1e98 <alt_iic_isr_register+0xc4>
    1e88:	e0bff817 	ldw	r2,-32(fp)
    1e8c:	e13ffc17 	ldw	r4,-16(fp)
    1e90:	100b883a 	mov	r5,r2
    1e94:	0001ce80 	call	1ce8 <alt_ic_irq_disable>
    1e98:	e0bff715 	stw	r2,-36(fp)
    1e9c:	e0bff917 	ldw	r2,-28(fp)
    1ea0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1ea4:	e0bffb17 	ldw	r2,-20(fp)
    1ea8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    1eac:	e0bff717 	ldw	r2,-36(fp)
}
    1eb0:	e037883a 	mov	sp,fp
    1eb4:	dfc00117 	ldw	ra,4(sp)
    1eb8:	df000017 	ldw	fp,0(sp)
    1ebc:	dec00204 	addi	sp,sp,8
    1ec0:	f800283a 	ret

00001ec4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    1ec4:	defffc04 	addi	sp,sp,-16
    1ec8:	df000315 	stw	fp,12(sp)
    1ecc:	df000304 	addi	fp,sp,12
    1ed0:	e13ffd15 	stw	r4,-12(fp)
    1ed4:	e17ffe15 	stw	r5,-8(fp)
    1ed8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    1edc:	e0fffe17 	ldw	r3,-8(fp)
    1ee0:	e0bffd17 	ldw	r2,-12(fp)
    1ee4:	18800e26 	beq	r3,r2,1f20 <alt_load_section+0x5c>
  {
    while( to != end )
    1ee8:	00000a06 	br	1f14 <alt_load_section+0x50>
    {
      *to++ = *from++;
    1eec:	e0bffd17 	ldw	r2,-12(fp)
    1ef0:	10c00017 	ldw	r3,0(r2)
    1ef4:	e0bffe17 	ldw	r2,-8(fp)
    1ef8:	10c00015 	stw	r3,0(r2)
    1efc:	e0bffe17 	ldw	r2,-8(fp)
    1f00:	10800104 	addi	r2,r2,4
    1f04:	e0bffe15 	stw	r2,-8(fp)
    1f08:	e0bffd17 	ldw	r2,-12(fp)
    1f0c:	10800104 	addi	r2,r2,4
    1f10:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    1f14:	e0fffe17 	ldw	r3,-8(fp)
    1f18:	e0bfff17 	ldw	r2,-4(fp)
    1f1c:	18bff31e 	bne	r3,r2,1eec <_gp+0xffff5d18>
    {
      *to++ = *from++;
    }
  }
}
    1f20:	e037883a 	mov	sp,fp
    1f24:	df000017 	ldw	fp,0(sp)
    1f28:	dec00104 	addi	sp,sp,4
    1f2c:	f800283a 	ret

00001f30 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    1f30:	defffe04 	addi	sp,sp,-8
    1f34:	dfc00115 	stw	ra,4(sp)
    1f38:	df000015 	stw	fp,0(sp)
    1f3c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    1f40:	01000034 	movhi	r4,0
    1f44:	21108204 	addi	r4,r4,16904
    1f48:	01400034 	movhi	r5,0
    1f4c:	294eda04 	addi	r5,r5,15208
    1f50:	01800034 	movhi	r6,0
    1f54:	31908204 	addi	r6,r6,16904
    1f58:	0001ec40 	call	1ec4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    1f5c:	01000034 	movhi	r4,0
    1f60:	21000804 	addi	r4,r4,32
    1f64:	01400034 	movhi	r5,0
    1f68:	29400804 	addi	r5,r5,32
    1f6c:	01800034 	movhi	r6,0
    1f70:	31806e04 	addi	r6,r6,440
    1f74:	0001ec40 	call	1ec4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    1f78:	01000034 	movhi	r4,0
    1f7c:	210ece04 	addi	r4,r4,15160
    1f80:	01400034 	movhi	r5,0
    1f84:	294ece04 	addi	r5,r5,15160
    1f88:	01800034 	movhi	r6,0
    1f8c:	318eda04 	addi	r6,r6,15208
    1f90:	0001ec40 	call	1ec4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    1f94:	0002be80 	call	2be8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    1f98:	0002e000 	call	2e00 <alt_icache_flush_all>
}
    1f9c:	e037883a 	mov	sp,fp
    1fa0:	dfc00117 	ldw	ra,4(sp)
    1fa4:	df000017 	ldw	fp,0(sp)
    1fa8:	dec00204 	addi	sp,sp,8
    1fac:	f800283a 	ret

00001fb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    1fb0:	defffd04 	addi	sp,sp,-12
    1fb4:	dfc00215 	stw	ra,8(sp)
    1fb8:	df000115 	stw	fp,4(sp)
    1fbc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    1fc0:	0009883a 	mov	r4,zero
    1fc4:	00020600 	call	2060 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    1fc8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    1fcc:	00020940 	call	2094 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    1fd0:	01000034 	movhi	r4,0
    1fd4:	210ece04 	addi	r4,r4,15160
    1fd8:	01400034 	movhi	r5,0
    1fdc:	294ece04 	addi	r5,r5,15160
    1fe0:	01800034 	movhi	r6,0
    1fe4:	318ece04 	addi	r6,r6,15160
    1fe8:	0002ef00 	call	2ef0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    1fec:	0002d480 	call	2d48 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    1ff0:	01000034 	movhi	r4,0
    1ff4:	210b6904 	addi	r4,r4,11684
    1ff8:	00036d80 	call	36d8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    1ffc:	d121c417 	ldw	r4,-30960(gp)
    2000:	d0e1c517 	ldw	r3,-30956(gp)
    2004:	d0a1c617 	ldw	r2,-30952(gp)
    2008:	180b883a 	mov	r5,r3
    200c:	100d883a 	mov	r6,r2
    2010:	00011e40 	call	11e4 <main>
    2014:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    2018:	01000044 	movi	r4,1
    201c:	0002b200 	call	2b20 <close>
  exit (result);
    2020:	e13fff17 	ldw	r4,-4(fp)
    2024:	00036ec0 	call	36ec <exit>

00002028 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    2028:	defffd04 	addi	sp,sp,-12
    202c:	dfc00215 	stw	ra,8(sp)
    2030:	df000115 	stw	fp,4(sp)
    2034:	df000104 	addi	fp,sp,4
    2038:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    203c:	e13fff17 	ldw	r4,-4(fp)
    2040:	01400034 	movhi	r5,0
    2044:	29507a04 	addi	r5,r5,16872
    2048:	0002ca80 	call	2ca8 <alt_dev_llist_insert>
}
    204c:	e037883a 	mov	sp,fp
    2050:	dfc00117 	ldw	ra,4(sp)
    2054:	df000017 	ldw	fp,0(sp)
    2058:	dec00204 	addi	sp,sp,8
    205c:	f800283a 	ret

00002060 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    2060:	defffd04 	addi	sp,sp,-12
    2064:	dfc00215 	stw	ra,8(sp)
    2068:	df000115 	stw	fp,4(sp)
    206c:	df000104 	addi	fp,sp,4
    2070:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, cpu);
    2074:	00033d40 	call	33d4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    2078:	00800044 	movi	r2,1
    207c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    2080:	e037883a 	mov	sp,fp
    2084:	dfc00117 	ldw	ra,4(sp)
    2088:	df000017 	ldw	fp,0(sp)
    208c:	dec00204 	addi	sp,sp,8
    2090:	f800283a 	ret

00002094 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    2094:	defffe04 	addi	sp,sp,-8
    2098:	dfc00115 	stw	ra,4(sp)
    209c:	df000015 	stw	fp,0(sp)
    20a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_TIMER, sys_timer);
    20a4:	0125c014 	movui	r4,38656
    20a8:	000b883a 	mov	r5,zero
    20ac:	000d883a 	mov	r6,zero
    20b0:	01c0fa04 	movi	r7,1000
    20b4:	00021680 	call	2168 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    20b8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYS_ID, sys_id);
    20bc:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( PC_UART, pc_uart);
    20c0:	01000034 	movhi	r4,0
    20c4:	210ee404 	addi	r4,r4,15248
    20c8:	000b883a 	mov	r5,zero
    20cc:	01800044 	movi	r6,1
    20d0:	00023000 	call	2300 <altera_avalon_uart_init>
    20d4:	01000034 	movhi	r4,0
    20d8:	210eda04 	addi	r4,r4,15208
    20dc:	00020280 	call	2028 <alt_dev_reg>
}
    20e0:	e037883a 	mov	sp,fp
    20e4:	dfc00117 	ldw	ra,4(sp)
    20e8:	df000017 	ldw	fp,0(sp)
    20ec:	dec00204 	addi	sp,sp,8
    20f0:	f800283a 	ret

000020f4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    20f4:	defffa04 	addi	sp,sp,-24
    20f8:	dfc00515 	stw	ra,20(sp)
    20fc:	df000415 	stw	fp,16(sp)
    2100:	df000404 	addi	fp,sp,16
    2104:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    2108:	0007883a 	mov	r3,zero
    210c:	e0bfff17 	ldw	r2,-4(fp)
    2110:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    2114:	e0bfff17 	ldw	r2,-4(fp)
    2118:	10800104 	addi	r2,r2,4
    211c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2120:	0005303a 	rdctl	r2,status
    2124:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2128:	e0fffd17 	ldw	r3,-12(fp)
    212c:	00bfff84 	movi	r2,-2
    2130:	1884703a 	and	r2,r3,r2
    2134:	1001703a 	wrctl	status,r2
  
  return context;
    2138:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    213c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    2140:	00032d00 	call	32d0 <alt_tick>
    2144:	e0bffc17 	ldw	r2,-16(fp)
    2148:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    214c:	e0bffe17 	ldw	r2,-8(fp)
    2150:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    2154:	e037883a 	mov	sp,fp
    2158:	dfc00117 	ldw	ra,4(sp)
    215c:	df000017 	ldw	fp,0(sp)
    2160:	dec00204 	addi	sp,sp,8
    2164:	f800283a 	ret

00002168 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    2168:	defff804 	addi	sp,sp,-32
    216c:	dfc00715 	stw	ra,28(sp)
    2170:	df000615 	stw	fp,24(sp)
    2174:	df000604 	addi	fp,sp,24
    2178:	e13ffc15 	stw	r4,-16(fp)
    217c:	e17ffd15 	stw	r5,-12(fp)
    2180:	e1bffe15 	stw	r6,-8(fp)
    2184:	e1ffff15 	stw	r7,-4(fp)
    2188:	e0bfff17 	ldw	r2,-4(fp)
    218c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    2190:	00800034 	movhi	r2,0
    2194:	10923c04 	addi	r2,r2,18672
    2198:	10800017 	ldw	r2,0(r2)
    219c:	1000041e 	bne	r2,zero,21b0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    21a0:	00800034 	movhi	r2,0
    21a4:	10923c04 	addi	r2,r2,18672
    21a8:	e0fffb17 	ldw	r3,-20(fp)
    21ac:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    21b0:	e0bffc17 	ldw	r2,-16(fp)
    21b4:	10800104 	addi	r2,r2,4
    21b8:	00c001c4 	movi	r3,7
    21bc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    21c0:	d8000015 	stw	zero,0(sp)
    21c4:	e13ffd17 	ldw	r4,-12(fp)
    21c8:	e17ffe17 	ldw	r5,-8(fp)
    21cc:	01800034 	movhi	r6,0
    21d0:	31883d04 	addi	r6,r6,8436
    21d4:	e1fffc17 	ldw	r7,-16(fp)
    21d8:	0001bfc0 	call	1bfc <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    21dc:	e037883a 	mov	sp,fp
    21e0:	dfc00117 	ldw	ra,4(sp)
    21e4:	df000017 	ldw	fp,0(sp)
    21e8:	dec00204 	addi	sp,sp,8
    21ec:	f800283a 	ret

000021f0 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    21f0:	defffa04 	addi	sp,sp,-24
    21f4:	dfc00515 	stw	ra,20(sp)
    21f8:	df000415 	stw	fp,16(sp)
    21fc:	df000404 	addi	fp,sp,16
    2200:	e13ffd15 	stw	r4,-12(fp)
    2204:	e17ffe15 	stw	r5,-8(fp)
    2208:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    220c:	e0bffd17 	ldw	r2,-12(fp)
    2210:	10800017 	ldw	r2,0(r2)
    2214:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
    2218:	e0bffc17 	ldw	r2,-16(fp)
    221c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    2220:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
    2224:	10800217 	ldw	r2,8(r2)
    2228:	1809883a 	mov	r4,r3
    222c:	e17ffe17 	ldw	r5,-8(fp)
    2230:	e1bfff17 	ldw	r6,-4(fp)
    2234:	100f883a 	mov	r7,r2
    2238:	00026f80 	call	26f8 <altera_avalon_uart_read>
      fd->fd_flags);
}
    223c:	e037883a 	mov	sp,fp
    2240:	dfc00117 	ldw	ra,4(sp)
    2244:	df000017 	ldw	fp,0(sp)
    2248:	dec00204 	addi	sp,sp,8
    224c:	f800283a 	ret

00002250 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    2250:	defffa04 	addi	sp,sp,-24
    2254:	dfc00515 	stw	ra,20(sp)
    2258:	df000415 	stw	fp,16(sp)
    225c:	df000404 	addi	fp,sp,16
    2260:	e13ffd15 	stw	r4,-12(fp)
    2264:	e17ffe15 	stw	r5,-8(fp)
    2268:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    226c:	e0bffd17 	ldw	r2,-12(fp)
    2270:	10800017 	ldw	r2,0(r2)
    2274:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
    2280:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
    2284:	10800217 	ldw	r2,8(r2)
    2288:	1809883a 	mov	r4,r3
    228c:	e17ffe17 	ldw	r5,-8(fp)
    2290:	e1bfff17 	ldw	r6,-4(fp)
    2294:	100f883a 	mov	r7,r2
    2298:	00029280 	call	2928 <altera_avalon_uart_write>
      fd->fd_flags);
}
    229c:	e037883a 	mov	sp,fp
    22a0:	dfc00117 	ldw	ra,4(sp)
    22a4:	df000017 	ldw	fp,0(sp)
    22a8:	dec00204 	addi	sp,sp,8
    22ac:	f800283a 	ret

000022b0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
    22b0:	defffc04 	addi	sp,sp,-16
    22b4:	dfc00315 	stw	ra,12(sp)
    22b8:	df000215 	stw	fp,8(sp)
    22bc:	df000204 	addi	fp,sp,8
    22c0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
    22c4:	e0bfff17 	ldw	r2,-4(fp)
    22c8:	10800017 	ldw	r2,0(r2)
    22cc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
    22d0:	e0bffe17 	ldw	r2,-8(fp)
    22d4:	10c00a04 	addi	r3,r2,40
    22d8:	e0bfff17 	ldw	r2,-4(fp)
    22dc:	10800217 	ldw	r2,8(r2)
    22e0:	1809883a 	mov	r4,r3
    22e4:	100b883a 	mov	r5,r2
    22e8:	00026540 	call	2654 <altera_avalon_uart_close>
}
    22ec:	e037883a 	mov	sp,fp
    22f0:	dfc00117 	ldw	ra,4(sp)
    22f4:	df000017 	ldw	fp,0(sp)
    22f8:	dec00204 	addi	sp,sp,8
    22fc:	f800283a 	ret

00002300 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
    2300:	defff804 	addi	sp,sp,-32
    2304:	dfc00715 	stw	ra,28(sp)
    2308:	df000615 	stw	fp,24(sp)
    230c:	df000604 	addi	fp,sp,24
    2310:	e13ffd15 	stw	r4,-12(fp)
    2314:	e17ffe15 	stw	r5,-8(fp)
    2318:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
    231c:	e0bffd17 	ldw	r2,-12(fp)
    2320:	10800017 	ldw	r2,0(r2)
    2324:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
    2328:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    232c:	1000041e 	bne	r2,zero,2340 <altera_avalon_uart_init+0x40>
    2330:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    2334:	1000021e 	bne	r2,zero,2340 <altera_avalon_uart_init+0x40>
    2338:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
    233c:	10000226 	beq	r2,zero,2348 <altera_avalon_uart_init+0x48>
    2340:	00800044 	movi	r2,1
    2344:	00000106 	br	234c <altera_avalon_uart_init+0x4c>
    2348:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
    234c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
    2350:	e0bffc17 	ldw	r2,-16(fp)
    2354:	10000f1e 	bne	r2,zero,2394 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
    2358:	e0bffd17 	ldw	r2,-12(fp)
    235c:	00c32004 	movi	r3,3200
    2360:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
    2364:	e0bffb17 	ldw	r2,-20(fp)
    2368:	10800304 	addi	r2,r2,12
    236c:	e0fffd17 	ldw	r3,-12(fp)
    2370:	18c00117 	ldw	r3,4(r3)
    2374:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
    2378:	d8000015 	stw	zero,0(sp)
    237c:	e13ffe17 	ldw	r4,-8(fp)
    2380:	e17fff17 	ldw	r5,-4(fp)
    2384:	01800034 	movhi	r6,0
    2388:	3188ea04 	addi	r6,r6,9128
    238c:	e1fffd17 	ldw	r7,-12(fp)
    2390:	0001bfc0 	call	1bfc <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
    2394:	e037883a 	mov	sp,fp
    2398:	dfc00117 	ldw	ra,4(sp)
    239c:	df000017 	ldw	fp,0(sp)
    23a0:	dec00204 	addi	sp,sp,8
    23a4:	f800283a 	ret

000023a8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
    23a8:	defffa04 	addi	sp,sp,-24
    23ac:	dfc00515 	stw	ra,20(sp)
    23b0:	df000415 	stw	fp,16(sp)
    23b4:	df000404 	addi	fp,sp,16
    23b8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
    23bc:	e0bfff17 	ldw	r2,-4(fp)
    23c0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
    23c4:	e0bffc17 	ldw	r2,-16(fp)
    23c8:	10800017 	ldw	r2,0(r2)
    23cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
    23d0:	e0bffd17 	ldw	r2,-12(fp)
    23d4:	10800204 	addi	r2,r2,8
    23d8:	10800037 	ldwio	r2,0(r2)
    23dc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
    23e0:	e0bffd17 	ldw	r2,-12(fp)
    23e4:	10800204 	addi	r2,r2,8
    23e8:	0007883a 	mov	r3,zero
    23ec:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
    23f0:	e0bffd17 	ldw	r2,-12(fp)
    23f4:	10800204 	addi	r2,r2,8
    23f8:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
    23fc:	e0bffe17 	ldw	r2,-8(fp)
    2400:	1080200c 	andi	r2,r2,128
    2404:	10000326 	beq	r2,zero,2414 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
    2408:	e13ffc17 	ldw	r4,-16(fp)
    240c:	e17ffe17 	ldw	r5,-8(fp)
    2410:	00024400 	call	2440 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
    2414:	e0bffe17 	ldw	r2,-8(fp)
    2418:	1081100c 	andi	r2,r2,1088
    241c:	10000326 	beq	r2,zero,242c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
    2420:	e13ffc17 	ldw	r4,-16(fp)
    2424:	e17ffe17 	ldw	r5,-8(fp)
    2428:	00025180 	call	2518 <altera_avalon_uart_txirq>
  }
  

}
    242c:	e037883a 	mov	sp,fp
    2430:	dfc00117 	ldw	ra,4(sp)
    2434:	df000017 	ldw	fp,0(sp)
    2438:	dec00204 	addi	sp,sp,8
    243c:	f800283a 	ret

00002440 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    2440:	defffc04 	addi	sp,sp,-16
    2444:	df000315 	stw	fp,12(sp)
    2448:	df000304 	addi	fp,sp,12
    244c:	e13ffe15 	stw	r4,-8(fp)
    2450:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
    2454:	e0bfff17 	ldw	r2,-4(fp)
    2458:	108000cc 	andi	r2,r2,3
    245c:	1000291e 	bne	r2,zero,2504 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
    2460:	e0bffe17 	ldw	r2,-8(fp)
    2464:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    2468:	e0bffe17 	ldw	r2,-8(fp)
    246c:	10800317 	ldw	r2,12(r2)
    2470:	10800044 	addi	r2,r2,1
    2474:	10800fcc 	andi	r2,r2,63
    2478:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
    247c:	e0bffe17 	ldw	r2,-8(fp)
    2480:	10800317 	ldw	r2,12(r2)
    2484:	e0fffe17 	ldw	r3,-8(fp)
    2488:	18c00017 	ldw	r3,0(r3)
    248c:	18c00037 	ldwio	r3,0(r3)
    2490:	e13ffe17 	ldw	r4,-8(fp)
    2494:	2085883a 	add	r2,r4,r2
    2498:	10800704 	addi	r2,r2,28
    249c:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
    24a0:	e0bffe17 	ldw	r2,-8(fp)
    24a4:	e0fffd17 	ldw	r3,-12(fp)
    24a8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    24ac:	e0bffe17 	ldw	r2,-8(fp)
    24b0:	10800317 	ldw	r2,12(r2)
    24b4:	10800044 	addi	r2,r2,1
    24b8:	10800fcc 	andi	r2,r2,63
    24bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
    24c0:	e0bffe17 	ldw	r2,-8(fp)
    24c4:	10c00217 	ldw	r3,8(r2)
    24c8:	e0bffd17 	ldw	r2,-12(fp)
    24cc:	18800e1e 	bne	r3,r2,2508 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    24d0:	e0bffe17 	ldw	r2,-8(fp)
    24d4:	10c00117 	ldw	r3,4(r2)
    24d8:	00bfdfc4 	movi	r2,-129
    24dc:	1886703a 	and	r3,r3,r2
    24e0:	e0bffe17 	ldw	r2,-8(fp)
    24e4:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
    24e8:	e0bffe17 	ldw	r2,-8(fp)
    24ec:	10800017 	ldw	r2,0(r2)
    24f0:	10800304 	addi	r2,r2,12
    24f4:	e0fffe17 	ldw	r3,-8(fp)
    24f8:	18c00117 	ldw	r3,4(r3)
    24fc:	10c00035 	stwio	r3,0(r2)
    2500:	00000106 	br	2508 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
    2504:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
    2508:	e037883a 	mov	sp,fp
    250c:	df000017 	ldw	fp,0(sp)
    2510:	dec00104 	addi	sp,sp,4
    2514:	f800283a 	ret

00002518 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
    2518:	defffd04 	addi	sp,sp,-12
    251c:	df000215 	stw	fp,8(sp)
    2520:	df000204 	addi	fp,sp,8
    2524:	e13ffe15 	stw	r4,-8(fp)
    2528:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
    252c:	e0bffe17 	ldw	r2,-8(fp)
    2530:	10c00417 	ldw	r3,16(r2)
    2534:	e0bffe17 	ldw	r2,-8(fp)
    2538:	10800517 	ldw	r2,20(r2)
    253c:	18803026 	beq	r3,r2,2600 <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    2540:	e0bffe17 	ldw	r2,-8(fp)
    2544:	10800617 	ldw	r2,24(r2)
    2548:	1080008c 	andi	r2,r2,2
    254c:	10000326 	beq	r2,zero,255c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    2550:	e0bfff17 	ldw	r2,-4(fp)
    2554:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
    2558:	10001b26 	beq	r2,zero,25c8 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
    255c:	e0bffe17 	ldw	r2,-8(fp)
    2560:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
    2564:	e0bffe17 	ldw	r2,-8(fp)
    2568:	10800017 	ldw	r2,0(r2)
    256c:	10800104 	addi	r2,r2,4
    2570:	e0fffe17 	ldw	r3,-8(fp)
    2574:	18c00417 	ldw	r3,16(r3)
    2578:	e13ffe17 	ldw	r4,-8(fp)
    257c:	20c7883a 	add	r3,r4,r3
    2580:	18c01704 	addi	r3,r3,92
    2584:	18c00003 	ldbu	r3,0(r3)
    2588:	18c03fcc 	andi	r3,r3,255
    258c:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
    2590:	e0bffe17 	ldw	r2,-8(fp)
    2594:	10800417 	ldw	r2,16(r2)
    2598:	10800044 	addi	r2,r2,1
    259c:	e0fffe17 	ldw	r3,-8(fp)
    25a0:	18800415 	stw	r2,16(r3)
    25a4:	10c00fcc 	andi	r3,r2,63
    25a8:	e0bffe17 	ldw	r2,-8(fp)
    25ac:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    25b0:	e0bffe17 	ldw	r2,-8(fp)
    25b4:	10800117 	ldw	r2,4(r2)
    25b8:	10c01014 	ori	r3,r2,64
    25bc:	e0bffe17 	ldw	r2,-8(fp)
    25c0:	10c00115 	stw	r3,4(r2)
    25c4:	00000e06 	br	2600 <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
    25c8:	e0bffe17 	ldw	r2,-8(fp)
    25cc:	10800017 	ldw	r2,0(r2)
    25d0:	10800204 	addi	r2,r2,8
    25d4:	10800037 	ldwio	r2,0(r2)
    25d8:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
    25dc:	e0bfff17 	ldw	r2,-4(fp)
    25e0:	1082000c 	andi	r2,r2,2048
    25e4:	1000061e 	bne	r2,zero,2600 <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
    25e8:	e0bffe17 	ldw	r2,-8(fp)
    25ec:	10c00117 	ldw	r3,4(r2)
    25f0:	00bfefc4 	movi	r2,-65
    25f4:	1886703a 	and	r3,r3,r2
    25f8:	e0bffe17 	ldw	r2,-8(fp)
    25fc:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
    2600:	e0bffe17 	ldw	r2,-8(fp)
    2604:	10c00417 	ldw	r3,16(r2)
    2608:	e0bffe17 	ldw	r2,-8(fp)
    260c:	10800517 	ldw	r2,20(r2)
    2610:	1880061e 	bne	r3,r2,262c <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    2614:	e0bffe17 	ldw	r2,-8(fp)
    2618:	10c00117 	ldw	r3,4(r2)
    261c:	00beefc4 	movi	r2,-1089
    2620:	1886703a 	and	r3,r3,r2
    2624:	e0bffe17 	ldw	r2,-8(fp)
    2628:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    262c:	e0bffe17 	ldw	r2,-8(fp)
    2630:	10800017 	ldw	r2,0(r2)
    2634:	10800304 	addi	r2,r2,12
    2638:	e0fffe17 	ldw	r3,-8(fp)
    263c:	18c00117 	ldw	r3,4(r3)
    2640:	10c00035 	stwio	r3,0(r2)
}
    2644:	e037883a 	mov	sp,fp
    2648:	df000017 	ldw	fp,0(sp)
    264c:	dec00104 	addi	sp,sp,4
    2650:	f800283a 	ret

00002654 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
    2654:	defffd04 	addi	sp,sp,-12
    2658:	df000215 	stw	fp,8(sp)
    265c:	df000204 	addi	fp,sp,8
    2660:	e13ffe15 	stw	r4,-8(fp)
    2664:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    2668:	00000506 	br	2680 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    266c:	e0bfff17 	ldw	r2,-4(fp)
    2670:	1090000c 	andi	r2,r2,16384
    2674:	10000226 	beq	r2,zero,2680 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
    2678:	00bffd44 	movi	r2,-11
    267c:	00000606 	br	2698 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
    2680:	e0bffe17 	ldw	r2,-8(fp)
    2684:	10c00417 	ldw	r3,16(r2)
    2688:	e0bffe17 	ldw	r2,-8(fp)
    268c:	10800517 	ldw	r2,20(r2)
    2690:	18bff61e 	bne	r3,r2,266c <_gp+0xffff6498>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    2694:	0005883a 	mov	r2,zero
}
    2698:	e037883a 	mov	sp,fp
    269c:	df000017 	ldw	fp,0(sp)
    26a0:	dec00104 	addi	sp,sp,4
    26a4:	f800283a 	ret

000026a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    26a8:	defffe04 	addi	sp,sp,-8
    26ac:	dfc00115 	stw	ra,4(sp)
    26b0:	df000015 	stw	fp,0(sp)
    26b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    26b8:	00800034 	movhi	r2,0
    26bc:	10907d04 	addi	r2,r2,16884
    26c0:	10800017 	ldw	r2,0(r2)
    26c4:	10000526 	beq	r2,zero,26dc <alt_get_errno+0x34>
    26c8:	00800034 	movhi	r2,0
    26cc:	10907d04 	addi	r2,r2,16884
    26d0:	10800017 	ldw	r2,0(r2)
    26d4:	103ee83a 	callr	r2
    26d8:	00000206 	br	26e4 <alt_get_errno+0x3c>
    26dc:	00800034 	movhi	r2,0
    26e0:	10923e04 	addi	r2,r2,18680
}
    26e4:	e037883a 	mov	sp,fp
    26e8:	dfc00117 	ldw	ra,4(sp)
    26ec:	df000017 	ldw	fp,0(sp)
    26f0:	dec00204 	addi	sp,sp,8
    26f4:	f800283a 	ret

000026f8 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
    26f8:	defff204 	addi	sp,sp,-56
    26fc:	dfc00d15 	stw	ra,52(sp)
    2700:	df000c15 	stw	fp,48(sp)
    2704:	df000c04 	addi	fp,sp,48
    2708:	e13ffc15 	stw	r4,-16(fp)
    270c:	e17ffd15 	stw	r5,-12(fp)
    2710:	e1bffe15 	stw	r6,-8(fp)
    2714:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
    2718:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
    271c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
    2720:	e0bfff17 	ldw	r2,-4(fp)
    2724:	1090000c 	andi	r2,r2,16384
    2728:	1005003a 	cmpeq	r2,r2,zero
    272c:	10803fcc 	andi	r2,r2,255
    2730:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    2734:	00001506 	br	278c <altera_avalon_uart_read+0x94>
    {
      count++;
    2738:	e0bff517 	ldw	r2,-44(fp)
    273c:	10800044 	addi	r2,r2,1
    2740:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
    2744:	e0bffc17 	ldw	r2,-16(fp)
    2748:	10800217 	ldw	r2,8(r2)
    274c:	e0fffc17 	ldw	r3,-16(fp)
    2750:	1885883a 	add	r2,r3,r2
    2754:	10800704 	addi	r2,r2,28
    2758:	10800003 	ldbu	r2,0(r2)
    275c:	1007883a 	mov	r3,r2
    2760:	e0bffd17 	ldw	r2,-12(fp)
    2764:	10c00005 	stb	r3,0(r2)
    2768:	e0bffd17 	ldw	r2,-12(fp)
    276c:	10800044 	addi	r2,r2,1
    2770:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
    2774:	e0bffc17 	ldw	r2,-16(fp)
    2778:	10800217 	ldw	r2,8(r2)
    277c:	10800044 	addi	r2,r2,1
    2780:	10c00fcc 	andi	r3,r2,63
    2784:	e0bffc17 	ldw	r2,-16(fp)
    2788:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
    278c:	e0fff517 	ldw	r3,-44(fp)
    2790:	e0bffe17 	ldw	r2,-8(fp)
    2794:	1880050e 	bge	r3,r2,27ac <altera_avalon_uart_read+0xb4>
    2798:	e0bffc17 	ldw	r2,-16(fp)
    279c:	10c00217 	ldw	r3,8(r2)
    27a0:	e0bffc17 	ldw	r2,-16(fp)
    27a4:	10800317 	ldw	r2,12(r2)
    27a8:	18bfe31e 	bne	r3,r2,2738 <_gp+0xffff6564>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
    27ac:	e0bff517 	ldw	r2,-44(fp)
    27b0:	1000241e 	bne	r2,zero,2844 <altera_avalon_uart_read+0x14c>
    27b4:	e0bffc17 	ldw	r2,-16(fp)
    27b8:	10c00217 	ldw	r3,8(r2)
    27bc:	e0bffc17 	ldw	r2,-16(fp)
    27c0:	10800317 	ldw	r2,12(r2)
    27c4:	18801f1e 	bne	r3,r2,2844 <altera_avalon_uart_read+0x14c>
    {
      if (!block)
    27c8:	e0bff617 	ldw	r2,-40(fp)
    27cc:	1000061e 	bne	r2,zero,27e8 <altera_avalon_uart_read+0xf0>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
    27d0:	00026a80 	call	26a8 <alt_get_errno>
    27d4:	00c002c4 	movi	r3,11
    27d8:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
    27dc:	00800044 	movi	r2,1
    27e0:	e0bff405 	stb	r2,-48(fp)
        break;
    27e4:	00001b06 	br	2854 <altera_avalon_uart_read+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    27e8:	0005303a 	rdctl	r2,status
    27ec:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    27f0:	e0fff817 	ldw	r3,-32(fp)
    27f4:	00bfff84 	movi	r2,-2
    27f8:	1884703a 	and	r2,r3,r2
    27fc:	1001703a 	wrctl	status,r2
  
  return context;
    2800:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
    2804:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    2808:	e0bffc17 	ldw	r2,-16(fp)
    280c:	10800117 	ldw	r2,4(r2)
    2810:	10c02014 	ori	r3,r2,128
    2814:	e0bffc17 	ldw	r2,-16(fp)
    2818:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    281c:	e0bffc17 	ldw	r2,-16(fp)
    2820:	10800017 	ldw	r2,0(r2)
    2824:	10800304 	addi	r2,r2,12
    2828:	e0fffc17 	ldw	r3,-16(fp)
    282c:	18c00117 	ldw	r3,4(r3)
    2830:	10c00035 	stwio	r3,0(r2)
    2834:	e0bff717 	ldw	r2,-36(fp)
    2838:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    283c:	e0bff917 	ldw	r2,-28(fp)
    2840:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
    2844:	e0bff517 	ldw	r2,-44(fp)
    2848:	1000021e 	bne	r2,zero,2854 <altera_avalon_uart_read+0x15c>
    284c:	e0bffe17 	ldw	r2,-8(fp)
    2850:	103fce1e 	bne	r2,zero,278c <_gp+0xffff65b8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2854:	0005303a 	rdctl	r2,status
    2858:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    285c:	e0fffa17 	ldw	r3,-24(fp)
    2860:	00bfff84 	movi	r2,-2
    2864:	1884703a 	and	r2,r3,r2
    2868:	1001703a 	wrctl	status,r2
  
  return context;
    286c:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
    2870:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    2874:	e0bffc17 	ldw	r2,-16(fp)
    2878:	10800117 	ldw	r2,4(r2)
    287c:	10c02014 	ori	r3,r2,128
    2880:	e0bffc17 	ldw	r2,-16(fp)
    2884:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    2888:	e0bffc17 	ldw	r2,-16(fp)
    288c:	10800017 	ldw	r2,0(r2)
    2890:	10800304 	addi	r2,r2,12
    2894:	e0fffc17 	ldw	r3,-16(fp)
    2898:	18c00117 	ldw	r3,4(r3)
    289c:	10c00035 	stwio	r3,0(r2)
    28a0:	e0bff717 	ldw	r2,-36(fp)
    28a4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    28a8:	e0bffb17 	ldw	r2,-20(fp)
    28ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
    28b0:	e0bff403 	ldbu	r2,-48(fp)
    28b4:	10000226 	beq	r2,zero,28c0 <altera_avalon_uart_read+0x1c8>
    return -EWOULDBLOCK;
    28b8:	00bffd44 	movi	r2,-11
    28bc:	00000106 	br	28c4 <altera_avalon_uart_read+0x1cc>
  }
  else {
    return count;
    28c0:	e0bff517 	ldw	r2,-44(fp)
  }
}
    28c4:	e037883a 	mov	sp,fp
    28c8:	dfc00117 	ldw	ra,4(sp)
    28cc:	df000017 	ldw	fp,0(sp)
    28d0:	dec00204 	addi	sp,sp,8
    28d4:	f800283a 	ret

000028d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    28d8:	defffe04 	addi	sp,sp,-8
    28dc:	dfc00115 	stw	ra,4(sp)
    28e0:	df000015 	stw	fp,0(sp)
    28e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    28e8:	00800034 	movhi	r2,0
    28ec:	10907d04 	addi	r2,r2,16884
    28f0:	10800017 	ldw	r2,0(r2)
    28f4:	10000526 	beq	r2,zero,290c <alt_get_errno+0x34>
    28f8:	00800034 	movhi	r2,0
    28fc:	10907d04 	addi	r2,r2,16884
    2900:	10800017 	ldw	r2,0(r2)
    2904:	103ee83a 	callr	r2
    2908:	00000206 	br	2914 <alt_get_errno+0x3c>
    290c:	00800034 	movhi	r2,0
    2910:	10923e04 	addi	r2,r2,18680
}
    2914:	e037883a 	mov	sp,fp
    2918:	dfc00117 	ldw	ra,4(sp)
    291c:	df000017 	ldw	fp,0(sp)
    2920:	dec00204 	addi	sp,sp,8
    2924:	f800283a 	ret

00002928 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    2928:	defff204 	addi	sp,sp,-56
    292c:	dfc00d15 	stw	ra,52(sp)
    2930:	df000c15 	stw	fp,48(sp)
    2934:	df000c04 	addi	fp,sp,48
    2938:	e13ffc15 	stw	r4,-16(fp)
    293c:	e17ffd15 	stw	r5,-12(fp)
    2940:	e1bffe15 	stw	r6,-8(fp)
    2944:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
    2948:	e0bffe17 	ldw	r2,-8(fp)
    294c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
    2950:	e0bfff17 	ldw	r2,-4(fp)
    2954:	1090000c 	andi	r2,r2,16384
    2958:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    295c:	00003b06 	br	2a4c <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
    2960:	e0bffc17 	ldw	r2,-16(fp)
    2964:	10800517 	ldw	r2,20(r2)
    2968:	10800044 	addi	r2,r2,1
    296c:	10800fcc 	andi	r2,r2,63
    2970:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
    2974:	e0bffc17 	ldw	r2,-16(fp)
    2978:	10c00417 	ldw	r3,16(r2)
    297c:	e0bff617 	ldw	r2,-40(fp)
    2980:	1880211e 	bne	r3,r2,2a08 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
    2984:	e0bff517 	ldw	r2,-44(fp)
    2988:	10000426 	beq	r2,zero,299c <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
    298c:	00028d80 	call	28d8 <alt_get_errno>
    2990:	00c002c4 	movi	r3,11
    2994:	10c00015 	stw	r3,0(r2)
        break;
    2998:	00002e06 	br	2a54 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    299c:	0005303a 	rdctl	r2,status
    29a0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    29a4:	e0fff817 	ldw	r3,-32(fp)
    29a8:	00bfff84 	movi	r2,-2
    29ac:	1884703a 	and	r2,r3,r2
    29b0:	1001703a 	wrctl	status,r2
  
  return context;
    29b4:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
    29b8:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    29bc:	e0bffc17 	ldw	r2,-16(fp)
    29c0:	10800117 	ldw	r2,4(r2)
    29c4:	10c11014 	ori	r3,r2,1088
    29c8:	e0bffc17 	ldw	r2,-16(fp)
    29cc:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    29d0:	e0bffc17 	ldw	r2,-16(fp)
    29d4:	10800017 	ldw	r2,0(r2)
    29d8:	10800304 	addi	r2,r2,12
    29dc:	e0fffc17 	ldw	r3,-16(fp)
    29e0:	18c00117 	ldw	r3,4(r3)
    29e4:	10c00035 	stwio	r3,0(r2)
    29e8:	e0bff717 	ldw	r2,-36(fp)
    29ec:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    29f0:	e0bff917 	ldw	r2,-28(fp)
    29f4:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
    29f8:	e0bffc17 	ldw	r2,-16(fp)
    29fc:	10c00417 	ldw	r3,16(r2)
    2a00:	e0bff617 	ldw	r2,-40(fp)
    2a04:	18bffc26 	beq	r3,r2,29f8 <_gp+0xffff6824>
      }
    }

    count--;
    2a08:	e0bff417 	ldw	r2,-48(fp)
    2a0c:	10bfffc4 	addi	r2,r2,-1
    2a10:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
    2a14:	e0bffc17 	ldw	r2,-16(fp)
    2a18:	10800517 	ldw	r2,20(r2)
    2a1c:	e0fffd17 	ldw	r3,-12(fp)
    2a20:	18c00003 	ldbu	r3,0(r3)
    2a24:	e13ffc17 	ldw	r4,-16(fp)
    2a28:	2085883a 	add	r2,r4,r2
    2a2c:	10801704 	addi	r2,r2,92
    2a30:	10c00005 	stb	r3,0(r2)
    2a34:	e0bffd17 	ldw	r2,-12(fp)
    2a38:	10800044 	addi	r2,r2,1
    2a3c:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
    2a40:	e0bffc17 	ldw	r2,-16(fp)
    2a44:	e0fff617 	ldw	r3,-40(fp)
    2a48:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
    2a4c:	e0bff417 	ldw	r2,-48(fp)
    2a50:	103fc31e 	bne	r2,zero,2960 <_gp+0xffff678c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2a54:	0005303a 	rdctl	r2,status
    2a58:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2a5c:	e0fffa17 	ldw	r3,-24(fp)
    2a60:	00bfff84 	movi	r2,-2
    2a64:	1884703a 	and	r2,r3,r2
    2a68:	1001703a 	wrctl	status,r2
  
  return context;
    2a6c:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
    2a70:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
    2a74:	e0bffc17 	ldw	r2,-16(fp)
    2a78:	10800117 	ldw	r2,4(r2)
    2a7c:	10c11014 	ori	r3,r2,1088
    2a80:	e0bffc17 	ldw	r2,-16(fp)
    2a84:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
    2a88:	e0bffc17 	ldw	r2,-16(fp)
    2a8c:	10800017 	ldw	r2,0(r2)
    2a90:	10800304 	addi	r2,r2,12
    2a94:	e0fffc17 	ldw	r3,-16(fp)
    2a98:	18c00117 	ldw	r3,4(r3)
    2a9c:	10c00035 	stwio	r3,0(r2)
    2aa0:	e0bff717 	ldw	r2,-36(fp)
    2aa4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2aa8:	e0bffb17 	ldw	r2,-20(fp)
    2aac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
    2ab0:	e0fffe17 	ldw	r3,-8(fp)
    2ab4:	e0bff417 	ldw	r2,-48(fp)
    2ab8:	1885c83a 	sub	r2,r3,r2
}
    2abc:	e037883a 	mov	sp,fp
    2ac0:	dfc00117 	ldw	ra,4(sp)
    2ac4:	df000017 	ldw	fp,0(sp)
    2ac8:	dec00204 	addi	sp,sp,8
    2acc:	f800283a 	ret

00002ad0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2ad0:	defffe04 	addi	sp,sp,-8
    2ad4:	dfc00115 	stw	ra,4(sp)
    2ad8:	df000015 	stw	fp,0(sp)
    2adc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2ae0:	00800034 	movhi	r2,0
    2ae4:	10907d04 	addi	r2,r2,16884
    2ae8:	10800017 	ldw	r2,0(r2)
    2aec:	10000526 	beq	r2,zero,2b04 <alt_get_errno+0x34>
    2af0:	00800034 	movhi	r2,0
    2af4:	10907d04 	addi	r2,r2,16884
    2af8:	10800017 	ldw	r2,0(r2)
    2afc:	103ee83a 	callr	r2
    2b00:	00000206 	br	2b0c <alt_get_errno+0x3c>
    2b04:	00800034 	movhi	r2,0
    2b08:	10923e04 	addi	r2,r2,18680
}
    2b0c:	e037883a 	mov	sp,fp
    2b10:	dfc00117 	ldw	ra,4(sp)
    2b14:	df000017 	ldw	fp,0(sp)
    2b18:	dec00204 	addi	sp,sp,8
    2b1c:	f800283a 	ret

00002b20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    2b20:	defffb04 	addi	sp,sp,-20
    2b24:	dfc00415 	stw	ra,16(sp)
    2b28:	df000315 	stw	fp,12(sp)
    2b2c:	df000304 	addi	fp,sp,12
    2b30:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    2b34:	e0bfff17 	ldw	r2,-4(fp)
    2b38:	10000616 	blt	r2,zero,2b54 <close+0x34>
    2b3c:	e0bfff17 	ldw	r2,-4(fp)
    2b40:	10c00324 	muli	r3,r2,12
    2b44:	00800034 	movhi	r2,0
    2b48:	108f1504 	addi	r2,r2,15444
    2b4c:	1885883a 	add	r2,r3,r2
    2b50:	00000106 	br	2b58 <close+0x38>
    2b54:	0005883a 	mov	r2,zero
    2b58:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    2b5c:	e0bffd17 	ldw	r2,-12(fp)
    2b60:	10001826 	beq	r2,zero,2bc4 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    2b64:	e0bffd17 	ldw	r2,-12(fp)
    2b68:	10800017 	ldw	r2,0(r2)
    2b6c:	10800417 	ldw	r2,16(r2)
    2b70:	10000626 	beq	r2,zero,2b8c <close+0x6c>
    2b74:	e0bffd17 	ldw	r2,-12(fp)
    2b78:	10800017 	ldw	r2,0(r2)
    2b7c:	10800417 	ldw	r2,16(r2)
    2b80:	e13ffd17 	ldw	r4,-12(fp)
    2b84:	103ee83a 	callr	r2
    2b88:	00000106 	br	2b90 <close+0x70>
    2b8c:	0005883a 	mov	r2,zero
    2b90:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    2b94:	e13fff17 	ldw	r4,-4(fp)
    2b98:	00031d80 	call	31d8 <alt_release_fd>
    if (rval < 0)
    2b9c:	e0bffe17 	ldw	r2,-8(fp)
    2ba0:	1000060e 	bge	r2,zero,2bbc <close+0x9c>
    {
      ALT_ERRNO = -rval;
    2ba4:	0002ad00 	call	2ad0 <alt_get_errno>
    2ba8:	e0fffe17 	ldw	r3,-8(fp)
    2bac:	00c7c83a 	sub	r3,zero,r3
    2bb0:	10c00015 	stw	r3,0(r2)
      return -1;
    2bb4:	00bfffc4 	movi	r2,-1
    2bb8:	00000606 	br	2bd4 <close+0xb4>
    }
    return 0;
    2bbc:	0005883a 	mov	r2,zero
    2bc0:	00000406 	br	2bd4 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    2bc4:	0002ad00 	call	2ad0 <alt_get_errno>
    2bc8:	00c01444 	movi	r3,81
    2bcc:	10c00015 	stw	r3,0(r2)
    return -1;
    2bd0:	00bfffc4 	movi	r2,-1
  }
}
    2bd4:	e037883a 	mov	sp,fp
    2bd8:	dfc00117 	ldw	ra,4(sp)
    2bdc:	df000017 	ldw	fp,0(sp)
    2be0:	dec00204 	addi	sp,sp,8
    2be4:	f800283a 	ret

00002be8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    2be8:	defffe04 	addi	sp,sp,-8
    2bec:	df000115 	stw	fp,4(sp)
    2bf0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    2bf4:	e03fff15 	stw	zero,-4(fp)
    2bf8:	00000506 	br	2c10 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    2bfc:	e0bfff17 	ldw	r2,-4(fp)
    2c00:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    2c04:	e0bfff17 	ldw	r2,-4(fp)
    2c08:	10800804 	addi	r2,r2,32
    2c0c:	e0bfff15 	stw	r2,-4(fp)
    2c10:	e0bfff17 	ldw	r2,-4(fp)
    2c14:	10820030 	cmpltui	r2,r2,2048
    2c18:	103ff81e 	bne	r2,zero,2bfc <_gp+0xffff6a28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    2c1c:	e037883a 	mov	sp,fp
    2c20:	df000017 	ldw	fp,0(sp)
    2c24:	dec00104 	addi	sp,sp,4
    2c28:	f800283a 	ret

00002c2c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    2c2c:	defffc04 	addi	sp,sp,-16
    2c30:	df000315 	stw	fp,12(sp)
    2c34:	df000304 	addi	fp,sp,12
    2c38:	e13ffd15 	stw	r4,-12(fp)
    2c3c:	e17ffe15 	stw	r5,-8(fp)
    2c40:	e1bfff15 	stw	r6,-4(fp)
  return len;
    2c44:	e0bfff17 	ldw	r2,-4(fp)
}
    2c48:	e037883a 	mov	sp,fp
    2c4c:	df000017 	ldw	fp,0(sp)
    2c50:	dec00104 	addi	sp,sp,4
    2c54:	f800283a 	ret

00002c58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2c58:	defffe04 	addi	sp,sp,-8
    2c5c:	dfc00115 	stw	ra,4(sp)
    2c60:	df000015 	stw	fp,0(sp)
    2c64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2c68:	00800034 	movhi	r2,0
    2c6c:	10907d04 	addi	r2,r2,16884
    2c70:	10800017 	ldw	r2,0(r2)
    2c74:	10000526 	beq	r2,zero,2c8c <alt_get_errno+0x34>
    2c78:	00800034 	movhi	r2,0
    2c7c:	10907d04 	addi	r2,r2,16884
    2c80:	10800017 	ldw	r2,0(r2)
    2c84:	103ee83a 	callr	r2
    2c88:	00000206 	br	2c94 <alt_get_errno+0x3c>
    2c8c:	00800034 	movhi	r2,0
    2c90:	10923e04 	addi	r2,r2,18680
}
    2c94:	e037883a 	mov	sp,fp
    2c98:	dfc00117 	ldw	ra,4(sp)
    2c9c:	df000017 	ldw	fp,0(sp)
    2ca0:	dec00204 	addi	sp,sp,8
    2ca4:	f800283a 	ret

00002ca8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    2ca8:	defffa04 	addi	sp,sp,-24
    2cac:	dfc00515 	stw	ra,20(sp)
    2cb0:	df000415 	stw	fp,16(sp)
    2cb4:	df000404 	addi	fp,sp,16
    2cb8:	e13ffe15 	stw	r4,-8(fp)
    2cbc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    2cc0:	e0bffe17 	ldw	r2,-8(fp)
    2cc4:	10000326 	beq	r2,zero,2cd4 <alt_dev_llist_insert+0x2c>
    2cc8:	e0bffe17 	ldw	r2,-8(fp)
    2ccc:	10800217 	ldw	r2,8(r2)
    2cd0:	1000051e 	bne	r2,zero,2ce8 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
    2cd4:	0002c580 	call	2c58 <alt_get_errno>
    2cd8:	00c00584 	movi	r3,22
    2cdc:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
    2ce0:	00bffa84 	movi	r2,-22
    2ce4:	00001306 	br	2d34 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    2ce8:	e0bffe17 	ldw	r2,-8(fp)
    2cec:	e0ffff17 	ldw	r3,-4(fp)
    2cf0:	e0fffc15 	stw	r3,-16(fp)
    2cf4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    2cf8:	e0bffd17 	ldw	r2,-12(fp)
    2cfc:	e0fffc17 	ldw	r3,-16(fp)
    2d00:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    2d04:	e0bffc17 	ldw	r2,-16(fp)
    2d08:	10c00017 	ldw	r3,0(r2)
    2d0c:	e0bffd17 	ldw	r2,-12(fp)
    2d10:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    2d14:	e0bffc17 	ldw	r2,-16(fp)
    2d18:	10800017 	ldw	r2,0(r2)
    2d1c:	e0fffd17 	ldw	r3,-12(fp)
    2d20:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    2d24:	e0bffc17 	ldw	r2,-16(fp)
    2d28:	e0fffd17 	ldw	r3,-12(fp)
    2d2c:	10c00015 	stw	r3,0(r2)

  return 0;  
    2d30:	0005883a 	mov	r2,zero
}
    2d34:	e037883a 	mov	sp,fp
    2d38:	dfc00117 	ldw	ra,4(sp)
    2d3c:	df000017 	ldw	fp,0(sp)
    2d40:	dec00204 	addi	sp,sp,8
    2d44:	f800283a 	ret

00002d48 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    2d48:	defffd04 	addi	sp,sp,-12
    2d4c:	dfc00215 	stw	ra,8(sp)
    2d50:	df000115 	stw	fp,4(sp)
    2d54:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2d58:	00800034 	movhi	r2,0
    2d5c:	108ecd04 	addi	r2,r2,15156
    2d60:	e0bfff15 	stw	r2,-4(fp)
    2d64:	00000606 	br	2d80 <_do_ctors+0x38>
        (*ctor) (); 
    2d68:	e0bfff17 	ldw	r2,-4(fp)
    2d6c:	10800017 	ldw	r2,0(r2)
    2d70:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    2d74:	e0bfff17 	ldw	r2,-4(fp)
    2d78:	10bfff04 	addi	r2,r2,-4
    2d7c:	e0bfff15 	stw	r2,-4(fp)
    2d80:	e0ffff17 	ldw	r3,-4(fp)
    2d84:	00800034 	movhi	r2,0
    2d88:	108ece04 	addi	r2,r2,15160
    2d8c:	18bff62e 	bgeu	r3,r2,2d68 <_gp+0xffff6b94>
        (*ctor) (); 
}
    2d90:	e037883a 	mov	sp,fp
    2d94:	dfc00117 	ldw	ra,4(sp)
    2d98:	df000017 	ldw	fp,0(sp)
    2d9c:	dec00204 	addi	sp,sp,8
    2da0:	f800283a 	ret

00002da4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    2da4:	defffd04 	addi	sp,sp,-12
    2da8:	dfc00215 	stw	ra,8(sp)
    2dac:	df000115 	stw	fp,4(sp)
    2db0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2db4:	00800034 	movhi	r2,0
    2db8:	108ecd04 	addi	r2,r2,15156
    2dbc:	e0bfff15 	stw	r2,-4(fp)
    2dc0:	00000606 	br	2ddc <_do_dtors+0x38>
        (*dtor) (); 
    2dc4:	e0bfff17 	ldw	r2,-4(fp)
    2dc8:	10800017 	ldw	r2,0(r2)
    2dcc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    2dd0:	e0bfff17 	ldw	r2,-4(fp)
    2dd4:	10bfff04 	addi	r2,r2,-4
    2dd8:	e0bfff15 	stw	r2,-4(fp)
    2ddc:	e0ffff17 	ldw	r3,-4(fp)
    2de0:	00800034 	movhi	r2,0
    2de4:	108ece04 	addi	r2,r2,15160
    2de8:	18bff62e 	bgeu	r3,r2,2dc4 <_gp+0xffff6bf0>
        (*dtor) (); 
}
    2dec:	e037883a 	mov	sp,fp
    2df0:	dfc00117 	ldw	ra,4(sp)
    2df4:	df000017 	ldw	fp,0(sp)
    2df8:	dec00204 	addi	sp,sp,8
    2dfc:	f800283a 	ret

00002e00 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    2e00:	defffe04 	addi	sp,sp,-8
    2e04:	dfc00115 	stw	ra,4(sp)
    2e08:	df000015 	stw	fp,0(sp)
    2e0c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    2e10:	0009883a 	mov	r4,zero
    2e14:	01440004 	movi	r5,4096
    2e18:	000364c0 	call	364c <alt_icache_flush>
#endif
}
    2e1c:	e037883a 	mov	sp,fp
    2e20:	dfc00117 	ldw	ra,4(sp)
    2e24:	df000017 	ldw	fp,0(sp)
    2e28:	dec00204 	addi	sp,sp,8
    2e2c:	f800283a 	ret

00002e30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2e30:	defff904 	addi	sp,sp,-28
    2e34:	dfc00615 	stw	ra,24(sp)
    2e38:	df000515 	stw	fp,20(sp)
    2e3c:	df000504 	addi	fp,sp,20
    2e40:	e13ffc15 	stw	r4,-16(fp)
    2e44:	e17ffd15 	stw	r5,-12(fp)
    2e48:	e1bffe15 	stw	r6,-8(fp)
    2e4c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2e50:	e13ffd17 	ldw	r4,-12(fp)
    2e54:	e17ffe17 	ldw	r5,-8(fp)
    2e58:	e1bfff17 	ldw	r6,-4(fp)
    2e5c:	00030840 	call	3084 <open>
    2e60:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2e64:	e0bffb17 	ldw	r2,-20(fp)
    2e68:	10001c16 	blt	r2,zero,2edc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    2e6c:	00c00034 	movhi	r3,0
    2e70:	18cf1504 	addi	r3,r3,15444
    2e74:	e0bffb17 	ldw	r2,-20(fp)
    2e78:	10800324 	muli	r2,r2,12
    2e7c:	1885883a 	add	r2,r3,r2
    2e80:	10c00017 	ldw	r3,0(r2)
    2e84:	e0bffc17 	ldw	r2,-16(fp)
    2e88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    2e8c:	00c00034 	movhi	r3,0
    2e90:	18cf1504 	addi	r3,r3,15444
    2e94:	e0bffb17 	ldw	r2,-20(fp)
    2e98:	10800324 	muli	r2,r2,12
    2e9c:	1885883a 	add	r2,r3,r2
    2ea0:	10800104 	addi	r2,r2,4
    2ea4:	10c00017 	ldw	r3,0(r2)
    2ea8:	e0bffc17 	ldw	r2,-16(fp)
    2eac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    2eb0:	00c00034 	movhi	r3,0
    2eb4:	18cf1504 	addi	r3,r3,15444
    2eb8:	e0bffb17 	ldw	r2,-20(fp)
    2ebc:	10800324 	muli	r2,r2,12
    2ec0:	1885883a 	add	r2,r3,r2
    2ec4:	10800204 	addi	r2,r2,8
    2ec8:	10c00017 	ldw	r3,0(r2)
    2ecc:	e0bffc17 	ldw	r2,-16(fp)
    2ed0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2ed4:	e13ffb17 	ldw	r4,-20(fp)
    2ed8:	00031d80 	call	31d8 <alt_release_fd>
  }
} 
    2edc:	e037883a 	mov	sp,fp
    2ee0:	dfc00117 	ldw	ra,4(sp)
    2ee4:	df000017 	ldw	fp,0(sp)
    2ee8:	dec00204 	addi	sp,sp,8
    2eec:	f800283a 	ret

00002ef0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2ef0:	defffb04 	addi	sp,sp,-20
    2ef4:	dfc00415 	stw	ra,16(sp)
    2ef8:	df000315 	stw	fp,12(sp)
    2efc:	df000304 	addi	fp,sp,12
    2f00:	e13ffd15 	stw	r4,-12(fp)
    2f04:	e17ffe15 	stw	r5,-8(fp)
    2f08:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2f0c:	01000034 	movhi	r4,0
    2f10:	210f1804 	addi	r4,r4,15456
    2f14:	e17ffd17 	ldw	r5,-12(fp)
    2f18:	01800044 	movi	r6,1
    2f1c:	01c07fc4 	movi	r7,511
    2f20:	0002e300 	call	2e30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2f24:	01000034 	movhi	r4,0
    2f28:	210f1504 	addi	r4,r4,15444
    2f2c:	e17ffe17 	ldw	r5,-8(fp)
    2f30:	000d883a 	mov	r6,zero
    2f34:	01c07fc4 	movi	r7,511
    2f38:	0002e300 	call	2e30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2f3c:	01000034 	movhi	r4,0
    2f40:	210f1b04 	addi	r4,r4,15468
    2f44:	e17fff17 	ldw	r5,-4(fp)
    2f48:	01800044 	movi	r6,1
    2f4c:	01c07fc4 	movi	r7,511
    2f50:	0002e300 	call	2e30 <alt_open_fd>
}  
    2f54:	e037883a 	mov	sp,fp
    2f58:	dfc00117 	ldw	ra,4(sp)
    2f5c:	df000017 	ldw	fp,0(sp)
    2f60:	dec00204 	addi	sp,sp,8
    2f64:	f800283a 	ret

00002f68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    2f68:	defffe04 	addi	sp,sp,-8
    2f6c:	dfc00115 	stw	ra,4(sp)
    2f70:	df000015 	stw	fp,0(sp)
    2f74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    2f78:	00800034 	movhi	r2,0
    2f7c:	10907d04 	addi	r2,r2,16884
    2f80:	10800017 	ldw	r2,0(r2)
    2f84:	10000526 	beq	r2,zero,2f9c <alt_get_errno+0x34>
    2f88:	00800034 	movhi	r2,0
    2f8c:	10907d04 	addi	r2,r2,16884
    2f90:	10800017 	ldw	r2,0(r2)
    2f94:	103ee83a 	callr	r2
    2f98:	00000206 	br	2fa4 <alt_get_errno+0x3c>
    2f9c:	00800034 	movhi	r2,0
    2fa0:	10923e04 	addi	r2,r2,18680
}
    2fa4:	e037883a 	mov	sp,fp
    2fa8:	dfc00117 	ldw	ra,4(sp)
    2fac:	df000017 	ldw	fp,0(sp)
    2fb0:	dec00204 	addi	sp,sp,8
    2fb4:	f800283a 	ret

00002fb8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    2fb8:	defffd04 	addi	sp,sp,-12
    2fbc:	df000215 	stw	fp,8(sp)
    2fc0:	df000204 	addi	fp,sp,8
    2fc4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    2fc8:	e0bfff17 	ldw	r2,-4(fp)
    2fcc:	10800217 	ldw	r2,8(r2)
    2fd0:	10d00034 	orhi	r3,r2,16384
    2fd4:	e0bfff17 	ldw	r2,-4(fp)
    2fd8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2fdc:	e03ffe15 	stw	zero,-8(fp)
    2fe0:	00001d06 	br	3058 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2fe4:	00c00034 	movhi	r3,0
    2fe8:	18cf1504 	addi	r3,r3,15444
    2fec:	e0bffe17 	ldw	r2,-8(fp)
    2ff0:	10800324 	muli	r2,r2,12
    2ff4:	1885883a 	add	r2,r3,r2
    2ff8:	10c00017 	ldw	r3,0(r2)
    2ffc:	e0bfff17 	ldw	r2,-4(fp)
    3000:	10800017 	ldw	r2,0(r2)
    3004:	1880111e 	bne	r3,r2,304c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    3008:	00c00034 	movhi	r3,0
    300c:	18cf1504 	addi	r3,r3,15444
    3010:	e0bffe17 	ldw	r2,-8(fp)
    3014:	10800324 	muli	r2,r2,12
    3018:	1885883a 	add	r2,r3,r2
    301c:	10800204 	addi	r2,r2,8
    3020:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    3024:	1000090e 	bge	r2,zero,304c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    3028:	e0bffe17 	ldw	r2,-8(fp)
    302c:	10c00324 	muli	r3,r2,12
    3030:	00800034 	movhi	r2,0
    3034:	108f1504 	addi	r2,r2,15444
    3038:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    303c:	e0bfff17 	ldw	r2,-4(fp)
    3040:	18800226 	beq	r3,r2,304c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    3044:	00bffcc4 	movi	r2,-13
    3048:	00000a06 	br	3074 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    304c:	e0bffe17 	ldw	r2,-8(fp)
    3050:	10800044 	addi	r2,r2,1
    3054:	e0bffe15 	stw	r2,-8(fp)
    3058:	00800034 	movhi	r2,0
    305c:	10907c04 	addi	r2,r2,16880
    3060:	10800017 	ldw	r2,0(r2)
    3064:	1007883a 	mov	r3,r2
    3068:	e0bffe17 	ldw	r2,-8(fp)
    306c:	18bfdd2e 	bgeu	r3,r2,2fe4 <_gp+0xffff6e10>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    3070:	0005883a 	mov	r2,zero
}
    3074:	e037883a 	mov	sp,fp
    3078:	df000017 	ldw	fp,0(sp)
    307c:	dec00104 	addi	sp,sp,4
    3080:	f800283a 	ret

00003084 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    3084:	defff604 	addi	sp,sp,-40
    3088:	dfc00915 	stw	ra,36(sp)
    308c:	df000815 	stw	fp,32(sp)
    3090:	df000804 	addi	fp,sp,32
    3094:	e13ffd15 	stw	r4,-12(fp)
    3098:	e17ffe15 	stw	r5,-8(fp)
    309c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    30a0:	00bfffc4 	movi	r2,-1
    30a4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    30a8:	00bffb44 	movi	r2,-19
    30ac:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    30b0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    30b4:	e13ffd17 	ldw	r4,-12(fp)
    30b8:	01400034 	movhi	r5,0
    30bc:	29507a04 	addi	r5,r5,16872
    30c0:	00033f40 	call	33f4 <alt_find_dev>
    30c4:	e0bff815 	stw	r2,-32(fp)
    30c8:	e0bff817 	ldw	r2,-32(fp)
    30cc:	1000051e 	bne	r2,zero,30e4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    30d0:	e13ffd17 	ldw	r4,-12(fp)
    30d4:	00034840 	call	3484 <alt_find_file>
    30d8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    30dc:	00800044 	movi	r2,1
    30e0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    30e4:	e0bff817 	ldw	r2,-32(fp)
    30e8:	10002926 	beq	r2,zero,3190 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
    30ec:	e13ff817 	ldw	r4,-32(fp)
    30f0:	00035980 	call	3598 <alt_get_fd>
    30f4:	e0bff915 	stw	r2,-28(fp)
    30f8:	e0bff917 	ldw	r2,-28(fp)
    30fc:	1000030e 	bge	r2,zero,310c <open+0x88>
    {
      status = index;
    3100:	e0bff917 	ldw	r2,-28(fp)
    3104:	e0bffa15 	stw	r2,-24(fp)
    3108:	00002306 	br	3198 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
    310c:	e0bff917 	ldw	r2,-28(fp)
    3110:	10c00324 	muli	r3,r2,12
    3114:	00800034 	movhi	r2,0
    3118:	108f1504 	addi	r2,r2,15444
    311c:	1885883a 	add	r2,r3,r2
    3120:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    3124:	e0fffe17 	ldw	r3,-8(fp)
    3128:	00900034 	movhi	r2,16384
    312c:	10bfffc4 	addi	r2,r2,-1
    3130:	1886703a 	and	r3,r3,r2
    3134:	e0bffc17 	ldw	r2,-16(fp)
    3138:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    313c:	e0bffb17 	ldw	r2,-20(fp)
    3140:	1000051e 	bne	r2,zero,3158 <open+0xd4>
    3144:	e13ffc17 	ldw	r4,-16(fp)
    3148:	0002fb80 	call	2fb8 <alt_file_locked>
    314c:	e0bffa15 	stw	r2,-24(fp)
    3150:	e0bffa17 	ldw	r2,-24(fp)
    3154:	10001016 	blt	r2,zero,3198 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    3158:	e0bff817 	ldw	r2,-32(fp)
    315c:	10800317 	ldw	r2,12(r2)
    3160:	10000826 	beq	r2,zero,3184 <open+0x100>
    3164:	e0bff817 	ldw	r2,-32(fp)
    3168:	10800317 	ldw	r2,12(r2)
    316c:	e13ffc17 	ldw	r4,-16(fp)
    3170:	e17ffd17 	ldw	r5,-12(fp)
    3174:	e1bffe17 	ldw	r6,-8(fp)
    3178:	e1ffff17 	ldw	r7,-4(fp)
    317c:	103ee83a 	callr	r2
    3180:	00000106 	br	3188 <open+0x104>
    3184:	0005883a 	mov	r2,zero
    3188:	e0bffa15 	stw	r2,-24(fp)
    318c:	00000206 	br	3198 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
    3190:	00bffb44 	movi	r2,-19
    3194:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    3198:	e0bffa17 	ldw	r2,-24(fp)
    319c:	1000080e 	bge	r2,zero,31c0 <open+0x13c>
  {
    alt_release_fd (index);  
    31a0:	e13ff917 	ldw	r4,-28(fp)
    31a4:	00031d80 	call	31d8 <alt_release_fd>
    ALT_ERRNO = -status;
    31a8:	0002f680 	call	2f68 <alt_get_errno>
    31ac:	e0fffa17 	ldw	r3,-24(fp)
    31b0:	00c7c83a 	sub	r3,zero,r3
    31b4:	10c00015 	stw	r3,0(r2)
    return -1;
    31b8:	00bfffc4 	movi	r2,-1
    31bc:	00000106 	br	31c4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    31c0:	e0bff917 	ldw	r2,-28(fp)
}
    31c4:	e037883a 	mov	sp,fp
    31c8:	dfc00117 	ldw	ra,4(sp)
    31cc:	df000017 	ldw	fp,0(sp)
    31d0:	dec00204 	addi	sp,sp,8
    31d4:	f800283a 	ret

000031d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    31d8:	defffe04 	addi	sp,sp,-8
    31dc:	df000115 	stw	fp,4(sp)
    31e0:	df000104 	addi	fp,sp,4
    31e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    31e8:	e0bfff17 	ldw	r2,-4(fp)
    31ec:	108000d0 	cmplti	r2,r2,3
    31f0:	10000d1e 	bne	r2,zero,3228 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    31f4:	00c00034 	movhi	r3,0
    31f8:	18cf1504 	addi	r3,r3,15444
    31fc:	e0bfff17 	ldw	r2,-4(fp)
    3200:	10800324 	muli	r2,r2,12
    3204:	1885883a 	add	r2,r3,r2
    3208:	10800204 	addi	r2,r2,8
    320c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    3210:	00c00034 	movhi	r3,0
    3214:	18cf1504 	addi	r3,r3,15444
    3218:	e0bfff17 	ldw	r2,-4(fp)
    321c:	10800324 	muli	r2,r2,12
    3220:	1885883a 	add	r2,r3,r2
    3224:	10000015 	stw	zero,0(r2)
  }
}
    3228:	e037883a 	mov	sp,fp
    322c:	df000017 	ldw	fp,0(sp)
    3230:	dec00104 	addi	sp,sp,4
    3234:	f800283a 	ret

00003238 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    3238:	defffa04 	addi	sp,sp,-24
    323c:	df000515 	stw	fp,20(sp)
    3240:	df000504 	addi	fp,sp,20
    3244:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    3248:	0005303a 	rdctl	r2,status
    324c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    3250:	e0fffc17 	ldw	r3,-16(fp)
    3254:	00bfff84 	movi	r2,-2
    3258:	1884703a 	and	r2,r3,r2
    325c:	1001703a 	wrctl	status,r2
  
  return context;
    3260:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    3264:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    3268:	e0bfff17 	ldw	r2,-4(fp)
    326c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    3270:	e0bffd17 	ldw	r2,-12(fp)
    3274:	10800017 	ldw	r2,0(r2)
    3278:	e0fffd17 	ldw	r3,-12(fp)
    327c:	18c00117 	ldw	r3,4(r3)
    3280:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    3284:	e0bffd17 	ldw	r2,-12(fp)
    3288:	10800117 	ldw	r2,4(r2)
    328c:	e0fffd17 	ldw	r3,-12(fp)
    3290:	18c00017 	ldw	r3,0(r3)
    3294:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    3298:	e0bffd17 	ldw	r2,-12(fp)
    329c:	e0fffd17 	ldw	r3,-12(fp)
    32a0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    32a4:	e0bffd17 	ldw	r2,-12(fp)
    32a8:	e0fffd17 	ldw	r3,-12(fp)
    32ac:	10c00015 	stw	r3,0(r2)
    32b0:	e0bffb17 	ldw	r2,-20(fp)
    32b4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    32b8:	e0bffe17 	ldw	r2,-8(fp)
    32bc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    32c0:	e037883a 	mov	sp,fp
    32c4:	df000017 	ldw	fp,0(sp)
    32c8:	dec00104 	addi	sp,sp,4
    32cc:	f800283a 	ret

000032d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    32d0:	defffb04 	addi	sp,sp,-20
    32d4:	dfc00415 	stw	ra,16(sp)
    32d8:	df000315 	stw	fp,12(sp)
    32dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    32e0:	d0a00917 	ldw	r2,-32732(gp)
    32e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    32e8:	d0a1c817 	ldw	r2,-30944(gp)
    32ec:	10800044 	addi	r2,r2,1
    32f0:	d0a1c815 	stw	r2,-30944(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    32f4:	00002e06 	br	33b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    32f8:	e0bffd17 	ldw	r2,-12(fp)
    32fc:	10800017 	ldw	r2,0(r2)
    3300:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    3304:	e0bffd17 	ldw	r2,-12(fp)
    3308:	10800403 	ldbu	r2,16(r2)
    330c:	10803fcc 	andi	r2,r2,255
    3310:	10000426 	beq	r2,zero,3324 <alt_tick+0x54>
    3314:	d0a1c817 	ldw	r2,-30944(gp)
    3318:	1000021e 	bne	r2,zero,3324 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    331c:	e0bffd17 	ldw	r2,-12(fp)
    3320:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    3324:	e0bffd17 	ldw	r2,-12(fp)
    3328:	10800217 	ldw	r2,8(r2)
    332c:	d0e1c817 	ldw	r3,-30944(gp)
    3330:	18801d36 	bltu	r3,r2,33a8 <alt_tick+0xd8>
    3334:	e0bffd17 	ldw	r2,-12(fp)
    3338:	10800403 	ldbu	r2,16(r2)
    333c:	10803fcc 	andi	r2,r2,255
    3340:	1000191e 	bne	r2,zero,33a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    3344:	e0bffd17 	ldw	r2,-12(fp)
    3348:	10c00317 	ldw	r3,12(r2)
    334c:	e0bffd17 	ldw	r2,-12(fp)
    3350:	10800517 	ldw	r2,20(r2)
    3354:	1009883a 	mov	r4,r2
    3358:	183ee83a 	callr	r3
    335c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    3360:	e0bfff17 	ldw	r2,-4(fp)
    3364:	1000031e 	bne	r2,zero,3374 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    3368:	e13ffd17 	ldw	r4,-12(fp)
    336c:	00032380 	call	3238 <alt_alarm_stop>
    3370:	00000d06 	br	33a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    3374:	e0bffd17 	ldw	r2,-12(fp)
    3378:	10c00217 	ldw	r3,8(r2)
    337c:	e0bfff17 	ldw	r2,-4(fp)
    3380:	1887883a 	add	r3,r3,r2
    3384:	e0bffd17 	ldw	r2,-12(fp)
    3388:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    338c:	e0bffd17 	ldw	r2,-12(fp)
    3390:	10c00217 	ldw	r3,8(r2)
    3394:	d0a1c817 	ldw	r2,-30944(gp)
    3398:	1880032e 	bgeu	r3,r2,33a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    339c:	e0bffd17 	ldw	r2,-12(fp)
    33a0:	00c00044 	movi	r3,1
    33a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    33a8:	e0bffe17 	ldw	r2,-8(fp)
    33ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    33b0:	e0fffd17 	ldw	r3,-12(fp)
    33b4:	d0a00904 	addi	r2,gp,-32732
    33b8:	18bfcf1e 	bne	r3,r2,32f8 <_gp+0xffff7124>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    33bc:	0001883a 	nop
}
    33c0:	e037883a 	mov	sp,fp
    33c4:	dfc00117 	ldw	ra,4(sp)
    33c8:	df000017 	ldw	fp,0(sp)
    33cc:	dec00204 	addi	sp,sp,8
    33d0:	f800283a 	ret

000033d4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    33d4:	deffff04 	addi	sp,sp,-4
    33d8:	df000015 	stw	fp,0(sp)
    33dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    33e0:	000170fa 	wrctl	ienable,zero
}
    33e4:	e037883a 	mov	sp,fp
    33e8:	df000017 	ldw	fp,0(sp)
    33ec:	dec00104 	addi	sp,sp,4
    33f0:	f800283a 	ret

000033f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    33f4:	defffa04 	addi	sp,sp,-24
    33f8:	dfc00515 	stw	ra,20(sp)
    33fc:	df000415 	stw	fp,16(sp)
    3400:	df000404 	addi	fp,sp,16
    3404:	e13ffe15 	stw	r4,-8(fp)
    3408:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    340c:	e0bfff17 	ldw	r2,-4(fp)
    3410:	10800017 	ldw	r2,0(r2)
    3414:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    3418:	e13ffe17 	ldw	r4,-8(fp)
    341c:	00037a00 	call	37a0 <strlen>
    3420:	10800044 	addi	r2,r2,1
    3424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3428:	00000d06 	br	3460 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    342c:	e0bffc17 	ldw	r2,-16(fp)
    3430:	10c00217 	ldw	r3,8(r2)
    3434:	e0bffd17 	ldw	r2,-12(fp)
    3438:	1809883a 	mov	r4,r3
    343c:	e17ffe17 	ldw	r5,-8(fp)
    3440:	100d883a 	mov	r6,r2
    3444:	00037240 	call	3724 <memcmp>
    3448:	1000021e 	bne	r2,zero,3454 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    344c:	e0bffc17 	ldw	r2,-16(fp)
    3450:	00000706 	br	3470 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    3454:	e0bffc17 	ldw	r2,-16(fp)
    3458:	10800017 	ldw	r2,0(r2)
    345c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    3460:	e0fffc17 	ldw	r3,-16(fp)
    3464:	e0bfff17 	ldw	r2,-4(fp)
    3468:	18bff01e 	bne	r3,r2,342c <_gp+0xffff7258>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    346c:	0005883a 	mov	r2,zero
}
    3470:	e037883a 	mov	sp,fp
    3474:	dfc00117 	ldw	ra,4(sp)
    3478:	df000017 	ldw	fp,0(sp)
    347c:	dec00204 	addi	sp,sp,8
    3480:	f800283a 	ret

00003484 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    3484:	defffb04 	addi	sp,sp,-20
    3488:	dfc00415 	stw	ra,16(sp)
    348c:	df000315 	stw	fp,12(sp)
    3490:	df000304 	addi	fp,sp,12
    3494:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    3498:	00800034 	movhi	r2,0
    349c:	10907804 	addi	r2,r2,16864
    34a0:	10800017 	ldw	r2,0(r2)
    34a4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    34a8:	00003106 	br	3570 <alt_find_file+0xec>
  {
    len = strlen(next->name);
    34ac:	e0bffd17 	ldw	r2,-12(fp)
    34b0:	10800217 	ldw	r2,8(r2)
    34b4:	1009883a 	mov	r4,r2
    34b8:	00037a00 	call	37a0 <strlen>
    34bc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    34c0:	e0bffd17 	ldw	r2,-12(fp)
    34c4:	10c00217 	ldw	r3,8(r2)
    34c8:	e0bffe17 	ldw	r2,-8(fp)
    34cc:	10bfffc4 	addi	r2,r2,-1
    34d0:	1885883a 	add	r2,r3,r2
    34d4:	10800003 	ldbu	r2,0(r2)
    34d8:	10803fcc 	andi	r2,r2,255
    34dc:	1080201c 	xori	r2,r2,128
    34e0:	10bfe004 	addi	r2,r2,-128
    34e4:	10800bd8 	cmpnei	r2,r2,47
    34e8:	1000031e 	bne	r2,zero,34f8 <alt_find_file+0x74>
    {
      len -= 1;
    34ec:	e0bffe17 	ldw	r2,-8(fp)
    34f0:	10bfffc4 	addi	r2,r2,-1
    34f4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    34f8:	e0bffe17 	ldw	r2,-8(fp)
    34fc:	e0ffff17 	ldw	r3,-4(fp)
    3500:	1885883a 	add	r2,r3,r2
    3504:	10800003 	ldbu	r2,0(r2)
    3508:	10803fcc 	andi	r2,r2,255
    350c:	1080201c 	xori	r2,r2,128
    3510:	10bfe004 	addi	r2,r2,-128
    3514:	10800be0 	cmpeqi	r2,r2,47
    3518:	1000081e 	bne	r2,zero,353c <alt_find_file+0xb8>
    351c:	e0bffe17 	ldw	r2,-8(fp)
    3520:	e0ffff17 	ldw	r3,-4(fp)
    3524:	1885883a 	add	r2,r3,r2
    3528:	10800003 	ldbu	r2,0(r2)
    352c:	10803fcc 	andi	r2,r2,255
    3530:	1080201c 	xori	r2,r2,128
    3534:	10bfe004 	addi	r2,r2,-128
    3538:	10000a1e 	bne	r2,zero,3564 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    353c:	e0bffd17 	ldw	r2,-12(fp)
    3540:	10c00217 	ldw	r3,8(r2)
    3544:	e0bffe17 	ldw	r2,-8(fp)
    3548:	1809883a 	mov	r4,r3
    354c:	e17fff17 	ldw	r5,-4(fp)
    3550:	100d883a 	mov	r6,r2
    3554:	00037240 	call	3724 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    3558:	1000021e 	bne	r2,zero,3564 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    355c:	e0bffd17 	ldw	r2,-12(fp)
    3560:	00000806 	br	3584 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    3564:	e0bffd17 	ldw	r2,-12(fp)
    3568:	10800017 	ldw	r2,0(r2)
    356c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    3570:	e0fffd17 	ldw	r3,-12(fp)
    3574:	00800034 	movhi	r2,0
    3578:	10907804 	addi	r2,r2,16864
    357c:	18bfcb1e 	bne	r3,r2,34ac <_gp+0xffff72d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    3580:	0005883a 	mov	r2,zero
}
    3584:	e037883a 	mov	sp,fp
    3588:	dfc00117 	ldw	ra,4(sp)
    358c:	df000017 	ldw	fp,0(sp)
    3590:	dec00204 	addi	sp,sp,8
    3594:	f800283a 	ret

00003598 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    3598:	defffc04 	addi	sp,sp,-16
    359c:	df000315 	stw	fp,12(sp)
    35a0:	df000304 	addi	fp,sp,12
    35a4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    35a8:	00bffa04 	movi	r2,-24
    35ac:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    35b0:	e03ffd15 	stw	zero,-12(fp)
    35b4:	00001d06 	br	362c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
    35b8:	00c00034 	movhi	r3,0
    35bc:	18cf1504 	addi	r3,r3,15444
    35c0:	e0bffd17 	ldw	r2,-12(fp)
    35c4:	10800324 	muli	r2,r2,12
    35c8:	1885883a 	add	r2,r3,r2
    35cc:	10800017 	ldw	r2,0(r2)
    35d0:	1000131e 	bne	r2,zero,3620 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
    35d4:	00c00034 	movhi	r3,0
    35d8:	18cf1504 	addi	r3,r3,15444
    35dc:	e0bffd17 	ldw	r2,-12(fp)
    35e0:	10800324 	muli	r2,r2,12
    35e4:	1885883a 	add	r2,r3,r2
    35e8:	e0ffff17 	ldw	r3,-4(fp)
    35ec:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    35f0:	00800034 	movhi	r2,0
    35f4:	10907c04 	addi	r2,r2,16880
    35f8:	10c00017 	ldw	r3,0(r2)
    35fc:	e0bffd17 	ldw	r2,-12(fp)
    3600:	1880040e 	bge	r3,r2,3614 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
    3604:	00800034 	movhi	r2,0
    3608:	10907c04 	addi	r2,r2,16880
    360c:	e0fffd17 	ldw	r3,-12(fp)
    3610:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    3614:	e0bffd17 	ldw	r2,-12(fp)
    3618:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    361c:	00000606 	br	3638 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    3620:	e0bffd17 	ldw	r2,-12(fp)
    3624:	10800044 	addi	r2,r2,1
    3628:	e0bffd15 	stw	r2,-12(fp)
    362c:	e0bffd17 	ldw	r2,-12(fp)
    3630:	10800810 	cmplti	r2,r2,32
    3634:	103fe01e 	bne	r2,zero,35b8 <_gp+0xffff73e4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    3638:	e0bffe17 	ldw	r2,-8(fp)
}
    363c:	e037883a 	mov	sp,fp
    3640:	df000017 	ldw	fp,0(sp)
    3644:	dec00104 	addi	sp,sp,4
    3648:	f800283a 	ret

0000364c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    364c:	defffb04 	addi	sp,sp,-20
    3650:	df000415 	stw	fp,16(sp)
    3654:	df000404 	addi	fp,sp,16
    3658:	e13ffe15 	stw	r4,-8(fp)
    365c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    3660:	e0bfff17 	ldw	r2,-4(fp)
    3664:	10840070 	cmpltui	r2,r2,4097
    3668:	1000021e 	bne	r2,zero,3674 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    366c:	00840004 	movi	r2,4096
    3670:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    3674:	e0fffe17 	ldw	r3,-8(fp)
    3678:	e0bfff17 	ldw	r2,-4(fp)
    367c:	1885883a 	add	r2,r3,r2
    3680:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3684:	e0bffe17 	ldw	r2,-8(fp)
    3688:	e0bffc15 	stw	r2,-16(fp)
    368c:	00000506 	br	36a4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    3690:	e0bffc17 	ldw	r2,-16(fp)
    3694:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    3698:	e0bffc17 	ldw	r2,-16(fp)
    369c:	10800804 	addi	r2,r2,32
    36a0:	e0bffc15 	stw	r2,-16(fp)
    36a4:	e0fffc17 	ldw	r3,-16(fp)
    36a8:	e0bffd17 	ldw	r2,-12(fp)
    36ac:	18bff836 	bltu	r3,r2,3690 <_gp+0xffff74bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    36b0:	e0bffe17 	ldw	r2,-8(fp)
    36b4:	108007cc 	andi	r2,r2,31
    36b8:	10000226 	beq	r2,zero,36c4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    36bc:	e0bffc17 	ldw	r2,-16(fp)
    36c0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    36c4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    36c8:	e037883a 	mov	sp,fp
    36cc:	df000017 	ldw	fp,0(sp)
    36d0:	dec00104 	addi	sp,sp,4
    36d4:	f800283a 	ret

000036d8 <atexit>:
    36d8:	200b883a 	mov	r5,r4
    36dc:	000d883a 	mov	r6,zero
    36e0:	0009883a 	mov	r4,zero
    36e4:	000f883a 	mov	r7,zero
    36e8:	000382c1 	jmpi	382c <__register_exitproc>

000036ec <exit>:
    36ec:	defffe04 	addi	sp,sp,-8
    36f0:	000b883a 	mov	r5,zero
    36f4:	dc000015 	stw	r16,0(sp)
    36f8:	dfc00115 	stw	ra,4(sp)
    36fc:	2021883a 	mov	r16,r4
    3700:	000395c0 	call	395c <__call_exitprocs>
    3704:	00800034 	movhi	r2,0
    3708:	10908004 	addi	r2,r2,16896
    370c:	11000017 	ldw	r4,0(r2)
    3710:	20800f17 	ldw	r2,60(r4)
    3714:	10000126 	beq	r2,zero,371c <exit+0x30>
    3718:	103ee83a 	callr	r2
    371c:	8009883a 	mov	r4,r16
    3720:	0003afc0 	call	3afc <_exit>

00003724 <memcmp>:
    3724:	01c000c4 	movi	r7,3
    3728:	3980192e 	bgeu	r7,r6,3790 <memcmp+0x6c>
    372c:	2904b03a 	or	r2,r5,r4
    3730:	11c4703a 	and	r2,r2,r7
    3734:	10000f26 	beq	r2,zero,3774 <memcmp+0x50>
    3738:	20c00003 	ldbu	r3,0(r4)
    373c:	28800003 	ldbu	r2,0(r5)
    3740:	1880151e 	bne	r3,r2,3798 <memcmp+0x74>
    3744:	31bfff84 	addi	r6,r6,-2
    3748:	01ffffc4 	movi	r7,-1
    374c:	00000406 	br	3760 <memcmp+0x3c>
    3750:	20c00003 	ldbu	r3,0(r4)
    3754:	28800003 	ldbu	r2,0(r5)
    3758:	31bfffc4 	addi	r6,r6,-1
    375c:	18800e1e 	bne	r3,r2,3798 <memcmp+0x74>
    3760:	21000044 	addi	r4,r4,1
    3764:	29400044 	addi	r5,r5,1
    3768:	31fff91e 	bne	r6,r7,3750 <_gp+0xffff757c>
    376c:	0005883a 	mov	r2,zero
    3770:	f800283a 	ret
    3774:	20c00017 	ldw	r3,0(r4)
    3778:	28800017 	ldw	r2,0(r5)
    377c:	1880041e 	bne	r3,r2,3790 <memcmp+0x6c>
    3780:	31bfff04 	addi	r6,r6,-4
    3784:	21000104 	addi	r4,r4,4
    3788:	29400104 	addi	r5,r5,4
    378c:	39bff936 	bltu	r7,r6,3774 <_gp+0xffff75a0>
    3790:	303fe91e 	bne	r6,zero,3738 <_gp+0xffff7564>
    3794:	003ff506 	br	376c <_gp+0xffff7598>
    3798:	1885c83a 	sub	r2,r3,r2
    379c:	f800283a 	ret

000037a0 <strlen>:
    37a0:	208000cc 	andi	r2,r4,3
    37a4:	10001f1e 	bne	r2,zero,3824 <strlen+0x84>
    37a8:	20800017 	ldw	r2,0(r4)
    37ac:	01ffbff4 	movhi	r7,65279
    37b0:	39ffbfc4 	addi	r7,r7,-257
    37b4:	01a02074 	movhi	r6,32897
    37b8:	31a02004 	addi	r6,r6,-32640
    37bc:	11c7883a 	add	r3,r2,r7
    37c0:	0084303a 	nor	r2,zero,r2
    37c4:	1886703a 	and	r3,r3,r2
    37c8:	1986703a 	and	r3,r3,r6
    37cc:	2005883a 	mov	r2,r4
    37d0:	1800101e 	bne	r3,zero,3814 <strlen+0x74>
    37d4:	10800104 	addi	r2,r2,4
    37d8:	10c00017 	ldw	r3,0(r2)
    37dc:	19cb883a 	add	r5,r3,r7
    37e0:	00c6303a 	nor	r3,zero,r3
    37e4:	28c6703a 	and	r3,r5,r3
    37e8:	1986703a 	and	r3,r3,r6
    37ec:	1800091e 	bne	r3,zero,3814 <strlen+0x74>
    37f0:	10800104 	addi	r2,r2,4
    37f4:	10c00017 	ldw	r3,0(r2)
    37f8:	19cb883a 	add	r5,r3,r7
    37fc:	00c6303a 	nor	r3,zero,r3
    3800:	28c6703a 	and	r3,r5,r3
    3804:	1986703a 	and	r3,r3,r6
    3808:	183ff226 	beq	r3,zero,37d4 <_gp+0xffff7600>
    380c:	00000106 	br	3814 <strlen+0x74>
    3810:	10800044 	addi	r2,r2,1
    3814:	10c00007 	ldb	r3,0(r2)
    3818:	183ffd1e 	bne	r3,zero,3810 <_gp+0xffff763c>
    381c:	1105c83a 	sub	r2,r2,r4
    3820:	f800283a 	ret
    3824:	2005883a 	mov	r2,r4
    3828:	003ffa06 	br	3814 <_gp+0xffff7640>

0000382c <__register_exitproc>:
    382c:	defffa04 	addi	sp,sp,-24
    3830:	00800034 	movhi	r2,0
    3834:	10908004 	addi	r2,r2,16896
    3838:	dc000315 	stw	r16,12(sp)
    383c:	14000017 	ldw	r16,0(r2)
    3840:	dc400415 	stw	r17,16(sp)
    3844:	dfc00515 	stw	ra,20(sp)
    3848:	80805217 	ldw	r2,328(r16)
    384c:	2023883a 	mov	r17,r4
    3850:	10003e26 	beq	r2,zero,394c <__register_exitproc+0x120>
    3854:	10c00117 	ldw	r3,4(r2)
    3858:	020007c4 	movi	r8,31
    385c:	40c0180e 	bge	r8,r3,38c0 <__register_exitproc+0x94>
    3860:	00800034 	movhi	r2,0
    3864:	10800004 	addi	r2,r2,0
    3868:	1000061e 	bne	r2,zero,3884 <__register_exitproc+0x58>
    386c:	00bfffc4 	movi	r2,-1
    3870:	dfc00517 	ldw	ra,20(sp)
    3874:	dc400417 	ldw	r17,16(sp)
    3878:	dc000317 	ldw	r16,12(sp)
    387c:	dec00604 	addi	sp,sp,24
    3880:	f800283a 	ret
    3884:	01006404 	movi	r4,400
    3888:	d9400015 	stw	r5,0(sp)
    388c:	d9800115 	stw	r6,4(sp)
    3890:	d9c00215 	stw	r7,8(sp)
    3894:	00000000 	call	0 <__alt_mem_ram_cpu>
    3898:	d9400017 	ldw	r5,0(sp)
    389c:	d9800117 	ldw	r6,4(sp)
    38a0:	d9c00217 	ldw	r7,8(sp)
    38a4:	103ff126 	beq	r2,zero,386c <_gp+0xffff7698>
    38a8:	80c05217 	ldw	r3,328(r16)
    38ac:	10000115 	stw	zero,4(r2)
    38b0:	10c00015 	stw	r3,0(r2)
    38b4:	80805215 	stw	r2,328(r16)
    38b8:	10006215 	stw	zero,392(r2)
    38bc:	10006315 	stw	zero,396(r2)
    38c0:	10c00117 	ldw	r3,4(r2)
    38c4:	88000d1e 	bne	r17,zero,38fc <__register_exitproc+0xd0>
    38c8:	19000084 	addi	r4,r3,2
    38cc:	2109883a 	add	r4,r4,r4
    38d0:	18c00044 	addi	r3,r3,1
    38d4:	2109883a 	add	r4,r4,r4
    38d8:	1109883a 	add	r4,r2,r4
    38dc:	10c00115 	stw	r3,4(r2)
    38e0:	0005883a 	mov	r2,zero
    38e4:	21400015 	stw	r5,0(r4)
    38e8:	dfc00517 	ldw	ra,20(sp)
    38ec:	dc400417 	ldw	r17,16(sp)
    38f0:	dc000317 	ldw	r16,12(sp)
    38f4:	dec00604 	addi	sp,sp,24
    38f8:	f800283a 	ret
    38fc:	02400044 	movi	r9,1
    3900:	12806217 	ldw	r10,392(r2)
    3904:	48d2983a 	sll	r9,r9,r3
    3908:	19000804 	addi	r4,r3,32
    390c:	18d1883a 	add	r8,r3,r3
    3910:	2109883a 	add	r4,r4,r4
    3914:	4211883a 	add	r8,r8,r8
    3918:	2109883a 	add	r4,r4,r4
    391c:	1109883a 	add	r4,r2,r4
    3920:	1211883a 	add	r8,r2,r8
    3924:	5254b03a 	or	r10,r10,r9
    3928:	21c02215 	stw	r7,136(r4)
    392c:	41802215 	stw	r6,136(r8)
    3930:	12806215 	stw	r10,392(r2)
    3934:	01000084 	movi	r4,2
    3938:	893fe31e 	bne	r17,r4,38c8 <_gp+0xffff76f4>
    393c:	11006317 	ldw	r4,396(r2)
    3940:	2252b03a 	or	r9,r4,r9
    3944:	12406315 	stw	r9,396(r2)
    3948:	003fdf06 	br	38c8 <_gp+0xffff76f4>
    394c:	00800034 	movhi	r2,0
    3950:	1092d904 	addi	r2,r2,19300
    3954:	80805215 	stw	r2,328(r16)
    3958:	003fbe06 	br	3854 <_gp+0xffff7680>

0000395c <__call_exitprocs>:
    395c:	00800034 	movhi	r2,0
    3960:	10908004 	addi	r2,r2,16896
    3964:	10800017 	ldw	r2,0(r2)
    3968:	defff304 	addi	sp,sp,-52
    396c:	df000b15 	stw	fp,44(sp)
    3970:	d8800015 	stw	r2,0(sp)
    3974:	10805204 	addi	r2,r2,328
    3978:	dd400815 	stw	r21,32(sp)
    397c:	dfc00c15 	stw	ra,48(sp)
    3980:	ddc00a15 	stw	r23,40(sp)
    3984:	dd800915 	stw	r22,36(sp)
    3988:	dd000715 	stw	r20,28(sp)
    398c:	dcc00615 	stw	r19,24(sp)
    3990:	dc800515 	stw	r18,20(sp)
    3994:	dc400415 	stw	r17,16(sp)
    3998:	dc000315 	stw	r16,12(sp)
    399c:	d9000115 	stw	r4,4(sp)
    39a0:	2839883a 	mov	fp,r5
    39a4:	d8800215 	stw	r2,8(sp)
    39a8:	057fffc4 	movi	r21,-1
    39ac:	d8800017 	ldw	r2,0(sp)
    39b0:	ddc00217 	ldw	r23,8(sp)
    39b4:	14805217 	ldw	r18,328(r2)
    39b8:	90001726 	beq	r18,zero,3a18 <__call_exitprocs+0xbc>
    39bc:	94400117 	ldw	r17,4(r18)
    39c0:	8c3fffc4 	addi	r16,r17,-1
    39c4:	80001116 	blt	r16,zero,3a0c <__call_exitprocs+0xb0>
    39c8:	8c400044 	addi	r17,r17,1
    39cc:	8427883a 	add	r19,r16,r16
    39d0:	8c63883a 	add	r17,r17,r17
    39d4:	95802204 	addi	r22,r18,136
    39d8:	9ce7883a 	add	r19,r19,r19
    39dc:	8c63883a 	add	r17,r17,r17
    39e0:	b4e7883a 	add	r19,r22,r19
    39e4:	9463883a 	add	r17,r18,r17
    39e8:	e0001726 	beq	fp,zero,3a48 <__call_exitprocs+0xec>
    39ec:	8c87c83a 	sub	r3,r17,r18
    39f0:	b0c7883a 	add	r3,r22,r3
    39f4:	18c01e17 	ldw	r3,120(r3)
    39f8:	1f001326 	beq	r3,fp,3a48 <__call_exitprocs+0xec>
    39fc:	843fffc4 	addi	r16,r16,-1
    3a00:	9cffff04 	addi	r19,r19,-4
    3a04:	8c7fff04 	addi	r17,r17,-4
    3a08:	857ff71e 	bne	r16,r21,39e8 <_gp+0xffff7814>
    3a0c:	00800034 	movhi	r2,0
    3a10:	10800004 	addi	r2,r2,0
    3a14:	10002a1e 	bne	r2,zero,3ac0 <__call_exitprocs+0x164>
    3a18:	dfc00c17 	ldw	ra,48(sp)
    3a1c:	df000b17 	ldw	fp,44(sp)
    3a20:	ddc00a17 	ldw	r23,40(sp)
    3a24:	dd800917 	ldw	r22,36(sp)
    3a28:	dd400817 	ldw	r21,32(sp)
    3a2c:	dd000717 	ldw	r20,28(sp)
    3a30:	dcc00617 	ldw	r19,24(sp)
    3a34:	dc800517 	ldw	r18,20(sp)
    3a38:	dc400417 	ldw	r17,16(sp)
    3a3c:	dc000317 	ldw	r16,12(sp)
    3a40:	dec00d04 	addi	sp,sp,52
    3a44:	f800283a 	ret
    3a48:	91000117 	ldw	r4,4(r18)
    3a4c:	88c00017 	ldw	r3,0(r17)
    3a50:	213fffc4 	addi	r4,r4,-1
    3a54:	24001526 	beq	r4,r16,3aac <__call_exitprocs+0x150>
    3a58:	88000015 	stw	zero,0(r17)
    3a5c:	183fe726 	beq	r3,zero,39fc <_gp+0xffff7828>
    3a60:	00800044 	movi	r2,1
    3a64:	1408983a 	sll	r4,r2,r16
    3a68:	91406217 	ldw	r5,392(r18)
    3a6c:	95000117 	ldw	r20,4(r18)
    3a70:	214a703a 	and	r5,r4,r5
    3a74:	28000b26 	beq	r5,zero,3aa4 <__call_exitprocs+0x148>
    3a78:	91406317 	ldw	r5,396(r18)
    3a7c:	2148703a 	and	r4,r4,r5
    3a80:	20000c1e 	bne	r4,zero,3ab4 <__call_exitprocs+0x158>
    3a84:	99400017 	ldw	r5,0(r19)
    3a88:	d9000117 	ldw	r4,4(sp)
    3a8c:	183ee83a 	callr	r3
    3a90:	90c00117 	ldw	r3,4(r18)
    3a94:	1d3fc51e 	bne	r3,r20,39ac <_gp+0xffff77d8>
    3a98:	b8c00017 	ldw	r3,0(r23)
    3a9c:	1cbfd726 	beq	r3,r18,39fc <_gp+0xffff7828>
    3aa0:	003fc206 	br	39ac <_gp+0xffff77d8>
    3aa4:	183ee83a 	callr	r3
    3aa8:	003ff906 	br	3a90 <_gp+0xffff78bc>
    3aac:	94000115 	stw	r16,4(r18)
    3ab0:	003fea06 	br	3a5c <_gp+0xffff7888>
    3ab4:	99000017 	ldw	r4,0(r19)
    3ab8:	183ee83a 	callr	r3
    3abc:	003ff406 	br	3a90 <_gp+0xffff78bc>
    3ac0:	90c00117 	ldw	r3,4(r18)
    3ac4:	1800071e 	bne	r3,zero,3ae4 <__call_exitprocs+0x188>
    3ac8:	90c00017 	ldw	r3,0(r18)
    3acc:	18000926 	beq	r3,zero,3af4 <__call_exitprocs+0x198>
    3ad0:	9009883a 	mov	r4,r18
    3ad4:	b8c00015 	stw	r3,0(r23)
    3ad8:	00000000 	call	0 <__alt_mem_ram_cpu>
    3adc:	bc800017 	ldw	r18,0(r23)
    3ae0:	003fb506 	br	39b8 <_gp+0xffff77e4>
    3ae4:	90c00017 	ldw	r3,0(r18)
    3ae8:	902f883a 	mov	r23,r18
    3aec:	1825883a 	mov	r18,r3
    3af0:	003fb106 	br	39b8 <_gp+0xffff77e4>
    3af4:	0007883a 	mov	r3,zero
    3af8:	003ffb06 	br	3ae8 <_gp+0xffff7914>

00003afc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    3afc:	defffc04 	addi	sp,sp,-16
    3b00:	df000315 	stw	fp,12(sp)
    3b04:	df000304 	addi	fp,sp,12
    3b08:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    3b0c:	0001883a 	nop
    3b10:	e0bfff17 	ldw	r2,-4(fp)
    3b14:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
    3b18:	e0bffd17 	ldw	r2,-12(fp)
    3b1c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    3b20:	e0bffe17 	ldw	r2,-8(fp)
    3b24:	10000226 	beq	r2,zero,3b30 <_exit+0x34>
    ALT_SIM_FAIL();
    3b28:	002af070 	cmpltui	zero,zero,43969
    3b2c:	00000106 	br	3b34 <_exit+0x38>
  } else {
    ALT_SIM_PASS();
    3b30:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    3b34:	003fff06 	br	3b34 <_gp+0xffff7960>
