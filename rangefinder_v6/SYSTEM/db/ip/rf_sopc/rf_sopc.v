// rf_sopc.v

// Generated using ACDS version 14.0 200 at 2016.05.25.19:35:47

`timescale 1 ps / 1 ps
module rf_sopc (
		input  wire        clk_clk,                      //           clk.clk
		input  wire        reset_reset_n,                //         reset.reset_n
		input  wire [7:0]  ram_0_address,                //         ram_0.address
		input  wire        ram_0_chipselect,             //              .chipselect
		input  wire        ram_0_clken,                  //              .clken
		input  wire        ram_0_write,                  //              .write
		output wire [7:0]  ram_0_readdata,               //              .readdata
		input  wire [7:0]  ram_0_writedata,              //              .writedata
		input  wire        ram_0_clk_clk,                //     ram_0_clk.clk
		input  wire        ram_0_reset_reset,            //   ram_0_reset.reset
		input  wire        ram_0_reset_reset_req,        //              .reset_req
		input  wire [7:0]  ram_1_address,                //         ram_1.address
		input  wire        ram_1_chipselect,             //              .chipselect
		input  wire        ram_1_clken,                  //              .clken
		input  wire        ram_1_write,                  //              .write
		output wire [7:0]  ram_1_readdata,               //              .readdata
		input  wire [7:0]  ram_1_writedata,              //              .writedata
		input  wire        ram_1_clk_clk,                //     ram_1_clk.clk
		input  wire        ram_1_reset_reset,            //   ram_1_reset.reset
		input  wire        ram_1_reset_reset_req,        //              .reset_req
		input  wire [7:0]  ram_2_address,                //         ram_2.address
		input  wire        ram_2_chipselect,             //              .chipselect
		input  wire        ram_2_clken,                  //              .clken
		input  wire        ram_2_write,                  //              .write
		output wire [7:0]  ram_2_readdata,               //              .readdata
		input  wire [7:0]  ram_2_writedata,              //              .writedata
		input  wire        ram_2_clk_clk,                //     ram_2_clk.clk
		input  wire        ram_2_reset_reset,            //   ram_2_reset.reset
		input  wire        ram_2_reset_reset_req,        //              .reset_req
		input  wire [7:0]  ram_3_address,                //         ram_3.address
		input  wire        ram_3_chipselect,             //              .chipselect
		input  wire        ram_3_clken,                  //              .clken
		input  wire        ram_3_write,                  //              .write
		output wire [7:0]  ram_3_readdata,               //              .readdata
		input  wire [7:0]  ram_3_writedata,              //              .writedata
		input  wire        ram_3_clk_clk,                //     ram_3_clk.clk
		input  wire        ram_3_reset_reset,            //   ram_3_reset.reset
		input  wire        ram_3_reset_reset_req,        //              .reset_req
		input  wire [7:0]  ram_4_address,                //         ram_4.address
		input  wire        ram_4_chipselect,             //              .chipselect
		input  wire        ram_4_clken,                  //              .clken
		input  wire        ram_4_write,                  //              .write
		output wire [7:0]  ram_4_readdata,               //              .readdata
		input  wire [7:0]  ram_4_writedata,              //              .writedata
		input  wire        ram_4_clk_clk,                //     ram_4_clk.clk
		input  wire        ram_4_reset_reset,            //   ram_4_reset.reset
		input  wire        ram_4_reset_reset_req,        //              .reset_req
		input  wire [7:0]  ram_5_address,                //         ram_5.address
		input  wire        ram_5_chipselect,             //              .chipselect
		input  wire        ram_5_clken,                  //              .clken
		input  wire        ram_5_write,                  //              .write
		output wire [7:0]  ram_5_readdata,               //              .readdata
		input  wire [7:0]  ram_5_writedata,              //              .writedata
		input  wire        ram_5_clk_clk,                //     ram_5_clk.clk
		input  wire        ram_5_reset_reset,            //   ram_5_reset.reset
		input  wire        ram_5_reset_reset_req,        //              .reset_req
		input  wire        laser_driver_ref_clk,         //  laser_driver.ref_clk
		input  wire        laser_driver_driver_enable,   //              .driver_enable
		output wire        laser_driver_laser,           //              .laser
		input  wire        laser_driver_comparator,      //              .comparator
		input  wire        sample_loader_global_reset,   // sample_loader.global_reset
		input  wire        sample_loader_adc_clk,        //              .adc_clk
		input  wire [7:0]  sample_loader_adc_sample,     //              .adc_sample
		input  wire        sample_loader_dir_comparator, //              .dir_comparator
		input  wire        sample_loader_ad_comparator,  //              .ad_comparator
		output wire        sample_loader_tdc_strobe,     //              .tdc_strobe
		output wire        sample_loader_avm_clk,        //              .avm_clk
		output wire        sample_loader_avm_reset,      //              .avm_reset
		output wire [7:0]  sample_loader_avm_wdata,      //              .avm_wdata
		output wire [5:0]  sample_loader_avm_cs,         //              .avm_cs
		output wire [5:0]  sample_loader_avm_write,      //              .avm_write
		output wire [7:0]  sample_loader_avm_addr_0,     //              .avm_addr_0
		output wire [7:0]  sample_loader_avm_addr_1,     //              .avm_addr_1
		output wire [7:0]  sample_loader_avm_addr_2,     //              .avm_addr_2
		output wire [7:0]  sample_loader_avm_addr_3,     //              .avm_addr_3
		output wire [7:0]  sample_loader_avm_addr_4,     //              .avm_addr_4
		output wire [7:0]  sample_loader_avm_addr_5,     //              .avm_addr_5
		input  wire        uart_0_rxd,                   //        uart_0.rxd
		output wire        uart_0_txd,                   //              .txd
		input  wire        pc_uart_rxd,                  //       pc_uart.rxd
		output wire        pc_uart_txd,                  //              .txd
		input  wire        uart_1_rxd,                   //        uart_1.rxd
		output wire        uart_1_txd,                   //              .txd
		input  wire        uart_2_rxd,                   //        uart_2.rxd
		output wire        uart_2_txd,                   //              .txd
		input  wire        uart_3_rxd,                   //        uart_3.rxd
		output wire        uart_3_txd,                   //              .txd
		input  wire        uart_4_rxd,                   //        uart_4.rxd
		output wire        uart_4_txd,                   //              .txd
		input  wire        uart_5_rxd,                   //        uart_5.rxd
		output wire        uart_5_txd,                   //              .txd
		input  wire        spi_0_MISO,                   //         spi_0.MISO
		output wire        spi_0_MOSI,                   //              .MOSI
		output wire        spi_0_SCLK,                   //              .SCLK
		output wire [4:0]  spi_0_SS_n,                   //              .SS_n
		input  wire        spi_1_MISO,                   //         spi_1.MISO
		output wire        spi_1_MOSI,                   //              .MOSI
		output wire        spi_1_SCLK,                   //              .SCLK
		output wire [1:0]  spi_1_SS_n,                   //              .SS_n
		inout  wire [1:0]  i2c_0_export,                 //         i2c_0.export
		inout  wire [1:0]  i2c_1_export,                 //         i2c_1.export
		output wire [7:0]  leds_export,                  //          leds.export
		inout  wire [15:0] gpio_export                   //          gpio.export
	);

	wire         cpu_instruction_master_waitrequest;                        // mm_interconnect_0:cpu_instruction_master_waitrequest -> cpu:i_waitrequest
	wire  [15:0] cpu_instruction_master_address;                            // cpu:i_address -> mm_interconnect_0:cpu_instruction_master_address
	wire         cpu_instruction_master_read;                               // cpu:i_read -> mm_interconnect_0:cpu_instruction_master_read
	wire  [31:0] cpu_instruction_master_readdata;                           // mm_interconnect_0:cpu_instruction_master_readdata -> cpu:i_readdata
	wire         cpu_instruction_master_readdatavalid;                      // mm_interconnect_0:cpu_instruction_master_readdatavalid -> cpu:i_readdatavalid
	wire         cpu_data_master_waitrequest;                               // mm_interconnect_0:cpu_data_master_waitrequest -> cpu:d_waitrequest
	wire  [31:0] cpu_data_master_writedata;                                 // cpu:d_writedata -> mm_interconnect_0:cpu_data_master_writedata
	wire  [15:0] cpu_data_master_address;                                   // cpu:d_address -> mm_interconnect_0:cpu_data_master_address
	wire         cpu_data_master_write;                                     // cpu:d_write -> mm_interconnect_0:cpu_data_master_write
	wire         cpu_data_master_read;                                      // cpu:d_read -> mm_interconnect_0:cpu_data_master_read
	wire  [31:0] cpu_data_master_readdata;                                  // mm_interconnect_0:cpu_data_master_readdata -> cpu:d_readdata
	wire         cpu_data_master_debugaccess;                               // cpu:jtag_debug_module_debugaccess_to_roms -> mm_interconnect_0:cpu_data_master_debugaccess
	wire         cpu_data_master_readdatavalid;                             // mm_interconnect_0:cpu_data_master_readdatavalid -> cpu:d_readdatavalid
	wire   [3:0] cpu_data_master_byteenable;                                // cpu:d_byteenable -> mm_interconnect_0:cpu_data_master_byteenable
	wire         mm_interconnect_0_cpu_jtag_debug_module_waitrequest;       // cpu:jtag_debug_module_waitrequest -> mm_interconnect_0:cpu_jtag_debug_module_waitrequest
	wire  [31:0] mm_interconnect_0_cpu_jtag_debug_module_writedata;         // mm_interconnect_0:cpu_jtag_debug_module_writedata -> cpu:jtag_debug_module_writedata
	wire   [8:0] mm_interconnect_0_cpu_jtag_debug_module_address;           // mm_interconnect_0:cpu_jtag_debug_module_address -> cpu:jtag_debug_module_address
	wire         mm_interconnect_0_cpu_jtag_debug_module_write;             // mm_interconnect_0:cpu_jtag_debug_module_write -> cpu:jtag_debug_module_write
	wire         mm_interconnect_0_cpu_jtag_debug_module_read;              // mm_interconnect_0:cpu_jtag_debug_module_read -> cpu:jtag_debug_module_read
	wire  [31:0] mm_interconnect_0_cpu_jtag_debug_module_readdata;          // cpu:jtag_debug_module_readdata -> mm_interconnect_0:cpu_jtag_debug_module_readdata
	wire         mm_interconnect_0_cpu_jtag_debug_module_debugaccess;       // mm_interconnect_0:cpu_jtag_debug_module_debugaccess -> cpu:jtag_debug_module_debugaccess
	wire   [3:0] mm_interconnect_0_cpu_jtag_debug_module_byteenable;        // mm_interconnect_0:cpu_jtag_debug_module_byteenable -> cpu:jtag_debug_module_byteenable
	wire  [31:0] mm_interconnect_0_ram_cpu_s1_writedata;                    // mm_interconnect_0:ram_cpu_s1_writedata -> ram_cpu:writedata
	wire  [12:0] mm_interconnect_0_ram_cpu_s1_address;                      // mm_interconnect_0:ram_cpu_s1_address -> ram_cpu:address
	wire         mm_interconnect_0_ram_cpu_s1_chipselect;                   // mm_interconnect_0:ram_cpu_s1_chipselect -> ram_cpu:chipselect
	wire         mm_interconnect_0_ram_cpu_s1_clken;                        // mm_interconnect_0:ram_cpu_s1_clken -> ram_cpu:clken
	wire         mm_interconnect_0_ram_cpu_s1_write;                        // mm_interconnect_0:ram_cpu_s1_write -> ram_cpu:write
	wire  [31:0] mm_interconnect_0_ram_cpu_s1_readdata;                     // ram_cpu:readdata -> mm_interconnect_0:ram_cpu_s1_readdata
	wire   [3:0] mm_interconnect_0_ram_cpu_s1_byteenable;                   // mm_interconnect_0:ram_cpu_s1_byteenable -> ram_cpu:byteenable
	wire  [31:0] mm_interconnect_0_ram_cpu_s2_writedata;                    // mm_interconnect_0:ram_cpu_s2_writedata -> ram_cpu:writedata2
	wire  [12:0] mm_interconnect_0_ram_cpu_s2_address;                      // mm_interconnect_0:ram_cpu_s2_address -> ram_cpu:address2
	wire         mm_interconnect_0_ram_cpu_s2_chipselect;                   // mm_interconnect_0:ram_cpu_s2_chipselect -> ram_cpu:chipselect2
	wire         mm_interconnect_0_ram_cpu_s2_clken;                        // mm_interconnect_0:ram_cpu_s2_clken -> ram_cpu:clken2
	wire         mm_interconnect_0_ram_cpu_s2_write;                        // mm_interconnect_0:ram_cpu_s2_write -> ram_cpu:write2
	wire  [31:0] mm_interconnect_0_ram_cpu_s2_readdata;                     // ram_cpu:readdata2 -> mm_interconnect_0:ram_cpu_s2_readdata
	wire   [3:0] mm_interconnect_0_ram_cpu_s2_byteenable;                   // mm_interconnect_0:ram_cpu_s2_byteenable -> ram_cpu:byteenable2
	wire   [0:0] mm_interconnect_0_sysid_control_slave_address;             // mm_interconnect_0:sysid_control_slave_address -> sysid:address
	wire  [31:0] mm_interconnect_0_sysid_control_slave_readdata;            // sysid:readdata -> mm_interconnect_0:sysid_control_slave_readdata
	wire  [15:0] mm_interconnect_0_system_timer_s1_writedata;               // mm_interconnect_0:system_timer_s1_writedata -> system_timer:writedata
	wire   [2:0] mm_interconnect_0_system_timer_s1_address;                 // mm_interconnect_0:system_timer_s1_address -> system_timer:address
	wire         mm_interconnect_0_system_timer_s1_chipselect;              // mm_interconnect_0:system_timer_s1_chipselect -> system_timer:chipselect
	wire         mm_interconnect_0_system_timer_s1_write;                   // mm_interconnect_0:system_timer_s1_write -> system_timer:write_n
	wire  [15:0] mm_interconnect_0_system_timer_s1_readdata;                // system_timer:readdata -> mm_interconnect_0:system_timer_s1_readdata
	wire   [7:0] mm_interconnect_0_ram_sample_0_s1_writedata;               // mm_interconnect_0:ram_sample_0_s1_writedata -> ram_sample_0:writedata
	wire   [7:0] mm_interconnect_0_ram_sample_0_s1_address;                 // mm_interconnect_0:ram_sample_0_s1_address -> ram_sample_0:address
	wire         mm_interconnect_0_ram_sample_0_s1_chipselect;              // mm_interconnect_0:ram_sample_0_s1_chipselect -> ram_sample_0:chipselect
	wire         mm_interconnect_0_ram_sample_0_s1_clken;                   // mm_interconnect_0:ram_sample_0_s1_clken -> ram_sample_0:clken
	wire         mm_interconnect_0_ram_sample_0_s1_write;                   // mm_interconnect_0:ram_sample_0_s1_write -> ram_sample_0:write
	wire   [7:0] mm_interconnect_0_ram_sample_0_s1_readdata;                // ram_sample_0:readdata -> mm_interconnect_0:ram_sample_0_s1_readdata
	wire   [7:0] mm_interconnect_0_ram_sample_1_s1_writedata;               // mm_interconnect_0:ram_sample_1_s1_writedata -> ram_sample_1:writedata
	wire   [7:0] mm_interconnect_0_ram_sample_1_s1_address;                 // mm_interconnect_0:ram_sample_1_s1_address -> ram_sample_1:address
	wire         mm_interconnect_0_ram_sample_1_s1_chipselect;              // mm_interconnect_0:ram_sample_1_s1_chipselect -> ram_sample_1:chipselect
	wire         mm_interconnect_0_ram_sample_1_s1_clken;                   // mm_interconnect_0:ram_sample_1_s1_clken -> ram_sample_1:clken
	wire         mm_interconnect_0_ram_sample_1_s1_write;                   // mm_interconnect_0:ram_sample_1_s1_write -> ram_sample_1:write
	wire   [7:0] mm_interconnect_0_ram_sample_1_s1_readdata;                // ram_sample_1:readdata -> mm_interconnect_0:ram_sample_1_s1_readdata
	wire   [7:0] mm_interconnect_0_ram_sample_2_s1_writedata;               // mm_interconnect_0:ram_sample_2_s1_writedata -> ram_sample_2:writedata
	wire   [7:0] mm_interconnect_0_ram_sample_2_s1_address;                 // mm_interconnect_0:ram_sample_2_s1_address -> ram_sample_2:address
	wire         mm_interconnect_0_ram_sample_2_s1_chipselect;              // mm_interconnect_0:ram_sample_2_s1_chipselect -> ram_sample_2:chipselect
	wire         mm_interconnect_0_ram_sample_2_s1_clken;                   // mm_interconnect_0:ram_sample_2_s1_clken -> ram_sample_2:clken
	wire         mm_interconnect_0_ram_sample_2_s1_write;                   // mm_interconnect_0:ram_sample_2_s1_write -> ram_sample_2:write
	wire   [7:0] mm_interconnect_0_ram_sample_2_s1_readdata;                // ram_sample_2:readdata -> mm_interconnect_0:ram_sample_2_s1_readdata
	wire   [7:0] mm_interconnect_0_ram_sample_3_s1_writedata;               // mm_interconnect_0:ram_sample_3_s1_writedata -> ram_sample_3:writedata
	wire   [7:0] mm_interconnect_0_ram_sample_3_s1_address;                 // mm_interconnect_0:ram_sample_3_s1_address -> ram_sample_3:address
	wire         mm_interconnect_0_ram_sample_3_s1_chipselect;              // mm_interconnect_0:ram_sample_3_s1_chipselect -> ram_sample_3:chipselect
	wire         mm_interconnect_0_ram_sample_3_s1_clken;                   // mm_interconnect_0:ram_sample_3_s1_clken -> ram_sample_3:clken
	wire         mm_interconnect_0_ram_sample_3_s1_write;                   // mm_interconnect_0:ram_sample_3_s1_write -> ram_sample_3:write
	wire   [7:0] mm_interconnect_0_ram_sample_3_s1_readdata;                // ram_sample_3:readdata -> mm_interconnect_0:ram_sample_3_s1_readdata
	wire   [7:0] mm_interconnect_0_ram_sample_4_s1_writedata;               // mm_interconnect_0:ram_sample_4_s1_writedata -> ram_sample_4:writedata
	wire   [7:0] mm_interconnect_0_ram_sample_4_s1_address;                 // mm_interconnect_0:ram_sample_4_s1_address -> ram_sample_4:address
	wire         mm_interconnect_0_ram_sample_4_s1_chipselect;              // mm_interconnect_0:ram_sample_4_s1_chipselect -> ram_sample_4:chipselect
	wire         mm_interconnect_0_ram_sample_4_s1_clken;                   // mm_interconnect_0:ram_sample_4_s1_clken -> ram_sample_4:clken
	wire         mm_interconnect_0_ram_sample_4_s1_write;                   // mm_interconnect_0:ram_sample_4_s1_write -> ram_sample_4:write
	wire   [7:0] mm_interconnect_0_ram_sample_4_s1_readdata;                // ram_sample_4:readdata -> mm_interconnect_0:ram_sample_4_s1_readdata
	wire   [7:0] mm_interconnect_0_ram_sample_5_s1_writedata;               // mm_interconnect_0:ram_sample_5_s1_writedata -> ram_sample_5:writedata
	wire   [7:0] mm_interconnect_0_ram_sample_5_s1_address;                 // mm_interconnect_0:ram_sample_5_s1_address -> ram_sample_5:address
	wire         mm_interconnect_0_ram_sample_5_s1_chipselect;              // mm_interconnect_0:ram_sample_5_s1_chipselect -> ram_sample_5:chipselect
	wire         mm_interconnect_0_ram_sample_5_s1_clken;                   // mm_interconnect_0:ram_sample_5_s1_clken -> ram_sample_5:clken
	wire         mm_interconnect_0_ram_sample_5_s1_write;                   // mm_interconnect_0:ram_sample_5_s1_write -> ram_sample_5:write
	wire   [7:0] mm_interconnect_0_ram_sample_5_s1_readdata;                // ram_sample_5:readdata -> mm_interconnect_0:ram_sample_5_s1_readdata
	wire  [31:0] mm_interconnect_0_laser_driver_avalon_slave_0_writedata;   // mm_interconnect_0:laser_driver_avalon_slave_0_writedata -> laser_driver:avmms_writedata
	wire   [2:0] mm_interconnect_0_laser_driver_avalon_slave_0_address;     // mm_interconnect_0:laser_driver_avalon_slave_0_address -> laser_driver:avmms_address
	wire         mm_interconnect_0_laser_driver_avalon_slave_0_chipselect;  // mm_interconnect_0:laser_driver_avalon_slave_0_chipselect -> laser_driver:avmms_cs
	wire         mm_interconnect_0_laser_driver_avalon_slave_0_write;       // mm_interconnect_0:laser_driver_avalon_slave_0_write -> laser_driver:avmms_write
	wire         mm_interconnect_0_laser_driver_avalon_slave_0_read;        // mm_interconnect_0:laser_driver_avalon_slave_0_read -> laser_driver:avmms_read
	wire  [31:0] mm_interconnect_0_laser_driver_avalon_slave_0_readdata;    // laser_driver:avmms_readdata -> mm_interconnect_0:laser_driver_avalon_slave_0_readdata
	wire  [31:0] mm_interconnect_0_sample_loader_avalon_slave_0_writedata;  // mm_interconnect_0:sample_loader_avalon_slave_0_writedata -> sample_loader:avs_writedata
	wire   [3:0] mm_interconnect_0_sample_loader_avalon_slave_0_address;    // mm_interconnect_0:sample_loader_avalon_slave_0_address -> sample_loader:avs_addr
	wire         mm_interconnect_0_sample_loader_avalon_slave_0_chipselect; // mm_interconnect_0:sample_loader_avalon_slave_0_chipselect -> sample_loader:avs_cs
	wire         mm_interconnect_0_sample_loader_avalon_slave_0_write;      // mm_interconnect_0:sample_loader_avalon_slave_0_write -> sample_loader:avs_write
	wire         mm_interconnect_0_sample_loader_avalon_slave_0_read;       // mm_interconnect_0:sample_loader_avalon_slave_0_read -> sample_loader:avs_read
	wire  [31:0] mm_interconnect_0_sample_loader_avalon_slave_0_readdata;   // sample_loader:avs_readdata -> mm_interconnect_0:sample_loader_avalon_slave_0_readdata
	wire  [15:0] mm_interconnect_0_uart_0_s1_writedata;                     // mm_interconnect_0:uart_0_s1_writedata -> uart_0:writedata
	wire   [2:0] mm_interconnect_0_uart_0_s1_address;                       // mm_interconnect_0:uart_0_s1_address -> uart_0:address
	wire         mm_interconnect_0_uart_0_s1_chipselect;                    // mm_interconnect_0:uart_0_s1_chipselect -> uart_0:chipselect
	wire         mm_interconnect_0_uart_0_s1_write;                         // mm_interconnect_0:uart_0_s1_write -> uart_0:write_n
	wire         mm_interconnect_0_uart_0_s1_read;                          // mm_interconnect_0:uart_0_s1_read -> uart_0:read_n
	wire  [15:0] mm_interconnect_0_uart_0_s1_readdata;                      // uart_0:readdata -> mm_interconnect_0:uart_0_s1_readdata
	wire         mm_interconnect_0_uart_0_s1_begintransfer;                 // mm_interconnect_0:uart_0_s1_begintransfer -> uart_0:begintransfer
	wire  [15:0] mm_interconnect_0_pc_uart_s1_writedata;                    // mm_interconnect_0:pc_uart_s1_writedata -> pc_uart:writedata
	wire   [2:0] mm_interconnect_0_pc_uart_s1_address;                      // mm_interconnect_0:pc_uart_s1_address -> pc_uart:address
	wire         mm_interconnect_0_pc_uart_s1_chipselect;                   // mm_interconnect_0:pc_uart_s1_chipselect -> pc_uart:chipselect
	wire         mm_interconnect_0_pc_uart_s1_write;                        // mm_interconnect_0:pc_uart_s1_write -> pc_uart:write_n
	wire         mm_interconnect_0_pc_uart_s1_read;                         // mm_interconnect_0:pc_uart_s1_read -> pc_uart:read_n
	wire  [15:0] mm_interconnect_0_pc_uart_s1_readdata;                     // pc_uart:readdata -> mm_interconnect_0:pc_uart_s1_readdata
	wire         mm_interconnect_0_pc_uart_s1_begintransfer;                // mm_interconnect_0:pc_uart_s1_begintransfer -> pc_uart:begintransfer
	wire  [15:0] mm_interconnect_0_uart_1_s1_writedata;                     // mm_interconnect_0:uart_1_s1_writedata -> uart_1:writedata
	wire   [2:0] mm_interconnect_0_uart_1_s1_address;                       // mm_interconnect_0:uart_1_s1_address -> uart_1:address
	wire         mm_interconnect_0_uart_1_s1_chipselect;                    // mm_interconnect_0:uart_1_s1_chipselect -> uart_1:chipselect
	wire         mm_interconnect_0_uart_1_s1_write;                         // mm_interconnect_0:uart_1_s1_write -> uart_1:write_n
	wire         mm_interconnect_0_uart_1_s1_read;                          // mm_interconnect_0:uart_1_s1_read -> uart_1:read_n
	wire  [15:0] mm_interconnect_0_uart_1_s1_readdata;                      // uart_1:readdata -> mm_interconnect_0:uart_1_s1_readdata
	wire         mm_interconnect_0_uart_1_s1_begintransfer;                 // mm_interconnect_0:uart_1_s1_begintransfer -> uart_1:begintransfer
	wire  [15:0] mm_interconnect_0_uart_2_s1_writedata;                     // mm_interconnect_0:uart_2_s1_writedata -> uart_2:writedata
	wire   [2:0] mm_interconnect_0_uart_2_s1_address;                       // mm_interconnect_0:uart_2_s1_address -> uart_2:address
	wire         mm_interconnect_0_uart_2_s1_chipselect;                    // mm_interconnect_0:uart_2_s1_chipselect -> uart_2:chipselect
	wire         mm_interconnect_0_uart_2_s1_write;                         // mm_interconnect_0:uart_2_s1_write -> uart_2:write_n
	wire         mm_interconnect_0_uart_2_s1_read;                          // mm_interconnect_0:uart_2_s1_read -> uart_2:read_n
	wire  [15:0] mm_interconnect_0_uart_2_s1_readdata;                      // uart_2:readdata -> mm_interconnect_0:uart_2_s1_readdata
	wire         mm_interconnect_0_uart_2_s1_begintransfer;                 // mm_interconnect_0:uart_2_s1_begintransfer -> uart_2:begintransfer
	wire  [15:0] mm_interconnect_0_uart_3_s1_writedata;                     // mm_interconnect_0:uart_3_s1_writedata -> uart_3:writedata
	wire   [2:0] mm_interconnect_0_uart_3_s1_address;                       // mm_interconnect_0:uart_3_s1_address -> uart_3:address
	wire         mm_interconnect_0_uart_3_s1_chipselect;                    // mm_interconnect_0:uart_3_s1_chipselect -> uart_3:chipselect
	wire         mm_interconnect_0_uart_3_s1_write;                         // mm_interconnect_0:uart_3_s1_write -> uart_3:write_n
	wire         mm_interconnect_0_uart_3_s1_read;                          // mm_interconnect_0:uart_3_s1_read -> uart_3:read_n
	wire  [15:0] mm_interconnect_0_uart_3_s1_readdata;                      // uart_3:readdata -> mm_interconnect_0:uart_3_s1_readdata
	wire         mm_interconnect_0_uart_3_s1_begintransfer;                 // mm_interconnect_0:uart_3_s1_begintransfer -> uart_3:begintransfer
	wire  [15:0] mm_interconnect_0_uart_4_s1_writedata;                     // mm_interconnect_0:uart_4_s1_writedata -> uart_4:writedata
	wire   [2:0] mm_interconnect_0_uart_4_s1_address;                       // mm_interconnect_0:uart_4_s1_address -> uart_4:address
	wire         mm_interconnect_0_uart_4_s1_chipselect;                    // mm_interconnect_0:uart_4_s1_chipselect -> uart_4:chipselect
	wire         mm_interconnect_0_uart_4_s1_write;                         // mm_interconnect_0:uart_4_s1_write -> uart_4:write_n
	wire         mm_interconnect_0_uart_4_s1_read;                          // mm_interconnect_0:uart_4_s1_read -> uart_4:read_n
	wire  [15:0] mm_interconnect_0_uart_4_s1_readdata;                      // uart_4:readdata -> mm_interconnect_0:uart_4_s1_readdata
	wire         mm_interconnect_0_uart_4_s1_begintransfer;                 // mm_interconnect_0:uart_4_s1_begintransfer -> uart_4:begintransfer
	wire  [15:0] mm_interconnect_0_uart_5_s1_writedata;                     // mm_interconnect_0:uart_5_s1_writedata -> uart_5:writedata
	wire   [2:0] mm_interconnect_0_uart_5_s1_address;                       // mm_interconnect_0:uart_5_s1_address -> uart_5:address
	wire         mm_interconnect_0_uart_5_s1_chipselect;                    // mm_interconnect_0:uart_5_s1_chipselect -> uart_5:chipselect
	wire         mm_interconnect_0_uart_5_s1_write;                         // mm_interconnect_0:uart_5_s1_write -> uart_5:write_n
	wire         mm_interconnect_0_uart_5_s1_read;                          // mm_interconnect_0:uart_5_s1_read -> uart_5:read_n
	wire  [15:0] mm_interconnect_0_uart_5_s1_readdata;                      // uart_5:readdata -> mm_interconnect_0:uart_5_s1_readdata
	wire         mm_interconnect_0_uart_5_s1_begintransfer;                 // mm_interconnect_0:uart_5_s1_begintransfer -> uart_5:begintransfer
	wire  [15:0] mm_interconnect_0_spi_0_spi_control_port_writedata;        // mm_interconnect_0:spi_0_spi_control_port_writedata -> spi_0:data_from_cpu
	wire   [2:0] mm_interconnect_0_spi_0_spi_control_port_address;          // mm_interconnect_0:spi_0_spi_control_port_address -> spi_0:mem_addr
	wire         mm_interconnect_0_spi_0_spi_control_port_chipselect;       // mm_interconnect_0:spi_0_spi_control_port_chipselect -> spi_0:spi_select
	wire         mm_interconnect_0_spi_0_spi_control_port_write;            // mm_interconnect_0:spi_0_spi_control_port_write -> spi_0:write_n
	wire         mm_interconnect_0_spi_0_spi_control_port_read;             // mm_interconnect_0:spi_0_spi_control_port_read -> spi_0:read_n
	wire  [15:0] mm_interconnect_0_spi_0_spi_control_port_readdata;         // spi_0:data_to_cpu -> mm_interconnect_0:spi_0_spi_control_port_readdata
	wire  [15:0] mm_interconnect_0_spi_1_spi_control_port_writedata;        // mm_interconnect_0:spi_1_spi_control_port_writedata -> spi_1:data_from_cpu
	wire   [2:0] mm_interconnect_0_spi_1_spi_control_port_address;          // mm_interconnect_0:spi_1_spi_control_port_address -> spi_1:mem_addr
	wire         mm_interconnect_0_spi_1_spi_control_port_chipselect;       // mm_interconnect_0:spi_1_spi_control_port_chipselect -> spi_1:spi_select
	wire         mm_interconnect_0_spi_1_spi_control_port_write;            // mm_interconnect_0:spi_1_spi_control_port_write -> spi_1:write_n
	wire         mm_interconnect_0_spi_1_spi_control_port_read;             // mm_interconnect_0:spi_1_spi_control_port_read -> spi_1:read_n
	wire  [15:0] mm_interconnect_0_spi_1_spi_control_port_readdata;         // spi_1:data_to_cpu -> mm_interconnect_0:spi_1_spi_control_port_readdata
	wire  [31:0] mm_interconnect_0_i2c_0_s1_writedata;                      // mm_interconnect_0:i2c_0_s1_writedata -> i2c_0:writedata
	wire   [2:0] mm_interconnect_0_i2c_0_s1_address;                        // mm_interconnect_0:i2c_0_s1_address -> i2c_0:address
	wire         mm_interconnect_0_i2c_0_s1_chipselect;                     // mm_interconnect_0:i2c_0_s1_chipselect -> i2c_0:chipselect
	wire         mm_interconnect_0_i2c_0_s1_write;                          // mm_interconnect_0:i2c_0_s1_write -> i2c_0:write_n
	wire  [31:0] mm_interconnect_0_i2c_0_s1_readdata;                       // i2c_0:readdata -> mm_interconnect_0:i2c_0_s1_readdata
	wire  [31:0] mm_interconnect_0_i2c_1_s1_writedata;                      // mm_interconnect_0:i2c_1_s1_writedata -> i2c_1:writedata
	wire   [2:0] mm_interconnect_0_i2c_1_s1_address;                        // mm_interconnect_0:i2c_1_s1_address -> i2c_1:address
	wire         mm_interconnect_0_i2c_1_s1_chipselect;                     // mm_interconnect_0:i2c_1_s1_chipselect -> i2c_1:chipselect
	wire         mm_interconnect_0_i2c_1_s1_write;                          // mm_interconnect_0:i2c_1_s1_write -> i2c_1:write_n
	wire  [31:0] mm_interconnect_0_i2c_1_s1_readdata;                       // i2c_1:readdata -> mm_interconnect_0:i2c_1_s1_readdata
	wire  [31:0] mm_interconnect_0_leds_s1_writedata;                       // mm_interconnect_0:leds_s1_writedata -> leds:writedata
	wire   [2:0] mm_interconnect_0_leds_s1_address;                         // mm_interconnect_0:leds_s1_address -> leds:address
	wire         mm_interconnect_0_leds_s1_chipselect;                      // mm_interconnect_0:leds_s1_chipselect -> leds:chipselect
	wire         mm_interconnect_0_leds_s1_write;                           // mm_interconnect_0:leds_s1_write -> leds:write_n
	wire  [31:0] mm_interconnect_0_leds_s1_readdata;                        // leds:readdata -> mm_interconnect_0:leds_s1_readdata
	wire  [31:0] mm_interconnect_0_gpio_s1_writedata;                       // mm_interconnect_0:gpio_s1_writedata -> gpio:writedata
	wire   [2:0] mm_interconnect_0_gpio_s1_address;                         // mm_interconnect_0:gpio_s1_address -> gpio:address
	wire         mm_interconnect_0_gpio_s1_chipselect;                      // mm_interconnect_0:gpio_s1_chipselect -> gpio:chipselect
	wire         mm_interconnect_0_gpio_s1_write;                           // mm_interconnect_0:gpio_s1_write -> gpio:write_n
	wire  [31:0] mm_interconnect_0_gpio_s1_readdata;                        // gpio:readdata -> mm_interconnect_0:gpio_s1_readdata
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest; // jtag_uart:av_waitrequest -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_waitrequest
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata;   // mm_interconnect_0:jtag_uart_avalon_jtag_slave_writedata -> jtag_uart:av_writedata
	wire   [0:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_address;     // mm_interconnect_0:jtag_uart_avalon_jtag_slave_address -> jtag_uart:av_address
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect;  // mm_interconnect_0:jtag_uart_avalon_jtag_slave_chipselect -> jtag_uart:av_chipselect
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_write;       // mm_interconnect_0:jtag_uart_avalon_jtag_slave_write -> jtag_uart:av_write_n
	wire         mm_interconnect_0_jtag_uart_avalon_jtag_slave_read;        // mm_interconnect_0:jtag_uart_avalon_jtag_slave_read -> jtag_uart:av_read_n
	wire  [31:0] mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata;    // jtag_uart:av_readdata -> mm_interconnect_0:jtag_uart_avalon_jtag_slave_readdata
	wire         irq_mapper_receiver0_irq;                                  // system_timer:irq -> irq_mapper:receiver0_irq
	wire         irq_mapper_receiver1_irq;                                  // pc_uart:irq -> irq_mapper:receiver1_irq
	wire         irq_mapper_receiver2_irq;                                  // uart_0:irq -> irq_mapper:receiver2_irq
	wire         irq_mapper_receiver3_irq;                                  // uart_1:irq -> irq_mapper:receiver3_irq
	wire         irq_mapper_receiver4_irq;                                  // uart_2:irq -> irq_mapper:receiver4_irq
	wire         irq_mapper_receiver5_irq;                                  // uart_3:irq -> irq_mapper:receiver5_irq
	wire         irq_mapper_receiver6_irq;                                  // uart_4:irq -> irq_mapper:receiver6_irq
	wire         irq_mapper_receiver7_irq;                                  // uart_5:irq -> irq_mapper:receiver7_irq
	wire         irq_mapper_receiver8_irq;                                  // spi_0:irq -> irq_mapper:receiver8_irq
	wire         irq_mapper_receiver9_irq;                                  // spi_1:irq -> irq_mapper:receiver9_irq
	wire  [31:0] cpu_d_irq_irq;                                             // irq_mapper:sender_irq -> cpu:d_irq
	wire         rst_controller_reset_out_reset;                            // rst_controller:reset_out -> [cpu:reset_n, gpio:reset_n, i2c_0:reset_n, i2c_1:reset_n, irq_mapper:reset, jtag_uart:rst_n, laser_driver:avmms_reset, leds:reset_n, mm_interconnect_0:cpu_reset_n_reset_bridge_in_reset_reset, pc_uart:reset_n, ram_cpu:reset, ram_sample_0:reset, ram_sample_1:reset, ram_sample_2:reset, ram_sample_3:reset, ram_sample_4:reset, ram_sample_5:reset, rst_translator:in_reset, sample_loader:avs_reset, spi_0:reset_n, spi_1:reset_n, sysid:reset_n, system_timer:reset_n, uart_0:reset_n, uart_1:reset_n, uart_2:reset_n, uart_3:reset_n, uart_4:reset_n, uart_5:reset_n]
	wire         rst_controller_reset_out_reset_req;                        // rst_controller:reset_req -> [cpu:reset_req, ram_cpu:reset_req, ram_sample_0:reset_req, ram_sample_1:reset_req, ram_sample_2:reset_req, ram_sample_3:reset_req, ram_sample_4:reset_req, ram_sample_5:reset_req, rst_translator:reset_req_in]
	wire         cpu_jtag_debug_module_reset_reset;                         // cpu:jtag_debug_module_resetrequest -> rst_controller:reset_in1

	rf_sopc_cpu cpu (
		.clk                                   (clk_clk),                                             //                       clk.clk
		.reset_n                               (~rst_controller_reset_out_reset),                     //                   reset_n.reset_n
		.reset_req                             (rst_controller_reset_out_reset_req),                  //                          .reset_req
		.d_address                             (cpu_data_master_address),                             //               data_master.address
		.d_byteenable                          (cpu_data_master_byteenable),                          //                          .byteenable
		.d_read                                (cpu_data_master_read),                                //                          .read
		.d_readdata                            (cpu_data_master_readdata),                            //                          .readdata
		.d_waitrequest                         (cpu_data_master_waitrequest),                         //                          .waitrequest
		.d_write                               (cpu_data_master_write),                               //                          .write
		.d_writedata                           (cpu_data_master_writedata),                           //                          .writedata
		.d_readdatavalid                       (cpu_data_master_readdatavalid),                       //                          .readdatavalid
		.jtag_debug_module_debugaccess_to_roms (cpu_data_master_debugaccess),                         //                          .debugaccess
		.i_address                             (cpu_instruction_master_address),                      //        instruction_master.address
		.i_read                                (cpu_instruction_master_read),                         //                          .read
		.i_readdata                            (cpu_instruction_master_readdata),                     //                          .readdata
		.i_waitrequest                         (cpu_instruction_master_waitrequest),                  //                          .waitrequest
		.i_readdatavalid                       (cpu_instruction_master_readdatavalid),                //                          .readdatavalid
		.d_irq                                 (cpu_d_irq_irq),                                       //                     d_irq.irq
		.jtag_debug_module_resetrequest        (cpu_jtag_debug_module_reset_reset),                   //   jtag_debug_module_reset.reset
		.jtag_debug_module_address             (mm_interconnect_0_cpu_jtag_debug_module_address),     //         jtag_debug_module.address
		.jtag_debug_module_byteenable          (mm_interconnect_0_cpu_jtag_debug_module_byteenable),  //                          .byteenable
		.jtag_debug_module_debugaccess         (mm_interconnect_0_cpu_jtag_debug_module_debugaccess), //                          .debugaccess
		.jtag_debug_module_read                (mm_interconnect_0_cpu_jtag_debug_module_read),        //                          .read
		.jtag_debug_module_readdata            (mm_interconnect_0_cpu_jtag_debug_module_readdata),    //                          .readdata
		.jtag_debug_module_waitrequest         (mm_interconnect_0_cpu_jtag_debug_module_waitrequest), //                          .waitrequest
		.jtag_debug_module_write               (mm_interconnect_0_cpu_jtag_debug_module_write),       //                          .write
		.jtag_debug_module_writedata           (mm_interconnect_0_cpu_jtag_debug_module_writedata),   //                          .writedata
		.no_ci_readra                          ()                                                     // custom_instruction_master.readra
	);

	rf_sopc_ram_cpu ram_cpu (
		.address     (mm_interconnect_0_ram_cpu_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_cpu_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_cpu_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_cpu_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_cpu_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_cpu_s1_writedata),  //       .writedata
		.byteenable  (mm_interconnect_0_ram_cpu_s1_byteenable), //       .byteenable
		.address2    (mm_interconnect_0_ram_cpu_s2_address),    //     s2.address
		.chipselect2 (mm_interconnect_0_ram_cpu_s2_chipselect), //       .chipselect
		.clken2      (mm_interconnect_0_ram_cpu_s2_clken),      //       .clken
		.write2      (mm_interconnect_0_ram_cpu_s2_write),      //       .write
		.readdata2   (mm_interconnect_0_ram_cpu_s2_readdata),   //       .readdata
		.writedata2  (mm_interconnect_0_ram_cpu_s2_writedata),  //       .writedata
		.byteenable2 (mm_interconnect_0_ram_cpu_s2_byteenable), //       .byteenable
		.clk         (clk_clk),                                 //   clk1.clk
		.reset       (rst_controller_reset_out_reset),          // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req)       //       .reset_req
	);

	rf_sopc_sysid sysid (
		.clock    (clk_clk),                                        //           clk.clk
		.reset_n  (~rst_controller_reset_out_reset),                //         reset.reset_n
		.readdata (mm_interconnect_0_sysid_control_slave_readdata), // control_slave.readdata
		.address  (mm_interconnect_0_sysid_control_slave_address)   //              .address
	);

	rf_sopc_system_timer system_timer (
		.clk        (clk_clk),                                      //   clk.clk
		.reset_n    (~rst_controller_reset_out_reset),              // reset.reset_n
		.address    (mm_interconnect_0_system_timer_s1_address),    //    s1.address
		.writedata  (mm_interconnect_0_system_timer_s1_writedata),  //      .writedata
		.readdata   (mm_interconnect_0_system_timer_s1_readdata),   //      .readdata
		.chipselect (mm_interconnect_0_system_timer_s1_chipselect), //      .chipselect
		.write_n    (~mm_interconnect_0_system_timer_s1_write),     //      .write_n
		.irq        (irq_mapper_receiver0_irq)                      //   irq.irq
	);

	rf_sopc_ram_sample_0 ram_sample_0 (
		.clk         (clk_clk),                                      //   clk1.clk
		.address     (mm_interconnect_0_ram_sample_0_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_sample_0_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_sample_0_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_sample_0_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_sample_0_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_sample_0_s1_writedata),  //       .writedata
		.reset       (rst_controller_reset_out_reset),               // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),           //       .reset_req
		.address2    (ram_0_address),                                //     s2.address
		.chipselect2 (ram_0_chipselect),                             //       .chipselect
		.clken2      (ram_0_clken),                                  //       .clken
		.write2      (ram_0_write),                                  //       .write
		.readdata2   (ram_0_readdata),                               //       .readdata
		.writedata2  (ram_0_writedata),                              //       .writedata
		.clk2        (ram_0_clk_clk),                                //   clk2.clk
		.reset2      (ram_0_reset_reset),                            // reset2.reset
		.reset_req2  (ram_0_reset_reset_req)                         //       .reset_req
	);

	rf_sopc_ram_sample_1 ram_sample_1 (
		.clk         (clk_clk),                                      //   clk1.clk
		.address     (mm_interconnect_0_ram_sample_1_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_sample_1_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_sample_1_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_sample_1_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_sample_1_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_sample_1_s1_writedata),  //       .writedata
		.reset       (rst_controller_reset_out_reset),               // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),           //       .reset_req
		.address2    (ram_1_address),                                //     s2.address
		.chipselect2 (ram_1_chipselect),                             //       .chipselect
		.clken2      (ram_1_clken),                                  //       .clken
		.write2      (ram_1_write),                                  //       .write
		.readdata2   (ram_1_readdata),                               //       .readdata
		.writedata2  (ram_1_writedata),                              //       .writedata
		.clk2        (ram_1_clk_clk),                                //   clk2.clk
		.reset2      (ram_1_reset_reset),                            // reset2.reset
		.reset_req2  (ram_1_reset_reset_req)                         //       .reset_req
	);

	rf_sopc_ram_sample_2 ram_sample_2 (
		.clk         (clk_clk),                                      //   clk1.clk
		.address     (mm_interconnect_0_ram_sample_2_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_sample_2_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_sample_2_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_sample_2_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_sample_2_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_sample_2_s1_writedata),  //       .writedata
		.reset       (rst_controller_reset_out_reset),               // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),           //       .reset_req
		.address2    (ram_2_address),                                //     s2.address
		.chipselect2 (ram_2_chipselect),                             //       .chipselect
		.clken2      (ram_2_clken),                                  //       .clken
		.write2      (ram_2_write),                                  //       .write
		.readdata2   (ram_2_readdata),                               //       .readdata
		.writedata2  (ram_2_writedata),                              //       .writedata
		.clk2        (ram_2_clk_clk),                                //   clk2.clk
		.reset2      (ram_2_reset_reset),                            // reset2.reset
		.reset_req2  (ram_2_reset_reset_req)                         //       .reset_req
	);

	rf_sopc_ram_sample_3 ram_sample_3 (
		.clk         (clk_clk),                                      //   clk1.clk
		.address     (mm_interconnect_0_ram_sample_3_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_sample_3_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_sample_3_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_sample_3_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_sample_3_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_sample_3_s1_writedata),  //       .writedata
		.reset       (rst_controller_reset_out_reset),               // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),           //       .reset_req
		.address2    (ram_3_address),                                //     s2.address
		.chipselect2 (ram_3_chipselect),                             //       .chipselect
		.clken2      (ram_3_clken),                                  //       .clken
		.write2      (ram_3_write),                                  //       .write
		.readdata2   (ram_3_readdata),                               //       .readdata
		.writedata2  (ram_3_writedata),                              //       .writedata
		.clk2        (ram_3_clk_clk),                                //   clk2.clk
		.reset2      (ram_3_reset_reset),                            // reset2.reset
		.reset_req2  (ram_3_reset_reset_req)                         //       .reset_req
	);

	rf_sopc_ram_sample_4 ram_sample_4 (
		.clk         (clk_clk),                                      //   clk1.clk
		.address     (mm_interconnect_0_ram_sample_4_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_sample_4_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_sample_4_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_sample_4_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_sample_4_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_sample_4_s1_writedata),  //       .writedata
		.reset       (rst_controller_reset_out_reset),               // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),           //       .reset_req
		.address2    (ram_4_address),                                //     s2.address
		.chipselect2 (ram_4_chipselect),                             //       .chipselect
		.clken2      (ram_4_clken),                                  //       .clken
		.write2      (ram_4_write),                                  //       .write
		.readdata2   (ram_4_readdata),                               //       .readdata
		.writedata2  (ram_4_writedata),                              //       .writedata
		.clk2        (ram_4_clk_clk),                                //   clk2.clk
		.reset2      (ram_4_reset_reset),                            // reset2.reset
		.reset_req2  (ram_4_reset_reset_req)                         //       .reset_req
	);

	rf_sopc_ram_sample_5 ram_sample_5 (
		.clk         (clk_clk),                                      //   clk1.clk
		.address     (mm_interconnect_0_ram_sample_5_s1_address),    //     s1.address
		.clken       (mm_interconnect_0_ram_sample_5_s1_clken),      //       .clken
		.chipselect  (mm_interconnect_0_ram_sample_5_s1_chipselect), //       .chipselect
		.write       (mm_interconnect_0_ram_sample_5_s1_write),      //       .write
		.readdata    (mm_interconnect_0_ram_sample_5_s1_readdata),   //       .readdata
		.writedata   (mm_interconnect_0_ram_sample_5_s1_writedata),  //       .writedata
		.reset       (rst_controller_reset_out_reset),               // reset1.reset
		.reset_req   (rst_controller_reset_out_reset_req),           //       .reset_req
		.address2    (ram_5_address),                                //     s2.address
		.chipselect2 (ram_5_chipselect),                             //       .chipselect
		.clken2      (ram_5_clken),                                  //       .clken
		.write2      (ram_5_write),                                  //       .write
		.readdata2   (ram_5_readdata),                               //       .readdata
		.writedata2  (ram_5_writedata),                              //       .writedata
		.clk2        (ram_5_clk_clk),                                //   clk2.clk
		.reset2      (ram_5_reset_reset),                            // reset2.reset
		.reset_req2  (ram_5_reset_reset_req)                         //       .reset_req
	);

	laser_driver laser_driver (
		.avmms_cs        (mm_interconnect_0_laser_driver_avalon_slave_0_chipselect), // avalon_slave_0.chipselect
		.avmms_address   (mm_interconnect_0_laser_driver_avalon_slave_0_address),    //               .address
		.avmms_write     (mm_interconnect_0_laser_driver_avalon_slave_0_write),      //               .write
		.avmms_writedata (mm_interconnect_0_laser_driver_avalon_slave_0_writedata),  //               .writedata
		.avmms_read      (mm_interconnect_0_laser_driver_avalon_slave_0_read),       //               .read
		.avmms_readdata  (mm_interconnect_0_laser_driver_avalon_slave_0_readdata),   //               .readdata
		.ref_clk         (laser_driver_ref_clk),                                     //    conduit_end.ref_clk
		.driver_mod_en   (laser_driver_driver_enable),                               //               .driver_enable
		.laser_en        (laser_driver_laser),                                       //               .laser
		.comparator      (laser_driver_comparator),                                  //               .comparator
		.avmms_clk       (clk_clk),                                                  //     clock_sink.clk
		.avmms_reset     (rst_controller_reset_out_reset)                            //     reset_sink.reset
	);

	sample_loader sample_loader (
		.avs_cs        (mm_interconnect_0_sample_loader_avalon_slave_0_chipselect), // avalon_slave_0.chipselect
		.avs_addr      (mm_interconnect_0_sample_loader_avalon_slave_0_address),    //               .address
		.avs_write     (mm_interconnect_0_sample_loader_avalon_slave_0_write),      //               .write
		.avs_writedata (mm_interconnect_0_sample_loader_avalon_slave_0_writedata),  //               .writedata
		.avs_read      (mm_interconnect_0_sample_loader_avalon_slave_0_read),       //               .read
		.avs_readdata  (mm_interconnect_0_sample_loader_avalon_slave_0_readdata),   //               .readdata
		.reset         (sample_loader_global_reset),                                //    conduit_end.global_reset
		.adc_clk       (sample_loader_adc_clk),                                     //               .adc_clk
		.adc_sample    (sample_loader_adc_sample),                                  //               .adc_sample
		.direct_comp   (sample_loader_dir_comparator),                              //               .dir_comparator
		.adaptive_comp (sample_loader_ad_comparator),                               //               .ad_comparator
		.tdc_strobe    (sample_loader_tdc_strobe),                                  //               .tdc_strobe
		.avm_clk       (sample_loader_avm_clk),                                     //               .avm_clk
		.avm_reset     (sample_loader_avm_reset),                                   //               .avm_reset
		.avm_writedata (sample_loader_avm_wdata),                                   //               .avm_wdata
		.avm_cs        (sample_loader_avm_cs),                                      //               .avm_cs
		.avm_write     (sample_loader_avm_write),                                   //               .avm_write
		.avm0_addr     (sample_loader_avm_addr_0),                                  //               .avm_addr_0
		.avm1_addr     (sample_loader_avm_addr_1),                                  //               .avm_addr_1
		.avm2_addr     (sample_loader_avm_addr_2),                                  //               .avm_addr_2
		.avm3_addr     (sample_loader_avm_addr_3),                                  //               .avm_addr_3
		.avm4_addr     (sample_loader_avm_addr_4),                                  //               .avm_addr_4
		.avm5_addr     (sample_loader_avm_addr_5),                                  //               .avm_addr_5
		.avs_reset     (rst_controller_reset_out_reset),                            //     reset_sink.reset
		.avs_clk       (clk_clk)                                                    //     clock_sink.clk
	);

	rf_sopc_pc_uart pc_uart (
		.clk           (clk_clk),                                    //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),            //               reset.reset_n
		.address       (mm_interconnect_0_pc_uart_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_pc_uart_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_pc_uart_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_pc_uart_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_pc_uart_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_pc_uart_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_pc_uart_s1_readdata),      //                    .readdata
		.dataavailable (),                                           //                    .dataavailable
		.readyfordata  (),                                           //                    .readyfordata
		.rxd           (pc_uart_rxd),                                // external_connection.export
		.txd           (pc_uart_txd),                                //                    .export
		.irq           (irq_mapper_receiver1_irq)                    //                 irq.irq
	);

	rf_sopc_pc_uart uart_0 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_0_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_0_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_0_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_0_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_0_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_0_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_0_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_0_rxd),                                // external_connection.export
		.txd           (uart_0_txd),                                //                    .export
		.irq           (irq_mapper_receiver2_irq)                   //                 irq.irq
	);

	rf_sopc_pc_uart uart_1 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_1_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_1_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_1_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_1_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_1_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_1_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_1_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_1_rxd),                                // external_connection.export
		.txd           (uart_1_txd),                                //                    .export
		.irq           (irq_mapper_receiver3_irq)                   //                 irq.irq
	);

	rf_sopc_pc_uart uart_2 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_2_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_2_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_2_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_2_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_2_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_2_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_2_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_2_rxd),                                // external_connection.export
		.txd           (uart_2_txd),                                //                    .export
		.irq           (irq_mapper_receiver4_irq)                   //                 irq.irq
	);

	rf_sopc_pc_uart uart_3 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_3_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_3_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_3_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_3_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_3_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_3_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_3_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_3_rxd),                                // external_connection.export
		.txd           (uart_3_txd),                                //                    .export
		.irq           (irq_mapper_receiver5_irq)                   //                 irq.irq
	);

	rf_sopc_pc_uart uart_4 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_4_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_4_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_4_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_4_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_4_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_4_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_4_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_4_rxd),                                // external_connection.export
		.txd           (uart_4_txd),                                //                    .export
		.irq           (irq_mapper_receiver6_irq)                   //                 irq.irq
	);

	rf_sopc_pc_uart uart_5 (
		.clk           (clk_clk),                                   //                 clk.clk
		.reset_n       (~rst_controller_reset_out_reset),           //               reset.reset_n
		.address       (mm_interconnect_0_uart_5_s1_address),       //                  s1.address
		.begintransfer (mm_interconnect_0_uart_5_s1_begintransfer), //                    .begintransfer
		.chipselect    (mm_interconnect_0_uart_5_s1_chipselect),    //                    .chipselect
		.read_n        (~mm_interconnect_0_uart_5_s1_read),         //                    .read_n
		.write_n       (~mm_interconnect_0_uart_5_s1_write),        //                    .write_n
		.writedata     (mm_interconnect_0_uart_5_s1_writedata),     //                    .writedata
		.readdata      (mm_interconnect_0_uart_5_s1_readdata),      //                    .readdata
		.dataavailable (),                                          //                    .dataavailable
		.readyfordata  (),                                          //                    .readyfordata
		.rxd           (uart_5_rxd),                                // external_connection.export
		.txd           (uart_5_txd),                                //                    .export
		.irq           (irq_mapper_receiver7_irq)                   //                 irq.irq
	);

	rf_sopc_spi_0 spi_0 (
		.clk           (clk_clk),                                             //              clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                     //            reset.reset_n
		.data_from_cpu (mm_interconnect_0_spi_0_spi_control_port_writedata),  // spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_spi_0_spi_control_port_readdata),   //                 .readdata
		.mem_addr      (mm_interconnect_0_spi_0_spi_control_port_address),    //                 .address
		.read_n        (~mm_interconnect_0_spi_0_spi_control_port_read),      //                 .read_n
		.spi_select    (mm_interconnect_0_spi_0_spi_control_port_chipselect), //                 .chipselect
		.write_n       (~mm_interconnect_0_spi_0_spi_control_port_write),     //                 .write_n
		.irq           (irq_mapper_receiver8_irq),                            //              irq.irq
		.MISO          (spi_0_MISO),                                          //         external.export
		.MOSI          (spi_0_MOSI),                                          //                 .export
		.SCLK          (spi_0_SCLK),                                          //                 .export
		.SS_n          (spi_0_SS_n)                                           //                 .export
	);

	rf_sopc_spi_1 spi_1 (
		.clk           (clk_clk),                                             //              clk.clk
		.reset_n       (~rst_controller_reset_out_reset),                     //            reset.reset_n
		.data_from_cpu (mm_interconnect_0_spi_1_spi_control_port_writedata),  // spi_control_port.writedata
		.data_to_cpu   (mm_interconnect_0_spi_1_spi_control_port_readdata),   //                 .readdata
		.mem_addr      (mm_interconnect_0_spi_1_spi_control_port_address),    //                 .address
		.read_n        (~mm_interconnect_0_spi_1_spi_control_port_read),      //                 .read_n
		.spi_select    (mm_interconnect_0_spi_1_spi_control_port_chipselect), //                 .chipselect
		.write_n       (~mm_interconnect_0_spi_1_spi_control_port_write),     //                 .write_n
		.irq           (irq_mapper_receiver9_irq),                            //              irq.irq
		.MISO          (spi_1_MISO),                                          //         external.export
		.MOSI          (spi_1_MOSI),                                          //                 .export
		.SCLK          (spi_1_SCLK),                                          //                 .export
		.SS_n          (spi_1_SS_n)                                           //                 .export
	);

	rf_sopc_i2c_0 i2c_0 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_i2c_0_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_i2c_0_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_i2c_0_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_i2c_0_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_i2c_0_s1_readdata),   //                    .readdata
		.bidir_port (i2c_0_export)                           // external_connection.export
	);

	rf_sopc_i2c_0 i2c_1 (
		.clk        (clk_clk),                               //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),       //               reset.reset_n
		.address    (mm_interconnect_0_i2c_1_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_i2c_1_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_i2c_1_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_i2c_1_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_i2c_1_s1_readdata),   //                    .readdata
		.bidir_port (i2c_1_export)                           // external_connection.export
	);

	rf_sopc_leds leds (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_leds_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_leds_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_leds_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_leds_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_leds_s1_readdata),   //                    .readdata
		.out_port   (leds_export)                           // external_connection.export
	);

	rf_sopc_gpio gpio (
		.clk        (clk_clk),                              //                 clk.clk
		.reset_n    (~rst_controller_reset_out_reset),      //               reset.reset_n
		.address    (mm_interconnect_0_gpio_s1_address),    //                  s1.address
		.write_n    (~mm_interconnect_0_gpio_s1_write),     //                    .write_n
		.writedata  (mm_interconnect_0_gpio_s1_writedata),  //                    .writedata
		.chipselect (mm_interconnect_0_gpio_s1_chipselect), //                    .chipselect
		.readdata   (mm_interconnect_0_gpio_s1_readdata),   //                    .readdata
		.bidir_port (gpio_export)                           // external_connection.export
	);

	rf_sopc_jtag_uart jtag_uart (
		.clk            (clk_clk),                                                   //               clk.clk
		.rst_n          (~rst_controller_reset_out_reset),                           //             reset.reset_n
		.av_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  // avalon_jtag_slave.chipselect
		.av_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //                  .address
		.av_read_n      (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),       //                  .read_n
		.av_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                  .readdata
		.av_write_n     (~mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),      //                  .write_n
		.av_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                  .writedata
		.av_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                  .waitrequest
		.av_irq         ()                                                           //               irq.irq
	);

	rf_sopc_mm_interconnect_0 mm_interconnect_0 (
		.clk_clk_clk                             (clk_clk),                                                   //                           clk_clk.clk
		.cpu_reset_n_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                            // cpu_reset_n_reset_bridge_in_reset.reset
		.cpu_data_master_address                 (cpu_data_master_address),                                   //                   cpu_data_master.address
		.cpu_data_master_waitrequest             (cpu_data_master_waitrequest),                               //                                  .waitrequest
		.cpu_data_master_byteenable              (cpu_data_master_byteenable),                                //                                  .byteenable
		.cpu_data_master_read                    (cpu_data_master_read),                                      //                                  .read
		.cpu_data_master_readdata                (cpu_data_master_readdata),                                  //                                  .readdata
		.cpu_data_master_readdatavalid           (cpu_data_master_readdatavalid),                             //                                  .readdatavalid
		.cpu_data_master_write                   (cpu_data_master_write),                                     //                                  .write
		.cpu_data_master_writedata               (cpu_data_master_writedata),                                 //                                  .writedata
		.cpu_data_master_debugaccess             (cpu_data_master_debugaccess),                               //                                  .debugaccess
		.cpu_instruction_master_address          (cpu_instruction_master_address),                            //            cpu_instruction_master.address
		.cpu_instruction_master_waitrequest      (cpu_instruction_master_waitrequest),                        //                                  .waitrequest
		.cpu_instruction_master_read             (cpu_instruction_master_read),                               //                                  .read
		.cpu_instruction_master_readdata         (cpu_instruction_master_readdata),                           //                                  .readdata
		.cpu_instruction_master_readdatavalid    (cpu_instruction_master_readdatavalid),                      //                                  .readdatavalid
		.cpu_jtag_debug_module_address           (mm_interconnect_0_cpu_jtag_debug_module_address),           //             cpu_jtag_debug_module.address
		.cpu_jtag_debug_module_write             (mm_interconnect_0_cpu_jtag_debug_module_write),             //                                  .write
		.cpu_jtag_debug_module_read              (mm_interconnect_0_cpu_jtag_debug_module_read),              //                                  .read
		.cpu_jtag_debug_module_readdata          (mm_interconnect_0_cpu_jtag_debug_module_readdata),          //                                  .readdata
		.cpu_jtag_debug_module_writedata         (mm_interconnect_0_cpu_jtag_debug_module_writedata),         //                                  .writedata
		.cpu_jtag_debug_module_byteenable        (mm_interconnect_0_cpu_jtag_debug_module_byteenable),        //                                  .byteenable
		.cpu_jtag_debug_module_waitrequest       (mm_interconnect_0_cpu_jtag_debug_module_waitrequest),       //                                  .waitrequest
		.cpu_jtag_debug_module_debugaccess       (mm_interconnect_0_cpu_jtag_debug_module_debugaccess),       //                                  .debugaccess
		.gpio_s1_address                         (mm_interconnect_0_gpio_s1_address),                         //                           gpio_s1.address
		.gpio_s1_write                           (mm_interconnect_0_gpio_s1_write),                           //                                  .write
		.gpio_s1_readdata                        (mm_interconnect_0_gpio_s1_readdata),                        //                                  .readdata
		.gpio_s1_writedata                       (mm_interconnect_0_gpio_s1_writedata),                       //                                  .writedata
		.gpio_s1_chipselect                      (mm_interconnect_0_gpio_s1_chipselect),                      //                                  .chipselect
		.i2c_0_s1_address                        (mm_interconnect_0_i2c_0_s1_address),                        //                          i2c_0_s1.address
		.i2c_0_s1_write                          (mm_interconnect_0_i2c_0_s1_write),                          //                                  .write
		.i2c_0_s1_readdata                       (mm_interconnect_0_i2c_0_s1_readdata),                       //                                  .readdata
		.i2c_0_s1_writedata                      (mm_interconnect_0_i2c_0_s1_writedata),                      //                                  .writedata
		.i2c_0_s1_chipselect                     (mm_interconnect_0_i2c_0_s1_chipselect),                     //                                  .chipselect
		.i2c_1_s1_address                        (mm_interconnect_0_i2c_1_s1_address),                        //                          i2c_1_s1.address
		.i2c_1_s1_write                          (mm_interconnect_0_i2c_1_s1_write),                          //                                  .write
		.i2c_1_s1_readdata                       (mm_interconnect_0_i2c_1_s1_readdata),                       //                                  .readdata
		.i2c_1_s1_writedata                      (mm_interconnect_0_i2c_1_s1_writedata),                      //                                  .writedata
		.i2c_1_s1_chipselect                     (mm_interconnect_0_i2c_1_s1_chipselect),                     //                                  .chipselect
		.jtag_uart_avalon_jtag_slave_address     (mm_interconnect_0_jtag_uart_avalon_jtag_slave_address),     //       jtag_uart_avalon_jtag_slave.address
		.jtag_uart_avalon_jtag_slave_write       (mm_interconnect_0_jtag_uart_avalon_jtag_slave_write),       //                                  .write
		.jtag_uart_avalon_jtag_slave_read        (mm_interconnect_0_jtag_uart_avalon_jtag_slave_read),        //                                  .read
		.jtag_uart_avalon_jtag_slave_readdata    (mm_interconnect_0_jtag_uart_avalon_jtag_slave_readdata),    //                                  .readdata
		.jtag_uart_avalon_jtag_slave_writedata   (mm_interconnect_0_jtag_uart_avalon_jtag_slave_writedata),   //                                  .writedata
		.jtag_uart_avalon_jtag_slave_waitrequest (mm_interconnect_0_jtag_uart_avalon_jtag_slave_waitrequest), //                                  .waitrequest
		.jtag_uart_avalon_jtag_slave_chipselect  (mm_interconnect_0_jtag_uart_avalon_jtag_slave_chipselect),  //                                  .chipselect
		.laser_driver_avalon_slave_0_address     (mm_interconnect_0_laser_driver_avalon_slave_0_address),     //       laser_driver_avalon_slave_0.address
		.laser_driver_avalon_slave_0_write       (mm_interconnect_0_laser_driver_avalon_slave_0_write),       //                                  .write
		.laser_driver_avalon_slave_0_read        (mm_interconnect_0_laser_driver_avalon_slave_0_read),        //                                  .read
		.laser_driver_avalon_slave_0_readdata    (mm_interconnect_0_laser_driver_avalon_slave_0_readdata),    //                                  .readdata
		.laser_driver_avalon_slave_0_writedata   (mm_interconnect_0_laser_driver_avalon_slave_0_writedata),   //                                  .writedata
		.laser_driver_avalon_slave_0_chipselect  (mm_interconnect_0_laser_driver_avalon_slave_0_chipselect),  //                                  .chipselect
		.leds_s1_address                         (mm_interconnect_0_leds_s1_address),                         //                           leds_s1.address
		.leds_s1_write                           (mm_interconnect_0_leds_s1_write),                           //                                  .write
		.leds_s1_readdata                        (mm_interconnect_0_leds_s1_readdata),                        //                                  .readdata
		.leds_s1_writedata                       (mm_interconnect_0_leds_s1_writedata),                       //                                  .writedata
		.leds_s1_chipselect                      (mm_interconnect_0_leds_s1_chipselect),                      //                                  .chipselect
		.pc_uart_s1_address                      (mm_interconnect_0_pc_uart_s1_address),                      //                        pc_uart_s1.address
		.pc_uart_s1_write                        (mm_interconnect_0_pc_uart_s1_write),                        //                                  .write
		.pc_uart_s1_read                         (mm_interconnect_0_pc_uart_s1_read),                         //                                  .read
		.pc_uart_s1_readdata                     (mm_interconnect_0_pc_uart_s1_readdata),                     //                                  .readdata
		.pc_uart_s1_writedata                    (mm_interconnect_0_pc_uart_s1_writedata),                    //                                  .writedata
		.pc_uart_s1_begintransfer                (mm_interconnect_0_pc_uart_s1_begintransfer),                //                                  .begintransfer
		.pc_uart_s1_chipselect                   (mm_interconnect_0_pc_uart_s1_chipselect),                   //                                  .chipselect
		.ram_cpu_s1_address                      (mm_interconnect_0_ram_cpu_s1_address),                      //                        ram_cpu_s1.address
		.ram_cpu_s1_write                        (mm_interconnect_0_ram_cpu_s1_write),                        //                                  .write
		.ram_cpu_s1_readdata                     (mm_interconnect_0_ram_cpu_s1_readdata),                     //                                  .readdata
		.ram_cpu_s1_writedata                    (mm_interconnect_0_ram_cpu_s1_writedata),                    //                                  .writedata
		.ram_cpu_s1_byteenable                   (mm_interconnect_0_ram_cpu_s1_byteenable),                   //                                  .byteenable
		.ram_cpu_s1_chipselect                   (mm_interconnect_0_ram_cpu_s1_chipselect),                   //                                  .chipselect
		.ram_cpu_s1_clken                        (mm_interconnect_0_ram_cpu_s1_clken),                        //                                  .clken
		.ram_cpu_s2_address                      (mm_interconnect_0_ram_cpu_s2_address),                      //                        ram_cpu_s2.address
		.ram_cpu_s2_write                        (mm_interconnect_0_ram_cpu_s2_write),                        //                                  .write
		.ram_cpu_s2_readdata                     (mm_interconnect_0_ram_cpu_s2_readdata),                     //                                  .readdata
		.ram_cpu_s2_writedata                    (mm_interconnect_0_ram_cpu_s2_writedata),                    //                                  .writedata
		.ram_cpu_s2_byteenable                   (mm_interconnect_0_ram_cpu_s2_byteenable),                   //                                  .byteenable
		.ram_cpu_s2_chipselect                   (mm_interconnect_0_ram_cpu_s2_chipselect),                   //                                  .chipselect
		.ram_cpu_s2_clken                        (mm_interconnect_0_ram_cpu_s2_clken),                        //                                  .clken
		.ram_sample_0_s1_address                 (mm_interconnect_0_ram_sample_0_s1_address),                 //                   ram_sample_0_s1.address
		.ram_sample_0_s1_write                   (mm_interconnect_0_ram_sample_0_s1_write),                   //                                  .write
		.ram_sample_0_s1_readdata                (mm_interconnect_0_ram_sample_0_s1_readdata),                //                                  .readdata
		.ram_sample_0_s1_writedata               (mm_interconnect_0_ram_sample_0_s1_writedata),               //                                  .writedata
		.ram_sample_0_s1_chipselect              (mm_interconnect_0_ram_sample_0_s1_chipselect),              //                                  .chipselect
		.ram_sample_0_s1_clken                   (mm_interconnect_0_ram_sample_0_s1_clken),                   //                                  .clken
		.ram_sample_1_s1_address                 (mm_interconnect_0_ram_sample_1_s1_address),                 //                   ram_sample_1_s1.address
		.ram_sample_1_s1_write                   (mm_interconnect_0_ram_sample_1_s1_write),                   //                                  .write
		.ram_sample_1_s1_readdata                (mm_interconnect_0_ram_sample_1_s1_readdata),                //                                  .readdata
		.ram_sample_1_s1_writedata               (mm_interconnect_0_ram_sample_1_s1_writedata),               //                                  .writedata
		.ram_sample_1_s1_chipselect              (mm_interconnect_0_ram_sample_1_s1_chipselect),              //                                  .chipselect
		.ram_sample_1_s1_clken                   (mm_interconnect_0_ram_sample_1_s1_clken),                   //                                  .clken
		.ram_sample_2_s1_address                 (mm_interconnect_0_ram_sample_2_s1_address),                 //                   ram_sample_2_s1.address
		.ram_sample_2_s1_write                   (mm_interconnect_0_ram_sample_2_s1_write),                   //                                  .write
		.ram_sample_2_s1_readdata                (mm_interconnect_0_ram_sample_2_s1_readdata),                //                                  .readdata
		.ram_sample_2_s1_writedata               (mm_interconnect_0_ram_sample_2_s1_writedata),               //                                  .writedata
		.ram_sample_2_s1_chipselect              (mm_interconnect_0_ram_sample_2_s1_chipselect),              //                                  .chipselect
		.ram_sample_2_s1_clken                   (mm_interconnect_0_ram_sample_2_s1_clken),                   //                                  .clken
		.ram_sample_3_s1_address                 (mm_interconnect_0_ram_sample_3_s1_address),                 //                   ram_sample_3_s1.address
		.ram_sample_3_s1_write                   (mm_interconnect_0_ram_sample_3_s1_write),                   //                                  .write
		.ram_sample_3_s1_readdata                (mm_interconnect_0_ram_sample_3_s1_readdata),                //                                  .readdata
		.ram_sample_3_s1_writedata               (mm_interconnect_0_ram_sample_3_s1_writedata),               //                                  .writedata
		.ram_sample_3_s1_chipselect              (mm_interconnect_0_ram_sample_3_s1_chipselect),              //                                  .chipselect
		.ram_sample_3_s1_clken                   (mm_interconnect_0_ram_sample_3_s1_clken),                   //                                  .clken
		.ram_sample_4_s1_address                 (mm_interconnect_0_ram_sample_4_s1_address),                 //                   ram_sample_4_s1.address
		.ram_sample_4_s1_write                   (mm_interconnect_0_ram_sample_4_s1_write),                   //                                  .write
		.ram_sample_4_s1_readdata                (mm_interconnect_0_ram_sample_4_s1_readdata),                //                                  .readdata
		.ram_sample_4_s1_writedata               (mm_interconnect_0_ram_sample_4_s1_writedata),               //                                  .writedata
		.ram_sample_4_s1_chipselect              (mm_interconnect_0_ram_sample_4_s1_chipselect),              //                                  .chipselect
		.ram_sample_4_s1_clken                   (mm_interconnect_0_ram_sample_4_s1_clken),                   //                                  .clken
		.ram_sample_5_s1_address                 (mm_interconnect_0_ram_sample_5_s1_address),                 //                   ram_sample_5_s1.address
		.ram_sample_5_s1_write                   (mm_interconnect_0_ram_sample_5_s1_write),                   //                                  .write
		.ram_sample_5_s1_readdata                (mm_interconnect_0_ram_sample_5_s1_readdata),                //                                  .readdata
		.ram_sample_5_s1_writedata               (mm_interconnect_0_ram_sample_5_s1_writedata),               //                                  .writedata
		.ram_sample_5_s1_chipselect              (mm_interconnect_0_ram_sample_5_s1_chipselect),              //                                  .chipselect
		.ram_sample_5_s1_clken                   (mm_interconnect_0_ram_sample_5_s1_clken),                   //                                  .clken
		.sample_loader_avalon_slave_0_address    (mm_interconnect_0_sample_loader_avalon_slave_0_address),    //      sample_loader_avalon_slave_0.address
		.sample_loader_avalon_slave_0_write      (mm_interconnect_0_sample_loader_avalon_slave_0_write),      //                                  .write
		.sample_loader_avalon_slave_0_read       (mm_interconnect_0_sample_loader_avalon_slave_0_read),       //                                  .read
		.sample_loader_avalon_slave_0_readdata   (mm_interconnect_0_sample_loader_avalon_slave_0_readdata),   //                                  .readdata
		.sample_loader_avalon_slave_0_writedata  (mm_interconnect_0_sample_loader_avalon_slave_0_writedata),  //                                  .writedata
		.sample_loader_avalon_slave_0_chipselect (mm_interconnect_0_sample_loader_avalon_slave_0_chipselect), //                                  .chipselect
		.spi_0_spi_control_port_address          (mm_interconnect_0_spi_0_spi_control_port_address),          //            spi_0_spi_control_port.address
		.spi_0_spi_control_port_write            (mm_interconnect_0_spi_0_spi_control_port_write),            //                                  .write
		.spi_0_spi_control_port_read             (mm_interconnect_0_spi_0_spi_control_port_read),             //                                  .read
		.spi_0_spi_control_port_readdata         (mm_interconnect_0_spi_0_spi_control_port_readdata),         //                                  .readdata
		.spi_0_spi_control_port_writedata        (mm_interconnect_0_spi_0_spi_control_port_writedata),        //                                  .writedata
		.spi_0_spi_control_port_chipselect       (mm_interconnect_0_spi_0_spi_control_port_chipselect),       //                                  .chipselect
		.spi_1_spi_control_port_address          (mm_interconnect_0_spi_1_spi_control_port_address),          //            spi_1_spi_control_port.address
		.spi_1_spi_control_port_write            (mm_interconnect_0_spi_1_spi_control_port_write),            //                                  .write
		.spi_1_spi_control_port_read             (mm_interconnect_0_spi_1_spi_control_port_read),             //                                  .read
		.spi_1_spi_control_port_readdata         (mm_interconnect_0_spi_1_spi_control_port_readdata),         //                                  .readdata
		.spi_1_spi_control_port_writedata        (mm_interconnect_0_spi_1_spi_control_port_writedata),        //                                  .writedata
		.spi_1_spi_control_port_chipselect       (mm_interconnect_0_spi_1_spi_control_port_chipselect),       //                                  .chipselect
		.sysid_control_slave_address             (mm_interconnect_0_sysid_control_slave_address),             //               sysid_control_slave.address
		.sysid_control_slave_readdata            (mm_interconnect_0_sysid_control_slave_readdata),            //                                  .readdata
		.system_timer_s1_address                 (mm_interconnect_0_system_timer_s1_address),                 //                   system_timer_s1.address
		.system_timer_s1_write                   (mm_interconnect_0_system_timer_s1_write),                   //                                  .write
		.system_timer_s1_readdata                (mm_interconnect_0_system_timer_s1_readdata),                //                                  .readdata
		.system_timer_s1_writedata               (mm_interconnect_0_system_timer_s1_writedata),               //                                  .writedata
		.system_timer_s1_chipselect              (mm_interconnect_0_system_timer_s1_chipselect),              //                                  .chipselect
		.uart_0_s1_address                       (mm_interconnect_0_uart_0_s1_address),                       //                         uart_0_s1.address
		.uart_0_s1_write                         (mm_interconnect_0_uart_0_s1_write),                         //                                  .write
		.uart_0_s1_read                          (mm_interconnect_0_uart_0_s1_read),                          //                                  .read
		.uart_0_s1_readdata                      (mm_interconnect_0_uart_0_s1_readdata),                      //                                  .readdata
		.uart_0_s1_writedata                     (mm_interconnect_0_uart_0_s1_writedata),                     //                                  .writedata
		.uart_0_s1_begintransfer                 (mm_interconnect_0_uart_0_s1_begintransfer),                 //                                  .begintransfer
		.uart_0_s1_chipselect                    (mm_interconnect_0_uart_0_s1_chipselect),                    //                                  .chipselect
		.uart_1_s1_address                       (mm_interconnect_0_uart_1_s1_address),                       //                         uart_1_s1.address
		.uart_1_s1_write                         (mm_interconnect_0_uart_1_s1_write),                         //                                  .write
		.uart_1_s1_read                          (mm_interconnect_0_uart_1_s1_read),                          //                                  .read
		.uart_1_s1_readdata                      (mm_interconnect_0_uart_1_s1_readdata),                      //                                  .readdata
		.uart_1_s1_writedata                     (mm_interconnect_0_uart_1_s1_writedata),                     //                                  .writedata
		.uart_1_s1_begintransfer                 (mm_interconnect_0_uart_1_s1_begintransfer),                 //                                  .begintransfer
		.uart_1_s1_chipselect                    (mm_interconnect_0_uart_1_s1_chipselect),                    //                                  .chipselect
		.uart_2_s1_address                       (mm_interconnect_0_uart_2_s1_address),                       //                         uart_2_s1.address
		.uart_2_s1_write                         (mm_interconnect_0_uart_2_s1_write),                         //                                  .write
		.uart_2_s1_read                          (mm_interconnect_0_uart_2_s1_read),                          //                                  .read
		.uart_2_s1_readdata                      (mm_interconnect_0_uart_2_s1_readdata),                      //                                  .readdata
		.uart_2_s1_writedata                     (mm_interconnect_0_uart_2_s1_writedata),                     //                                  .writedata
		.uart_2_s1_begintransfer                 (mm_interconnect_0_uart_2_s1_begintransfer),                 //                                  .begintransfer
		.uart_2_s1_chipselect                    (mm_interconnect_0_uart_2_s1_chipselect),                    //                                  .chipselect
		.uart_3_s1_address                       (mm_interconnect_0_uart_3_s1_address),                       //                         uart_3_s1.address
		.uart_3_s1_write                         (mm_interconnect_0_uart_3_s1_write),                         //                                  .write
		.uart_3_s1_read                          (mm_interconnect_0_uart_3_s1_read),                          //                                  .read
		.uart_3_s1_readdata                      (mm_interconnect_0_uart_3_s1_readdata),                      //                                  .readdata
		.uart_3_s1_writedata                     (mm_interconnect_0_uart_3_s1_writedata),                     //                                  .writedata
		.uart_3_s1_begintransfer                 (mm_interconnect_0_uart_3_s1_begintransfer),                 //                                  .begintransfer
		.uart_3_s1_chipselect                    (mm_interconnect_0_uart_3_s1_chipselect),                    //                                  .chipselect
		.uart_4_s1_address                       (mm_interconnect_0_uart_4_s1_address),                       //                         uart_4_s1.address
		.uart_4_s1_write                         (mm_interconnect_0_uart_4_s1_write),                         //                                  .write
		.uart_4_s1_read                          (mm_interconnect_0_uart_4_s1_read),                          //                                  .read
		.uart_4_s1_readdata                      (mm_interconnect_0_uart_4_s1_readdata),                      //                                  .readdata
		.uart_4_s1_writedata                     (mm_interconnect_0_uart_4_s1_writedata),                     //                                  .writedata
		.uart_4_s1_begintransfer                 (mm_interconnect_0_uart_4_s1_begintransfer),                 //                                  .begintransfer
		.uart_4_s1_chipselect                    (mm_interconnect_0_uart_4_s1_chipselect),                    //                                  .chipselect
		.uart_5_s1_address                       (mm_interconnect_0_uart_5_s1_address),                       //                         uart_5_s1.address
		.uart_5_s1_write                         (mm_interconnect_0_uart_5_s1_write),                         //                                  .write
		.uart_5_s1_read                          (mm_interconnect_0_uart_5_s1_read),                          //                                  .read
		.uart_5_s1_readdata                      (mm_interconnect_0_uart_5_s1_readdata),                      //                                  .readdata
		.uart_5_s1_writedata                     (mm_interconnect_0_uart_5_s1_writedata),                     //                                  .writedata
		.uart_5_s1_begintransfer                 (mm_interconnect_0_uart_5_s1_begintransfer),                 //                                  .begintransfer
		.uart_5_s1_chipselect                    (mm_interconnect_0_uart_5_s1_chipselect)                     //                                  .chipselect
	);

	rf_sopc_irq_mapper irq_mapper (
		.clk           (clk_clk),                        //       clk.clk
		.reset         (rst_controller_reset_out_reset), // clk_reset.reset
		.receiver0_irq (irq_mapper_receiver0_irq),       // receiver0.irq
		.receiver1_irq (irq_mapper_receiver1_irq),       // receiver1.irq
		.receiver2_irq (irq_mapper_receiver2_irq),       // receiver2.irq
		.receiver3_irq (irq_mapper_receiver3_irq),       // receiver3.irq
		.receiver4_irq (irq_mapper_receiver4_irq),       // receiver4.irq
		.receiver5_irq (irq_mapper_receiver5_irq),       // receiver5.irq
		.receiver6_irq (irq_mapper_receiver6_irq),       // receiver6.irq
		.receiver7_irq (irq_mapper_receiver7_irq),       // receiver7.irq
		.receiver8_irq (irq_mapper_receiver8_irq),       // receiver8.irq
		.receiver9_irq (irq_mapper_receiver9_irq),       // receiver9.irq
		.sender_irq    (cpu_d_irq_irq)                   //    sender.irq
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (2),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (1),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~reset_reset_n),                     // reset_in0.reset
		.reset_in1      (cpu_jtag_debug_module_reset_reset),  // reset_in1.reset
		.clk            (clk_clk),                            //       clk.clk
		.reset_out      (rst_controller_reset_out_reset),     // reset_out.reset
		.reset_req      (rst_controller_reset_out_reset_req), //          .reset_req
		.reset_req_in0  (1'b0),                               // (terminated)
		.reset_req_in1  (1'b0),                               // (terminated)
		.reset_in2      (1'b0),                               // (terminated)
		.reset_req_in2  (1'b0),                               // (terminated)
		.reset_in3      (1'b0),                               // (terminated)
		.reset_req_in3  (1'b0),                               // (terminated)
		.reset_in4      (1'b0),                               // (terminated)
		.reset_req_in4  (1'b0),                               // (terminated)
		.reset_in5      (1'b0),                               // (terminated)
		.reset_req_in5  (1'b0),                               // (terminated)
		.reset_in6      (1'b0),                               // (terminated)
		.reset_req_in6  (1'b0),                               // (terminated)
		.reset_in7      (1'b0),                               // (terminated)
		.reset_req_in7  (1'b0),                               // (terminated)
		.reset_in8      (1'b0),                               // (terminated)
		.reset_req_in8  (1'b0),                               // (terminated)
		.reset_in9      (1'b0),                               // (terminated)
		.reset_req_in9  (1'b0),                               // (terminated)
		.reset_in10     (1'b0),                               // (terminated)
		.reset_req_in10 (1'b0),                               // (terminated)
		.reset_in11     (1'b0),                               // (terminated)
		.reset_req_in11 (1'b0),                               // (terminated)
		.reset_in12     (1'b0),                               // (terminated)
		.reset_req_in12 (1'b0),                               // (terminated)
		.reset_in13     (1'b0),                               // (terminated)
		.reset_req_in13 (1'b0),                               // (terminated)
		.reset_in14     (1'b0),                               // (terminated)
		.reset_req_in14 (1'b0),                               // (terminated)
		.reset_in15     (1'b0),                               // (terminated)
		.reset_req_in15 (1'b0)                                // (terminated)
	);

endmodule
